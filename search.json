[{"title":"MQTT的发布和订阅","url":"/post/3af7fcdd.html","content":"\n\n\n\n\n### 准备工作\n\n本文测试MQTT的发布/订阅，分为客户端版和python版。\n\n首先我们需要一个MQTT服务器，这里推荐使用[EMQ](https://www.emqx.cn/downloads#broker)，一步搭建，省去了很多部署的麻烦。\n\n选择Windows版本下载，自己选择目录解压后，进入`bin`目录打开cmd，运行`emqx start`命令开启服务即可。此时在浏览器地址栏输入: `localhost:18083`，输入用户名：`admin`，密码：`public`进入，可以看到主界面。\n\n![image-20210316142312122](https://i.loli.net/2021/03/16/RnXQu4xr3cp2eZs.png)\n\n### Python版本\n\n#### 下载库\n\n`cmd`下执行这个命令\n\n```shell\npip install paho-mqtt\n```\n\n#### 编写订阅端\n\n新建一个`mqtt_sub.py`文件，编写代码如下：\n\n```python\nimport paho.mqtt.client as mqtt\n\nHOST = \"127.0.0.1\"\nPORT = 1883\n\n\ndef on_connect(client, userdata, flags, rc):\n    print(\"Connected with result code \" + str(rc))\n    client.subscribe(\"chat\")\n\n\ndef on_message(client, userdata, msg):\n    print(msg.topic + \" \" + \":\" + str(msg.payload))\n\n\nclient = mqtt.Client()\nclient.on_connect = on_connect\nclient.on_message = on_message\nclient.connect(host=HOST, port=PORT, keepalive=600)\nclient.loop_forever()\n\n```\n\n#### 编写发布端\n\n新建一个`mqtt_pub.py`文件，编写代码如下：\n\n```python\nimport paho.mqtt.client as mqtt\n\nHOST = \"127.0.0.1\"\nPORT = 1883\nmqttClient = mqtt.Client()\n\n\n# 连接MQTT服务器\ndef on_mqtt_connect():\n    mqttClient.connect(host=HOST, port=PORT, keepalive=600)\n    mqttClient.loop_start()\n\n\n# publish 消息\ndef on_publish(topic, payload, qos):\n    mqttClient.publish(topic, payload, qos)\n\n\n# 消息处理函数\ndef on_message_come(client, userdata, msg):\n    print(msg.topic + \" \" + \":\" + str(msg.payload))\n\n\n# subscribe 消息\ndef on_subscribe():\n    mqttClient.subscribe(topic=\"chat\", qos=2)\n    mqttClient.on_message = on_message_come  # 消息到来处理函数\n\n\ndef main():\n    on_mqtt_connect()\n    on_publish(topic=\"chat\", payload=\"Hello Python!\", qos=2)\n    on_subscribe()\n    while True:\n        pass\n\n\nif __name__ == '__main__':\n    main()\n\n```\n\n#### 执行文件\n\n首先运行`mqtt_sub.py`，接着，同时运行`mqtt_pub.py`，这时候就可以收到自己订阅的消息\n\n![image-20210316140937642](https://i.loli.net/2021/03/16/jiwxE4GR6Vv5zkf.png)\n\n至此，Python版本测试成功。[完整代码](https://github.com/GarfieldCCC/MQTT-Test)\n\n\n\n### 客户端版本\n\n#### 下载客户端工具\n\n这里推荐[MQTT.fx](http://mqttfx.jensd.de/index.php/download)\n\n下载完毕安装后打开界面如下：\n\n![image-20210316142535670](https://i.loli.net/2021/03/16/YIzjhMyoc4mG7ug.png)\n\n#### 配置连接\n\nExtras->Edit Connection Profiles，然后按照下图配置\n\n![image-20210316142900875](https://i.loli.net/2021/03/16/GsIfWxOoFy9q2Q3.png)\n\n配置完毕后点击`Connect`\n\n![image-20210316143015378](https://i.loli.net/2021/03/16/D5y8qxPRMEHp36u.png)\n\n创建自己的订阅\n\n![image-20210316143134253](https://i.loli.net/2021/03/16/Q98FhA7IVZy56nW.png)\n\n这边配置完毕，接下来进入刚刚的Dashboard，选择`Websocket`\n\n![image-20210316143302417](https://i.loli.net/2021/03/16/UWPzEy3DbfLVaCT.png)\n\n先连接\n\n![image-20210316143335024](https://i.loli.net/2021/03/16/9WAfHbLw3pXTMJd.png)\n\n然后发布一个主题为goods的信息\n\n![image-20210316143424889](https://i.loli.net/2021/03/16/dF83UqCiQAzflag.png)\n\n发送后MQTT.fx客户端便会接收到发送的信息\n\n![image-20210316143448684](https://i.loli.net/2021/03/16/7duHlLGY3btSVMq.png)\n\n至此，客户端版本测试完毕","tags":["MQTT","Python"],"categories":["记录","网络"]},{"title":"MQTT简单介绍","url":"/post/9f1ab931.html","content":"\n\n\n### 简述\n\nMQTT（Message Queuing Telemetry Transport，消息队列遥测传输协议），是一种基于发布/订阅模式的\"轻量级\"通讯协议，该协议构建于TCP/IP协议上。好比你给好友发送一封电子邮件，发送完成后你可以去做别的事情，收件人也不必立刻响应，可以在自己有空的时候查看邮件，是一个典型的异步发布/订阅场景。而另一种典型的同步请求/回答场景，可以用接打电话的场景来类比。\n\nMQTT的设计遵循以下的原则：\n\n1. 精简，不添加可有可无的功能。\n2. 发布/订阅（Pub/Sub）模式，方便消息在传感器之间传递。\n3. 允许用户动态创建主题，零运维成本。\n4. 把传输量降到最低以提高传输效率。\n5. 把低带宽、高延迟、不稳定的网络等因素考虑在内。\n6. 支持连续的会话控制。\n7. 理解客户端计算能力可能很低。\n8. 提供服务质量管理。\n9. 假设数据不可知，不强求传输数据的类型与格式，保持灵活性。\n\n#### 服务质量\n\n为了满足不同的场景，MQTT支持三种不同级别的服务质量（Quality of Service，QoS）为不同场景提供消息可靠性：\n\n1. 级别0：尽力而为。消息发送者会想尽办法发送消息，但是遇到意外并不会重试。\n2. 级别1：至少一次。消息接收者如果没有知会或者知会本身丢失，消息发送者会再次发送以保证消息接收者至少会收到一次，当然可能造成重复消息。\n3. 级别2：恰好一次。保证这种语义肯待会减少并发或者增加延时，不过丢失或者重复消息是不可接受的时候，级别2是最合适的。\n\n#### 消息类型\n\nMQTT拥有14种不同的消息类型：\n\n1. CONNECT：客户端连接到MQTT代理\n2. CONNACK：连接确认\n3. PUBLISH：新发布消息\n4. PUBACK：新发布消息确认，是QoS 1给PUBLISH消息的回复\n5. PUBREC：QoS 2消息流的第一部分，表示消息发布已记录\n6. PUBREL：QoS 2消息流的第二部分，表示消息发布已释放\n7. PUBCOMP：QoS 2消息流的第三部分，表示消息发布完成\n8. SUBSCRIBE：客户端订阅某个主题\n9. SUBACK：对于SUBSCRIBE消息的确认\n10. UNSUBSCRIBE：客户端终止订阅的消息\n11. UNSUBACK：对于UNSUBSCRIBE消息的确认\n12. PINGREQ：心跳\n13. PINGRESP：确认心跳\n14. DISCONNECT：客户端终止连接前优雅地通知MQTT代理\n\n### MQTT协议原理\n\n![1](https://i.loli.net/2021/03/16/Fr3jR7aoeyY6JIP.png)\n\n#### MQTT协议实现方式\n\n实现MQTT协议需要客户端和服务器端通讯完成，在通讯过程中，MQTT协议中有三种身份：发布者（Publish）、代理（Broker）（服务器）、订阅者（Subscribe）。其中，消息的发布者和订阅者都是客户端，消息代理是服务器，消息发布者可以同时是订阅者。\n\nMQTT传输的消息分为：主题（Topic）和负载（payload）两部分：\n\n1. Topic，可以理解为消息的类型，订阅者订阅（Subscribe）后，就会收到该主题的消息内容（payload）；\n2. payload，可以理解为消息的内容，是指订阅者具体要使用的内容。\n\n#### 网络传输与应用消息\n\nMQTT会构建底层网络传输：它将建立客户端到服务器的连接，提供两者之间的一个有序的、无损的、基于字节流的双向传输。\n\n当应用数据通过MQTT网络发送时，MQTT会把与之相关的服务质量（QoS）和主题名（Topic）相关连。\n\n#### MQTT客户端\n\n一个使用MQTT协议的应用程序或者设备，它总是建立到服务器的网络连接。客户端可以：\n\n1. 发布其他客户端可能会订阅的信息；\n2. 订阅其它客户端发布的消息；\n3. 退订或删除应用程序的消息；\n4. 断开与服务器连接。\n\n#### MQTT服务器\n\nMQTT服务器以称为\"消息代理\"（Broker），可以是一个应用程序或一台设备。它是位于消息发布者和订阅者之间，它可以：\n\n1. 接受来自客户的网络连接；\n2. 接受客户发布的应用信息；\n3. 处理来自客户端的订阅和退订请求；\n4. 向订阅的客户转发应用程序消息。\n\n#### MQTT协议中的订阅、主题、会话\n\n##### 订阅（Subscription）\n\n订阅包含主题筛选器（Topic Filter）和最大服务质量（QoS）。订阅会与一个会话（Session）关联。一个会话可以包含多个订阅。每一个会话中的每个订阅都有一个不同的主题筛选器。\n\n##### 会话（Session）\n\n每个客户端与服务器建立连接后就是一个会话，客户端和服务器之间有状态交互。会话存在于一个网络之间，也可能在客户端和服务器之间跨越多个连续的网络连接。\n\n##### 主题（Topic Name）\n\n连接到一个应用程序消息的标签，该标签与服务器的订阅相匹配。服务器会将消息发送给订阅所匹配标签的每个客户端。\n\n##### 主题筛选器（Topic Filter）\n\n一个对主题名通配符筛选器，在订阅表达式中使用，表示订阅所匹配到的多个主题。\n\n##### 负载（Payload）\n\n消息订阅者所具体接收的内容。\n\n#### MQTT协议中的方法\n\nMQTT协议中定义了一些方法（也被称为动作），来于表示对确定资源所进行操作。这个资源可以代表预先存在的数据或动态生成数据，这取决于服务器的实现。通常来说，资源指服务器上的文件或输出。主要方法有：\n\n1. Connect：等待与服务器建立连接。\n2. Disconnect：等待MQTT客户端完成所做的工作，并与服务器断开TCP/IP会话。\n3. Subscribe：等待完成订阅。\n4. UnSubscribe：等待服务器取消客户端的一个或多个topics订阅。\n5. Publish：MQTT客户端发送消息请求，发送完成后返回应用程序线程。","tags":["MQTT"],"categories":["记录","网络"]},{"title":"Hexo解决难看的中文URL编码","url":"/post/9d25bc33.html","content":"\n\n\n### 为什么写这篇文章\n\n你的基于Hexo搭建起来的博客，如果你的文章标题含有中文，那么你会看到你的URL被解析成了非常难看的样子。为了看起来更加简洁，使用这款[Hexo-addrlink](https://github.com/Rozbo/hexo-abbrlink)插件就可以解决\n\n![110872814-7d992700-830b-11eb-84a3-85d8a3525680](https://i.loli.net/2021/03/12/GbQmP7uqlX6iBaz.png)\n\n### 使用\n\n#### 安装插件\n\n```shell\nnpm install hexo-abbrlink --save\n```\n\n### 配置\n\n修改根目录站点配置文件`_config.yml`，改为：\n\n```yaml\npermalink: posts/:abbrlink.html\nabbrlink:\n    alg: crc32\n    rep: hex\n```\n\n然后hexo三连后 便会自动在原来的.`md`文件中生成`abbrlink`字段\n\n成果如下：\n\n![image-20210312163322788](https://i.loli.net/2021/03/12/EubR4JOnoG3dLM7.png)\n\n","tags":["编码","Hexo"],"categories":["记录"]},{"title":"导出iOS设备的微信数据到电脑","url":"/post/1f905c2f.html","content":"\n\n\n### 准备工作\n\n[iTunes](https://www.apple.com.cn/itunes/)\n\n[iPhone Backup Extractor](https://www.iphonebackupextractor.com/zh/free-download/)\n\n数据库工具（本文以[DB Browser for SQLite](http://www.sqlitebrowser.org/dl/)为例）\n\n### 下载上述的三个工具\n\n#### iTunes\n\n进入官网，拉到下面，点击`Windows`，进入后下载。如果没有反应，需要打开为新标签\n\n![image-20210311164947421](https://i.loli.net/2021/03/11/hcpi6Rj7LHDVQyS.png)\n\n![image-20210311165034692](https://i.loli.net/2021/03/11/J9FeTBDSq5ApUHN.png)\n\n#### iPhone Backup Extractor\n\n软件界面如下\n\n![image-20210311165146409](https://i.loli.net/2021/03/11/9GsCmSa8zNTQXUe.png)\n\n#### DB Browser for SQLite\n\n软件界面如下\n\n![image-20210311165311030](https://i.loli.net/2021/03/11/juOrDycqNXJ6FT9.png)\n\n### 使用iTunes备份数据\n\n打开iTunes，并使用数据线将你的苹果手机连接至电脑，点击左上角的手机图标，在备份这一栏选择备份到电脑->立即备份（不要加密）\n\n![image-20210311165625743](https://i.loli.net/2021/03/11/Ezd1woTSiOQnUly.png)\n\n时间可能会比较久，耐心等待即可\n\n### 使用iPhone Backup Extractor提取数据\n\n打开iPhone Backup Extractor，如果上一步没有问题，会在左边显示你刚刚备份好的文件\n\n![image-20210311165905509](https://i.loli.net/2021/03/11/ZxPlbRMNiWptDda.png)\n\n选择Expert mode->Applications->com.tencent.xin->Documents->自己的加密过的某一个用户->DB，在这个DB目录下面就是微信的聊天数据（message_1.sqlite一直到message_4.sqlite）和用户数据（WCDB_Contact.sqlite）。选中，然后点击`Extract selected`，免费版会等待10s，并且一次最多导出4个文件，如果你觉得免费版不够用，可以订阅，一年200多\n\n![image-20210312080438929](https://i.loli.net/2021/03/12/9IshDygu5ZRnvl8.png)\n\n导出至任何位置都可以\n\n### 使用DB Browser for SQLite打开数据库\n\n![image-20210312080615541](https://i.loli.net/2021/03/12/ALkwFXBem8dCDsH.png)\n\n先选择打开数据库，再选择浏览数据，即可成功访问数据库的数据","tags":["iOS","微信"],"categories":["记录","iOS"]},{"title":"GitHub搭建博客自定义域名","url":"/post/76507812.html","content":"\n\n\n### 为什么写这篇文章\n\n虽然已经有了自己的个人站点，但是为了让自己的文章更好地被搜索引擎抓取，需要让各类搜索引擎收录自己的站点，但是当我想让百度站长收录时，总是失败。后来上网查询发现GitHub禁止了百度爬虫，即github.io的站点无法被百度收录。因此，使用个性域名现在成为必须做的一件事。\n\n### 准备工作\n\n搭建好的GitHub博客、一个阿里云的域名（是不是阿里云都无所谓）。\n\n### 阿里云域名注册\n\n进入[阿里云](https://www.aliyun.com/)，登录后右上角点击搜索：域名，然后点击域名注册，输入自己想要的域名，根据财力选择适合自己的后缀，加入清单，右边点击`立即结算`，即可。\n\n![image-20210311161010629](https://i.loli.net/2021/03/11/jxgO4KMY5ARqVnr.png)\n\n![image-20210311161031111](https://i.loli.net/2021/03/11/smghdHGpPZ8tlvX.png)\n\n购买后，可以进入控制台查看自己的域名。以我为例：\n\n![image-20210311161215507](https://i.loli.net/2021/03/11/EFKHfWtNDxi2Qu3.png)\n\n这里首先要进行实名认证，需要你填写一个模板，很简单，我已经做好了实名认证。\n\n若你也做好了实名认证，点击右边的`解析`后，点击`添加记录`。\n\n![image-20210311161435086](https://i.loli.net/2021/03/11/Wn4gA9z6m5DdR27.png)\n\n这里需要我们填写一些信息，具体填写内容如下：\n\n![image-20210311161701239](https://i.loli.net/2021/03/11/JDSzYrOuEvP8ox2.png)\n\n记录类型：默认选择A\n\n主机记录：主机记录需要添加两个，分两次添加解析，分别为www和@，不分先后\n\n解析线路：选择默认\n\nTTL值：选择默认 10分钟\n\n记录值：打开电脑终端或命令行，输入命令：\n\n```shell\nping [个人站点原域名]\n例如我的：ping garfield.github.io\n```\n\n![image-20210311162050096](https://i.loli.net/2021/03/11/lC4ptyU7fNeciOR.png)\n\n即可得到我们需要的值，填入即可。\n\n记住，还要再添加一个主机记录为@的，其他填法不变。\n\n![image-20210311162246255](https://i.loli.net/2021/03/11/g7vxJZfXQGVq9ke.png)\n\n至此，阿里云的域名注册解析部分已经成功完成，接下来看GitHub这里，就简单了。\n\n### GitHub绑定域名\n\n来到自己的博客项目主页，添加新文件名为CNAME，然后在这个文件内填写自己刚注册的域名\n\n![image-20210311162530464](https://i.loli.net/2021/03/11/c6HWe1TRA2GOrnQ.png)\n\n保存提交，大功告成！\n\n### 注意\n\n域名映射需要一定时间，请等待10分钟左右，即可正常访问自己的个人站点。\n\n![image-20210311162653292](https://i.loli.net/2021/03/11/YADSXLhGnuQgOy8.png)\n\n","tags":["GitHub","域名"],"categories":["Git","记录"]},{"title":"JetBrains全家桶好用的IDE插件","url":"/post/5e63e1c2.html","content":"\n\n\n### 为什么写这篇文章\n\nJetBrains系列的IDE如PyCharm、Idea、PhpStorm等已经家喻户晓（在程序员界），强大的功能是他能成为中流砥柱的重要原因之一。但是，如此强大并不妨碍它形成更加强大的插件生态。接下来安利一些非常好用的插件。\n\n### 如何安装插件\n\n以PyCharm为例（其他都一样），File->Settins->Plugins，然后在商店搜索下载即可（部分插件可能需要其他操作，但是不难）\n\n### 开始安利\n\n#### Key Promoter X\n\n![image-20210310083711314](https://i.loli.net/2021/03/10/fEM7zrVtsWIDjAx.png)\n\n键盘操作如果熟悉的话，效率一定高于鼠标，但是，这么多的快捷键，我怎么能记得住呢？安装这款插件后，每当你进行一次操作，如果有对应的快捷键，这款插件会在右下角给出这个操作的快捷键，这样，你就会慢慢记住更多的快捷键，办公效率会不断提升。\n\n#### Kite\n\n代码智能提示，智能程度远超IDE自带的代码提示，因为这是基于深度学习实现的。可以看这个[安装教程](https://juejin.cn/post/6844904025045860360)。\n\n![image-20210310084229542](https://i.loli.net/2021/03/10/XdUNC5fspZVqSzE.png)\n\n#### Translation\n\n写代码的时候不知道怎么翻译成合适的英文？遇到奇怪的单词看不懂了？用这个，支持多种语言的翻译，直接在IDE中选中单词右键即可。\n\n![image-20210310084404682](https://i.loli.net/2021/03/10/1FYtWu8BaUjdJzQ.png)\n\n#### leetcode editor\n\n你以为我在写代码，其实我在摸鱼刷题（不是）。在IDE中直接刷leetcode的题。需要设置登录账号密码以及编程语言。\n\n![image-20210310084603825](https://i.loli.net/2021/03/10/VGAOKY6s2eWPBN8.png)\n\n### 未完待续... ...\n\n\n\n\n\n","tags":["记录"],"categories":["记录"]},{"title":"Linux发展史","url":"/post/fcf19b50.html","content":"\n\n\n### Linux发展史\n\n#### 1. Linux概述\n\nLinux是一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX和UNIX的多用户、多任务、支持多线程和多CPU的操作系统。它能运行主要的UNIX工具软件、应用程序和网络协议。它支持32位和64位硬件。Linux继承了Unix以网络为核心的设计思想，是一个性能稳定的都用户网络操作系统。\n\nLinux操作系统诞生于1991年10月5日。Linux存在着许多不同的Linux版本，但它们都使用了Linux内核。Linux可安装在各种计算机硬件设备中，比如手机、平板电脑、路由器、视频游戏控制台、台式计算机、大型机和超级计算机。\n\n严格来讲，Linux这个词本身只表示Linux内核，但实际上人们已经习惯了用Linux来形容整个基于Linux内核，并且使用GNU工程各种工具和数据库的操作系统。\n\n#### 2. Linux简史\n\nLinux操作系统的诞生、发展和成长过程始终依赖着五个重要支柱：UNIX操作系统、MINIX操作系统、GNU计划、POXIS标准和Internet网络。\n\n1981年IBM公司推出微型计算机IBM PC。\n\n1991年，GNU计划已经开发出了许多工具软件，最受期盼的GNU C编译器已经出现，GNU的操作系统核心HURD一直处于实验阶段，没有任何可用性，实质上也没能开发出完整的GNU操作系统，但是GNU奠定了Linux用户基础和开发环境。\n\n1991年初，林纳斯托瓦兹开始在一台386sx兼容微机上学习minix操作系统。1991年4月，林纳斯·托瓦兹开始酝酿并着手编制自己的操作系统。\n\n1991年的10月5日，林纳斯·托瓦兹在comp.os.minix新闻组上发布消息，正式向外宣布Linux内核的诞生(**Freeminix-like**kernel sources for 386-AT)。\n\n1993年，大约有100余名程序员参与了Linux内核代码编写/修改工作，其中核心组由5人组成，此时Linux 0.99的代码大约有十万行，用户大约有10万左右。\n\n1994年3月，Linux1.0发布，代码量17万行，当时是按照完全自由免费的协议发布，随后正式采用GPL协议。\n\n1995年1月，Bob Young创办了RedHat（小红帽），以GNU/Linux为核心，集成了400多个源代码开放的程序模块，搞出了一种冠以品牌的Linux，即RedHat Linux,称为Linux\"发行版\"，在市场上出售。这在经营模式上是一种创举。\n\n1996年6月，Linux 2.0内核发布，此内核有大约40万行代码，并可以支持多个处理器。此时的Linux 已经进入了实用阶段，全球大约有350万人使用。\n\n1998年2月，以Eric Raymond为首的一批年轻的\"老牛羚骨干分子\"终于认识到GNU/Linux体系的产业化道路的本质，并非是什么自由哲学，而是市场竞争的驱动，创办了\"Open Source Intiative\"（开放源代码促进会）\"复兴\"的大旗，在互联网世界里展开了一场历史性的Linux产业化运动。\n\n2001年1月，Linux 2.4发布，它进一步地提升了SMP系统的扩展性，同时它也集成了很多用于支持桌面系统的特性：USB，PC卡（PCMCIA）的支持，内置的即插即用，等等功能。\n\n2003年12月，Linux 2.6版内核发布，相对于2.4版内核2.6在对系统的支持都有很大的变化。\n\n2004年的第1月，SuSE嫁到了Novell，SCO继续顶着骂名四处强行“化缘”， Asianux， MandrakeSoft也在五年中首次宣布季度赢利。3月，SGI宣布成功实现了Linux操作系统支持256个Itanium 2处理器。\n\n#### 3. Linux主要特性\n\n* 基本思想\n\n  Linux的基本思想有两点：第一，一切都是文件；第二，每个软件都有确定的用途。其中第一条详细来讲就是系统中的所有都归结为一个文件，包括命令、硬件和软件设备、操作系统、进程等等对于操作系统内核而言，都被视为拥有各自特性或类型的文件。至于说Linux是基于Unix的，很大程度上也是因为这两者的基本思想十分相近。\n\n* 完全免费\n\n  Linux是一款免费的操作系统，用户可以通过网络或其他途径免费获得，并可以任意修改其源代码。这是其他操作系统所做不到的。正是由于这一点，来自全世界的无数程序员参与了Linux的修改、编写工作，程序员可以根据自己的兴趣和灵感对其进行改变，这让Linux吸收了无数程序员的精华，不断壮大。\n\n* 完全兼容POSIX1.0标准\n\n  这使得可以在Linux下通过相应的模拟器运行常见的DOS、Windows的程序。这为用户从Windows转到Linux奠定了基础。许多用户在考虑使用Linux时，就想到以前在Windows下常见的程序是否能正常运行，这一点就消除了他们的疑虑。\n\n* 多用户、多任务\n\n  Linux支持多用户，各个用户对于自己的文件设备有自己特殊的权利，保证了各用户之间互不影响。多任务则是现在电脑最主要的一个特点，Linux可以使多个程序同时并独立地运行。\n\n* 良好的界面\n\n  Linux同时具有字符界面和图形界面。在字符界面用户可以通过键盘输入相应的指令来进行操作。它同时也提供了类似Windows图形界面的X-Window系统，用户可以使用鼠标对其进行操作。在X-Window环境中就和在Windows中相似，可以说是一个Linux版的Windows。\n\n* 支持多种平台\n\n  Linux可以运行在多种硬件平台上，如具有x86、680x0、SPARC、Alpha等处理器的平台。此外Linux还是一种嵌入式操作系统，可以运行在掌上电脑、机顶盒、或游戏机上。2001年1月份发布的Linux2.4版内核已经能够完全支持Intel 64位芯片架构。同时Linux也支持多处理器技术。多个处理器同时工作，使系统性能大大提高。\n\n#### 4. Linux应用领域\n\n* 服务器领域\n\n  Linux系统最显著的优点便是稳定，这是企业服务器对系统的首要要求。此外，Linux系统是自由软件，还具备体积小、价位低、可定制等优点，可用于搭建Web、数据库、邮件、DNS、FTP等各种服务器。总的来说，使用Linux搭建的服务器不仅功能齐全、稳定性高、运营成本小，还无需考虑版权问题，因此Linux系统逐渐渗入到了电信、政府、教育、银行、金融等各个行业，在服务器领域的应用也越来越广泛。\n\n* 嵌入式应用领域\n\n  由于具有成本低廉、可设定性强等特点，Linux在嵌入式应用领域的使用也极其广泛，从路由器、交换机、防火墙等因特网设备，到冰箱、空调等各种家用电器，以及自动贩卖机等专用的控制系统都有Linux系统的身影。此外，Linux也是目前移动设备上常用的操作系统之一。\n\n* 个人桌面领域\n\n  虽然Linux系统还是一个侧重于命令行的系统，但近些年Linux系统也在向桌面系统领域靠拢，如今的Linux系统大多都搭建了图形界面，大大降低了普通用户的操作难度，如Ubuntu系统已经拥有了良好的桌面，完全可以满足日常办公需求。\n\n#### 5. Linux发行版本介绍\n\n* 5.1 Ubuntu\n\n  Ubuntu是Debian的一款衍生版，也是当今最受欢迎的免费操作系统。Ubuntu侧重于它在这个市场的应用，在服务器、云计算、甚至一些运行Ubuntu Linux的移动设备上很常见。作为Debian Gnu Linux的一款衍生版，Ubuntu的进程、外观和感觉大多数仍然与Debian一样。它使用apt软件管理工具来安装和更新软件。它也是如今市面上用起来最容易的发行版之一。Ubuntu使用基于apt的程序包管理器。\n\n  Ubuntu是新手用户肯定爱不释手的一款操作系统。\n\n* 5.2 RedHat\n\n  Redhat（小红帽），应该称为Redhat系列，包括RHEL(Redhat Enterprise Linux，也就是所谓的Redhat Advance Server，收费版本)、Fedora Core(由原来的Redhat桌面版本发展而来，免费版本)、CentOS(RHEL的社区克隆版本，免费)。Redhat应该说是在国内使用人群最多 的Linux版本，甚至有人将Redhat等同于Linux，而有些老鸟更是只用这一个版本的Linux。所以这个版本的特点就是使用人群数量大，资料非常多，言下之意就是如果你有什么不明白的地方，很容易找到人来问，而且网上的一般Linux教程都是以Redhat为例来讲解的。Redhat系列的包管 理方式采用的是基于RPM包的YUM包管理方式，包分发方式是编译好的二进制文件。稳定性方面RHEL和CentOS的稳定性非常好，适合于服务器使用， 但是Fedora Core的稳定性较差，最好只用于桌面应用。\n\n* 5.3 Debian\n\n  Debian运行起来极其稳定，这使得它非常适合用于服务器。Debian平时维护三套正式的软件库和一套非免费软件库，这给另外几款发行版(比如Ubuntu和Kali等)带来了灵感。Debian这款操作系统派生出了多个Linux发行版。它有37500多个软件包，这方面唯一胜过Debian的其他发行版只有Gentoo。Debian使用apt或aptitude来安装和更新软件。\n\n  Debian这款操作系统无疑并不适合新手用户，而是适合系统管理员和高级用户。Debian支持如今的大多数架构(处理器)。\n\n* 5.4 Gentoo\n\n  与Debian一样，Gentoo这款操作系统也包含数量众多的软件包。Gentoo并非以预编译的形式出现，而是每次需要针对每个系统进行编译。连Gentoo社区都觉得Gentoo安装和使用起来很困难；不过它被认为是最佳学习对象，可以进而了解Linux操作系统的内部运作原理。提到Gentoo总有人这么说：”如果你要学用Linux发行版，那就学用该发行版吧；如果你学会了Gentoo，也就学会了Linux。“Gentoo使用portage来安装和更新软件。\n\n  Gentoo这款操作系统适合对Linux已经完全驾轻就熟的那些用户。\n\n* 5.5 CentOS\n\n  CentOS是一款企业级Linux发行版，它使用红帽企业级Linux中的免费源代码重新构建而成。这款重构版完全去掉了注册商标以及Binary程序包方面一个非常细微的变化。有些人不想支付一大笔钱，又能领略红帽企业级Linux；对他们来说，CentOS值得一试。此外，CentOS的外观和行为似乎与母发行版红帽企业级Linux如出一辙。 CentOS使用YUM来管理软件包。\n\n  非常稳定的程序包；要是想在桌面端测试一下服务器的运作原理，都应该试试这款操作系统。\n\n* 5.6 Fedora\n\n  小巧的Fedora适合那些人：想尝试最先进的技术，等不及程序的稳定版出来。其实，Fedora就是红帽公司的一个测试平台；产品在成为企业级发行版之前，在该平台上进行开发和测试。Fedora是一款非常好的发行版，有庞大的用户论坛，软件库中还有为数不少的软件包。Fedora同样使用YUM来管理软件包。\n\n* 5.7 Kali Linux\n\n  Kali Linux是Debian的一款衍生版。Kali旨在用于渗透测试。Kali的前身是Backtrack。用于Debian的所有Binary软件包都可以安装到Kali Linux上，而Kali的魅力或威力就来自于此。此外，支持Debian的用户论坛为Kali加分不少。Kali随带许多的渗透测试工具，无论是Wifi、数据库还是其他任何工具，都设计成立马可以使用。Kali使用APT来管理软件包。\n\n  毫无疑问，Kali Linux是一款渗透测试工具，或者是文明黑客青睐的操作系统。\n\n* 5.8 Arch Linux\n\n  Arch是一款采用滚动发行方式的操作系统：只要安装一次就够了；每当发行了某个新版本，就可以升级发行版，不需要重新安装。Pacman是Arch Linux的软件包管理器。Arch Linux既支持X86处理器架构，又支持X86_64架构，安装程序可以从光盘或U盘来运行。Arch旨在从开发者的角度而不是从用户的角度做到力求简单。Arch配置和安装起来超容易。它真是一款面向高手的发行版，让你可以了解Linux系统的每一个细枝末节。\n\n* 5.9 OpenSuse\n\n  OpenSuse这款Linux发行版是免费的，并不供商业用途使用，仍然供个人使用。OpenSuse的真正竞争对手是红帽企业级Linux。它使用Yast来管理软件包。有了Yast，使用和管理服务器应用程序就非常容易。此外，Yast安装向导程序可以配置电子邮件服务器、LDAP服务器、文件服务器或Web服务器，没有任何不必要的麻烦。它随带snapper快照管理工具，因而可以恢复或使用旧版的文件、更新和配置。由于让滚动发行版本成为可能的Tumbleweed，可将已安装的操作系统更新到最新版本，不需要任何的新发行版。\n\n  SUSE在管理员当中的名气更大，因为它有Yast以及让系统管理员能够自动管理任务的其他此类应用程序，同样水准的其他发行版没有这项功能。\n\n","tags":["知识"],"categories":["Linux"]},{"title":"Install MySQL on CentOS","url":"/post/af6628ae.html","content":"\n### CentOS7 MySQL数据库安装和配置\n\n#### 一、系统环境\n\n`yum update`升级以后的系统版本为：\n\n```shell\n[root@localhost garfield]# cat /etc.redhat-release\nCentOS Linux release 7.8.2003(core)\n```\n\n#### 二、MySQL安装\n\n依次输入下列命令进行安装。\n\n```shell\n# yum install mysql\n# yum install mysql-devel\n# yum install mysql-server\n```\n\n安装mysql和mysql-devel都成功，但是安装mysql-server失败，如下：\n\n```shell\n[root@localhost garfield]# yum install mysql-server\nLoaded plugins: fastestmirror\nLoading mirror speeds from cached hostfile\n * base: mirrors.sina.cn\n * extras: mirrors.sina.cn\n * updates: mirrors.sina.cn\nNo package mysql-server available.\nError: Nothing to do\n```\n\n原因是CentOS7版本将MySQL数据库软件从默认的程序列表中移除，用mariadb代替了。下面给出解决方法：\n\n##### 官网下载安装mysql-server\n\n依次输入下列命令：\n\n```shell\n# wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\n# rpm -ivh mysql-community-release-el7-5.noarch.rpm\n# yum install mysql-community-server\n```\n\n安装成功后重启MySQL服务。\n\n```shell\n# service mysqld restart\n```\n\n初次安装MySQL，root账户没有密码。\n\n```shell\n[root@localhost garfield]# mysql -u root \nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 3\nServer version: 5.6.26 MySQL Community Server (GPL)\n\nCopyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql> show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| performance_schema |\n| test               |\n+--------------------+\n4 rows in set (0.01 sec)\n\nmysql>\n```\n\n设置密码。\n\n```mysql\nmysql> set password for 'root'@'localhost' =password('password');\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n安装完以后，mariadb自动被替换，将不再生效，使用下列的命令将其移除：\n\n```shell\n[root@localhost garfield]# rpm -qa |gerp mariadb\n```\n\n#### 三、配置MySQL\n\n##### 1. 编码\n\nMySQL配置文件为/etc/my.cnf\n\n最后加上编码配置。\n\n```shell\n[mysql]\ndefault-character-set =utf8\n```\n\n##### 2. 远程连接设置\n\n把在所有数据库的所有表的所有权限赋值给位于所有IP地址的root用户。\n\n```mysql\nmysql> grant all privileges on *.* to root@'%'identified by 'password';\n```\n\n如果是新用户而不是root，则要先新建用户。\n\n```mysql\nmysql>create user 'username'@'%' identified by 'password';\n```\n\n此时就可以进行远程连接了。\n\n","tags":["知识"],"categories":["Linux","MySQL"]},{"title":"有用命令","url":"/post/a92f9037.html","content":"\n记录一些有用的命令\n\n<!-- more -->\n\n#### 生成密钥\n\n```shell\n1. 在桌面打开Git Bash Here\n2. git config --global user.name \"yourname\"\n3. git config --global user.email \"youremail\"\n4. ssh-keygen -t rsa -C \"youremail\"\n5. 复制id_rsa.pub内容至公钥\n```\n\n#### 查看用户名和邮箱地址\n\n```shell\ngit config user.name\ngit config user.email\n```\n\n#### Windows10 开机自启动软件的目录\n\n`C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp`\n\n#### Windows上iTunes备份的位置\n\n`C:\\Users\\用户\\AppData\\Roaming\\Apple Computer\\MobileSync\\Backup`\n\n#### Typora中文状态下输入英文符号\n\n`ctrl + .`即可改回中文输入状态输出中文符号","tags":["知识"],"categories":["知识"]},{"title":"Hello World","url":"/post/4a17b156.html","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n"}]