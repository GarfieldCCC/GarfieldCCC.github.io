[{"title":"Java静态方法注入调用Service层","url":"/post/4c6798e8.html","content":"\n#### 引入相应的Service层\n\n![注入Service层](https://s2.loli.net/2022/03/23/ktGdHFz4nTiM1Dj.png)\n\n#### 调用\n\n![调用](https://s2.loli.net/2022/03/23/FmU821y4HK5iC3s.png)\n","tags":["Jmeter"],"categories":["记录","Jmeter"]},{"title":"解析Redis的rdb文件","url":"/post/7413c6ba.html","content":"\n### 何为Redis\n\n`REmote DIctionary Server(Redis)` 是一个由 Salvatore Sanfilippo 写的 `key-value` 存储系统，是跨平台的非关系型**数据库**。`Redis` 通常被称为数据结构服务器，因为值（value）可以是字符串(String)、哈希(Hash)、列表(list)、集合(sets)和有序集合(sorted sets)等类型。\n\n### 关于dump.rdb\n\n`rdb`文件是`redis`实现持久化方式的一种，即通过`save`或`bgsave`操作，执行数据备份，生成的`.rdb`后缀的数据文件。\n\n#### 连接`Redis`\n\n带密码的客户端连接方法：\n\n进入 `Redis` 目录下，输入命令连接数据库：`redis-cli.exe -h remote_host -p 6379`，然后使用密码进行授权：`auth password`，如下界面为成功连接 `Redis` 的界面：\n\n![连接成功](https://s2.loli.net/2022/03/17/671dDWlAEeUi4zx.png)\n\n##### 生成备份文件\n\n此时，执行`save`命令生成备份文件`dump.rdb`\n\n那么，我们有什么手段来访问`dump.rdb`文件呢\n\n#### 访问`dump.rdb`\n\n##### Python方式\n\n一、安装工具\n\n```shell\npip install rdbtools python-lzf\n```\n\n二、生成json可阅读文件\n\n```shell\nrdb --command json dump.rdb > dump.json\n```\n\n生成的`dump.json`便是可以阅读的内容\n\n##### AnotherRedisDesktopManager\n\n这是一个访问 `Redis` 的客户端工具，下载地址如下：https://github.com/qishibo/AnotherRedisDesktopManager/releases\n\n![界面](https://s2.loli.net/2022/03/17/bRpNWzcBVoPTElk.png)\n","tags":["Redis"],"categories":["记录","Redis"]},{"title":"Cmder-美化过的cmd工具","url":"/post/a7f5467c.html","content":"\n### 背景\n\n`cmd`是Windows自带的一款命令行工具，但是由于其丑陋（我认为）的外观，激发了广大程序员优化它的动力，其中，我推荐一款叫[`Cmder`](https://cmder.net/)的优秀第三方工具。\n\n![截图](https://s2.loli.net/2022/03/16/bUX1weLEcHV9q3l.png)\n\n### 特点\n\n作为一款第三方`cmd`工具，它自然能解决原生`cmd`的痛点，其中包括：执行Linux命令、美化界面、即插即用等特点。\n\n### 在Windows系统下的安装配置\n\n#### 下载\n\n可以进入[官网](https://cmder.net/)，下载完整版压缩包\n\n![下载](https://s2.loli.net/2022/03/16/bJa6CHIZhx1RXjP.png)\n\n#### 配置\n\n##### 环境变量\n\n在Windows的系统环境变量中，添加`Cmder`的地址：\n\n![环境变量](https://s2.loli.net/2022/03/16/5Da3oQjnVcTmAkN.png)\n\n这么做，我们可以通过`win` + `r`快捷键输入`cmder`来唤醒`Cmder`窗口\n\n##### 右键进入`Cmder`\n\n我们使用`cmd`工具进入`Cmder`目录下，输入`cmder.exe /REGISTER ALL`，这样我们就可以右键使用`Cmder here`啦\n\n![右键](https://s2.loli.net/2022/03/16/srQyF4iPd8wa79k.png)\n\n##### 解决中文乱码\n\n进入`Cmder`的设置，在这里添加`set LANG=zh_CN.UTF-8`\n\n![解决中文乱码](https://s2.loli.net/2022/03/16/fSZ49PUbNRBipAz.png)\n\n#### 启动热键报错\n\n做出如下配置：\n\n![热键报错](https://s2.loli.net/2022/03/16/IhkwJgSp52YdQVm.png)\n","tags":["Windows","Cmder"],"categories":["记录","Windows"]},{"title":"橙单-注意事项","url":"/post/3c75b1ff.html","content":"\n### 注意事项\n\n#### 导入`SQL`时保留流程图\n\n**记录时间：2022-03-08**\n\n在生成的`flow-script.sql`中，删除`zz_flow_entry`表的操作即可，即\n\n![zz_flow_entry](https://s2.loli.net/2022/03/08/46M15GC9lwX2eZJ.png)\n\n并且，需要将`zz_flow_entry`表中的`status`字段改为0，否则流程将无法发布\n\n#### 消息提醒-流程标题\n\n**记录时间：2022-03-08**\n\n可以看到，消息提醒可以具体看到流程的标题（`title`字段），这是因为在`zz_flow_message`表中手动添加了`title`字段，主要需要在每一次导入`flow-script.sql`之后手动添加\n\n![title](https://s2.loli.net/2022/03/08/YaLzFNW6XZy5eHn.png)\n","tags":["橙单"],"categories":["记录","橙单"]},{"title":"Nginx 部署多个前端项目","url":"/post/bd1cee57.html","content":"\n### 背景\n\n同一台服务器，需要部署多个`Vue`前端项目，同时共用同一个后端项目。因此需要进行`Nginx`配置。\n\n### 开始配置\n\n#### 基于端口实现\n\n进入`Nginx`的配置文件`nginx-1.20.1/conf/nginx.conf`，设置配置如下：\n\n```nginx\nserver {\n    # 此处设置端口号\n    listen       82;\n    server_name  localhost;\n\n    location / {\n      \t# 此处设置前端文件的存放路径\n        root   D:/dis/dist;\n        index  index.html index.htm;\n    }\n\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   html;\n    }\n}\n\n# 设置第二个端口\nserver {\n\t# 此处设置端口号\n    listen       83;\n    server_name  localhost;\n\n    #charset koi8-r;\n    #access_log  logs/host.access.log  main;\n\n    location / {\n        # 此处设置前端文件的存放路径\n        root   D:/dis/dist_qianduan;\n        index  index.html index.htm;\n    }\n\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   html;\n    }\n}\n```\n\n然后运行`nginx -s reload`重启服务或者`nginx -s quit`、`start nginx`来启动服务，效果如下图所示：\n\n![图一](https://s2.loli.net/2022/02/15/MBUPmdbau76WF8h.png)\n\n![图二](https://s2.loli.net/2022/02/15/KsWnLNg9tirfDVP.png)\n","tags":["Windows","Nginx"],"categories":["记录","Windows","Nginx"]},{"title":"Flowable 数据库表详解","url":"/post/345f24d7.html","content":"\n**此文转载自：https://my.oschina.net/thinkgem/blog/4765491**\n\n### `Flowable`数据库表命名规则\n\n**ACT_RE_\\* :**   `RE`表示repository（存储）。`RepositoryService`接口操作的表。带此前缀的表包含的是静态信息，如，流程定义，流程的资源（图片，规则等）。\n\n**ACT_RU_\\* :**  `RU`表示runtime。这是运行时的表存储着流程变量，用户任务，变量，职责（job）等运行时的数据。`Flowable`只存储实例执行期间的运行时数据，当流程实例结束时，将删除这些记录。这就保证了这些运行时的表小且快。\n\n**ACT_ID_\\* :**   `ID`表示identity(组织机构)。这些表包含标识的信息，如用户，用户组，等等。\n\n**ACT_HI_\\* :**   `HI`表示history。就是这些表包含着历史的相关数据，如结束的流程实例，变量，任务，等等。\n\n**ACT_GE_\\* :**   普通数据，各种情况都使用的数据。\n\n### 数据库表结构(34张表，不同版本数量可能会有出入)\n\n#### 一般数据(2)\n\n`ACT_GE_BYTEARRAY`  通用的流程定义和流程资源\n\n`ACT_GE_PROPERTY`  系统相关属性\n\n#### 流程历史数据(8)\n\n`ACT_HI_ACTINST`  历史的流程实例\n\n`ACT_HI_ATTACHMENT`  历史的流程附件\n\n`ACT_HI_COMMENT`  历史的说明性信息\n\n`ACT_HI_DETAIL`  历史的流程运行中的细节信息\n\n`ACT_HI_IDENTITYLINK`  历史的流程运行过程中用户关系\n\n`ACT_HI_PROCINST`  历史的流程实例\n\n`ACT_HI_TASKINST`  历史的任务实例\n\n`ACT_HI_VARINST`  历史的流程运行中的变量信息\n\n#### 用户及用户组表(9)\n\n`ACT_ID_BYTEARRAY`  二进制数据表\n\n`ACT_ID_GROUP`  用户组信息表\n\n`ACT_ID_INFO`  用户信息详情表\n\n`ACT_ID_MEMBERSHIP`  人与组关系表\n\n`ACT_ID_PRIV`  权限表\n\n`ACT_ID_PRIV_MAPPING`  用户或组权限关系表\n\n`ACT_ID_PROPERTY`  属性表\n\n`ACT_ID_TOKEN`  系统登录日志表\n\n`ACT_ID_USER`  用户表\n\n#### 流程定义表(3)\n\n`ACT_RE_DEPLOYMENT`  部署单元信息\n\n`ACT_RE_MODEL`  模型信息\n\n`ACT_RE_PROCDEF`  已部署的流程定义\n\n#### 运行实例表(10)\n\n`ACT_RU_DEADLETTER_JOB`  正在运行的任务表\n\n`ACT_RU_EVENT_SUBSCR`  运行时事件\n\n`ACT_RU_EXECUTION`  运行时流程执行实例\n\n`ACT_RU_HISTORY_JOB`  历史作业表\n\n`ACT_RU_IDENTITYLINK`  运行时用户关系信息\n\n`ACT_RU_JOB`  运行时作业表\n\n`ACT_RU_SUSPENDED_JOB`  暂停作业表\n\n`ACT_RU_TASK`  运行时任务表\n\n`ACT_RU_TIMER_JOB`  定时作业表\n\n`ACT_RU_VARIABLE`  运行时变量表\n\n#### 其他表(2)\n\n`ACT_EVT_LOG`  事件日志表\n\n`ACT_PROCDEF_INFO`  流程定义信息\n\n### 数据表详细说明\n\n#### `ACT_GE_BYTEARRAY `资源表\n\n| 字段           | 类型           | 主键 | 说明                           | 备注                                                         |\n| -------------- | -------------- | ---- | ------------------------------ | ------------------------------------------------------------ |\n| ID_            | NVARCHAR2(64)  | Y    | 主键                           |                                                              |\n| REV_           | INTEGER        | N    | 数据版本                       | Activiti有可能会被频繁修改数据库表，加入字段，用来表示该数据被操作的次数 |\n| NAME_          | NVARCHAR2(255) | N    | 资源名称                       |                                                              |\n| DEPLOYMENT_ID_ | NVARCHAR2(64)  | N    | 部署序号                       | 部署序号,一次部署可以部署多个资源,该字段与部署表ACT_RE_DEPLOYMENT的主键关联 |\n| BYTES_         | BLOB           | N    | 资源内容                       |                                                              |\n| GENERATED_     | NUMBER(1)      | N    | 是否是右activiti自动产生的资源 | 0表示false，1表示true                                        |\n\n#### `ACT_GE_PROPERTY` 属性表\n\n| 字段   | 类型           | 主键 | 说明       | 备注 |\n| ------ | -------------- | ---- | ---------- | ---- |\n| NAME_  | NVARCHAR2(64)  | Y    | 属性名称   |      |\n| VALUE_ | NVARCHAR2(300) | N    | 属性值     |      |\n| REV_   | INTEGER        | N    | 数据版本号 |      |\n\n#### `ACT_RE_DEPLOYMENT` 部署数据表\n\n| 字段            | 类型           | 主键 | 说明       | 备注                        |\n| --------------- | -------------- | ---- | ---------- | --------------------------- |\n| ID_             | NVARCHAR2(64)  | Y    | 部署序号   |                             |\n| NAME_           | NVARCHAR2(255) | N    | 部署名称   |                             |\n| CATEGORY_       | NVARCHAR2(255) | N    | 类别       | 流程定义的Namespace就是类别 |\n| KEY_            | NVARCHAR2(255) | N    | 流程定义ID |                             |\n| TENANT_ID_      | NVARCHAR2(255) | N    |            |                             |\n| DEPLOY_TIME_    | TIMESTAMP(6)   | N    | 部署时间   |                             |\n| ENGINE_VERSION_ | NVARCHAR2(255) | N    | 引擎版本   |                             |\n\n#### `ACT_RE_PROCDEF` 流程定义表\n\n| 字段                    | 类型            | 主键 | 说明                         | 备注                                |\n| ----------------------- | --------------- | ---- | ---------------------------- | ----------------------------------- |\n| ID_                     | NVARCHAR2(64)   | Y    | 主键                         |                                     |\n| REV_                    | INTEGER         | N    | 数据版本号                   |                                     |\n| CATEGORY_               | NVARCHAR2(255)  | N    | 流程定义分类                 | 读取xml文件中程的targetNamespace值  |\n| NAME_                   | NVARCHAR2(255)  | N    | 流程定义的名称               | 读取流程文件中process元素的name属性 |\n| KEY_                    | NVARCHAR2(255)  | N    | 流程定义key                  | 读取流程文件中process元素的id属性   |\n| VERSION_                | INTEGER         | N    | 版本                         |                                     |\n| DEPLOYMENT_ID_          | NVARCHAR2(64)   | N    | 部署ID                       | 流程定义对应的部署数据ID            |\n| RESOURCE_NAME_          | NVARCHAR2(2000) | N    | bpmn文件名称                 | 一般为流程文件的相对路径            |\n| DGRM_RESOURCE_NAME_     | VARCHAR2(4000)  | N    | 流程定义对应的流程图资源名称 |                                     |\n| DESCRIPTION_            | NVARCHAR2(2000) | N    | 说明                         |                                     |\n| HAS_START_FORM_KEY_     | NUMBER(1)       | N    | 是否存在开始节点formKey      | start节点是否存在formKey 0否 1是    |\n| HAS_GRAPHICAL_NOTATION_ | NUMBER(1)       | N    |                              |                                     |\n| SUSPENSION_STATE_       | INTEGER         | N    | 流程定义状态                 | 1激活、2中止                        |\n| TENANT_ID_              | NVARCHAR2(255)  | N    |                              |                                     |\n| ENGINE_VERSION_         | NVARCHAR2(255)  | N    |                              | 引擎版本                            |\n\n#### `ACT_ID_USER` 用户表\n\n| 字段        | 类型           | 主键 | 说明     | 备注 |\n| ----------- | -------------- | ---- | -------- | ---- |\n| ID_         | NVARCHAR2(64)  | Y    | 主键     |      |\n| REV_        | INTEGER        | N    | 数据版本 |      |\n| FIRST_      | NVARCHAR2(255) | N    | 人名     |      |\n| LAST_       | NVARCHAR2(255) | N    | 姓氏     |      |\n| EMAIL_      | NVARCHAR2(255) | N    | 邮件     |      |\n| PWD_        | NVARCHAR2(255) | N    | 用户密码 |      |\n| PICTURE_ID_ | NVARCHAR2(64)  | N    | 图片ID   |      |\n\n#### `ACT_ID_INFO` 用户信息表\n\n| 字段       | 类型           | 主键 | 说明           | 备注                                                         |\n| ---------- | -------------- | ---- | -------------- | ------------------------------------------------------------ |\n| ID_        | NVARCHAR2(64)  | Y    | 主键           |                                                              |\n| REV_       | INTEGER        | N    | 数据版本       |                                                              |\n| USER_ID_   | NVARCHAR2(64)  | N    | 对应用户表主键 |                                                              |\n| TYPE_      | NVARCHAR2(64)  | N    | 信息类型       | 当前可以设置用户帐号(account)、用户信息(userinfo)和NULL三种值 |\n| KEY_       | NVARCHAR2(255) | N    | 数据的键       | 可以根据该键查找用户信息的值                                 |\n| VALUE_     | NVARCHAR2(255) | N    | 数据的值       |                                                              |\n| PASSWORD_  | BLOB           | N    | 用户密码       |                                                              |\n| PARENT_ID_ | NVARCHAR2(255) | N    | 父信息ID       |                                                              |\n\n#### `ACT_ID_GROUP` 用户组表\n\n| 字段  | 类型           | 主键 | 说明       | 备注 |\n| ----- | -------------- | ---- | ---------- | ---- |\n| ID_   | NVARCHAR2(64)  | Y    | 主键       |      |\n| REV_  | INTEGER        | N    | 数据版本   |      |\n| NAME_ | NVARCHAR2(255) | N    | 用户组名称 |      |\n| TYPE_ | NVARCHAR2(255) | N    | 用户组类型 |      |\n\n#### `ACT_ID_MEMBERSHIP` 关系表\n\n| 字段      | 类型          | 主键 | 说明     | 备注 |\n| --------- | ------------- | ---- | -------- | ---- |\n| USER_ID_  | NVARCHAR2(64) | Y    | 用户ID   |      |\n| GROUP_ID_ | NVARCHAR2(64) | Y    | 用户组ID |      |\n\n#### `ACT_RU_EXECUTION` 流程实例(执行流)表\n\n| 字段                  | 类型           | 主键 | 说明               | 备注 |\n| --------------------- | -------------- | ---- | ------------------ | ---- |\n| ID_                   | NVARCHAR2(64)  | Y    | 主键               |      |\n| REV_                  | INTEGER        | N    | 数据版本           |      |\n| PROC_INST_ID_         | NVARCHAR2(64)  | N    | 流程实例ID         |      |\n| BUSINESS_KEY_         | NVARCHAR2(255) | N    | 业务主键ID         |      |\n| PARENT_ID_            | NVARCHAR2(64)  | N    | 父执行流的ID       |      |\n| PROC_DEF_ID_          | NVARCHAR2(64)  | N    | 流程定义的数据ID   |      |\n| SUPER_EXEC_           | NVARCHAR2(64)  | N    |                    |      |\n| ROOT_PROC_INST_ID_    | NVARCHAR2(64)  | N    |                    |      |\n| ACT_ID_               | NVARCHAR2(255) | N    | 节点实例ID         |      |\n| IS_ACTIVE_            | NUMBER(1)      | N    | 是否存活           |      |\n| IS_CONCURRENT_        | NUMBER(1)      | N    | 执行流是否正在并行 |      |\n| IS_SCOPE_             | NUMBER(1)      | N    |                    |      |\n| IS_EVENT_SCOPE_       | NUMBER(1)      | N    |                    |      |\n| IS_MI_ROOT_           | NUMBER(1)      | N    |                    |      |\n| SUSPENSION_STATE_     | INTEGER        | N    | 流程终端状态       |      |\n| CACHED_ENT_STATE_     | INTEGER        | N    |                    |      |\n| TENANT_ID_            | NVARCHAR2(255) | N    |                    |      |\n| NAME_                 | NVARCHAR2(255) | N    |                    |      |\n| START_TIME_           | TIMESTAMP(6)   | N    | 开始时间           |      |\n| START_USER_ID_        | NVARCHAR2(255) | N    |                    |      |\n| LOCK_TIME_            | TIMESTAMP(6)   | N    |                    |      |\n| IS_COUNT_ENABLED_     | NUMBER(1)      | N    |                    |      |\n| EVT_SUBSCR_COUNT_     | INTEGER        | N    |                    |      |\n| TASK_COUNT_           | INTEGER        | N    |                    |      |\n| JOB_COUNT_            | INTEGER        | N    |                    |      |\n| TIMER_JOB_COUNT_      | INTEGER        | N    |                    |      |\n| SUSP_JOB_COUNT_       | INTEGER        | N    |                    |      |\n| DEADLETTER_JOB_COUNT_ | INTEGER        | N    |                    |      |\n| VAR_COUNT_            | INTEGER        | N    |                    |      |\n| ID_LINK_COUNT_        | INTEGER        | N    |                    |      |\n\n#### `ACT_RU_TASK` 流程任务表\n\n| 字段              | 类型            | 主键 | 说明                 | 备注                |\n| ----------------- | --------------- | ---- | -------------------- | ------------------- |\n| ID_               | NVARCHAR2(64)   | Y    | 主键                 |                     |\n| REV_              | INTEGER         | N    | 数据版本             |                     |\n| EXECUTION_ID_     | NVARCHAR2(64)   | N    | 任务所在的执行流ID   |                     |\n| PROC_INST_ID_     | NVARCHAR2(64)   | N    | 流程实例ID           |                     |\n| PROC_DEF_ID_      | NVARCHAR2(64)   | N    | 流程定义数据ID       |                     |\n| NAME_             | NVARCHAR2(255)  | N    | 任务名称             |                     |\n| PARENT_TASK_ID_   | NVARCHAR2(64)   | N    | 父任务ID             |                     |\n| DESCRIPTION_      | NVARCHAR2(2000) | N    | 说明                 |                     |\n| TASK_DEF_KEY_     | NVARCHAR2(255)  | N    | 任务定义的ID值       |                     |\n| OWNER_            | NVARCHAR2(255)  | N    | 任务拥有人           |                     |\n| ASSIGNEE_         | NVARCHAR2(255)  | N    | 被指派执行该任务的人 |                     |\n| DELEGATION_       | NVARCHAR2(64)   | N    |                      |                     |\n| PRIORITY_         | INTEGER         | N    |                      |                     |\n| CREATE_TIME_      | TIMESTAMP(6)    | N    | 创建时间             |                     |\n| DUE_DATE_         | TIMESTAMP(6)    | N    | 耗时                 |                     |\n| CATEGORY_         | NVARCHAR2(255)  | N    |                      |                     |\n| SUSPENSION_STATE_ | INTEGER         | N    | 是否挂起             | 1代表激活 2代表挂起 |\n| TENANT_ID_        | NVARCHAR2(255)  | N    |                      |                     |\n| FORM_KEY_         | NVARCHAR2(255)  | N    |                      |                     |\n| CLAIM_TIME_       | TIMESTAMP(6)    | N    |                      |                     |\n\n#### `ACT_RU_VARIABLE` 流程参数表\n\n| 字段          | 类型            | 主键 | 说明                           | 备注                                 |\n| ------------- | --------------- | ---- | ------------------------------ | ------------------------------------ |\n| ID_           | NVARCHAR2(64)   | Y    | 主键                           |                                      |\n| REV_          | INTEGER         | N    | 数据版本                       |                                      |\n| TYPE_         | NVARCHAR2(255)  | N    | 参数类型                       | 可以是基本的类型，也可以用户自行扩展 |\n| NAME_         | NVARCHAR2(255)  | N    | 参数名称                       |                                      |\n| EXECUTION_ID_ | NVARCHAR2(64)   | N    | 参数执行ID                     |                                      |\n| PROC_INST_ID_ | NVARCHAR2(64)   | N    | 流程实例ID                     |                                      |\n| TASK_ID_      | NVARCHAR2(64)   | N    | 任务ID                         |                                      |\n| BYTEARRAY_ID_ | NVARCHAR2(64)   | N    | 资源ID                         |                                      |\n| DOUBLE_       | NUMBER(*,10)    | N    | 参数为double，则保存在该字段中 |                                      |\n| LONG_         | NUMBER(19)      | N    | 参数为long，则保存在该字段中   |                                      |\n| TEXT_         | NVARCHAR2(2000) | N    | 用户保存文本类型的参数值       |                                      |\n| TEXT2_        | NVARCHAR2(2000) | N    | 用户保存文本类型的参数值       |                                      |\n\n#### `ACT_RU_IDENTITYLINK` 流程身份关系表\n\n| 字段          | 类型           | 主键 | 说明         | 备注                                                 |\n| ------------- | -------------- | ---- | ------------ | ---------------------------------------------------- |\n| ID_           | NVARCHAR2(64)  | Y    | 主键         |                                                      |\n| REV_          | INTEGER        | N    | 数据版本     |                                                      |\n| GROUP_ID_     | NVARCHAR2(255) | N    | 用户组ID     |                                                      |\n| TYPE_         | NVARCHAR2(255) | N    | 关系数据类型 | assignee支配人(组)、candidate候选人(组)、owner拥有人 |\n| USER_ID_      | NVARCHAR2(255) | N    | 用户ID       |                                                      |\n| TASK_ID_      | NVARCHAR2(64)  | N    | 任务ID       |                                                      |\n| PROC_INST_ID_ | NVARCHAR2(64)  | N    | 流程定义ID   |                                                      |\n| PROC_DEF_ID_  | NVARCHAR2(64)  | N    | 属性ID       |                                                      |\n\n#### `ACT_RU_JOB` 工作数据表(一般工作表)\n\n| 字段                 | 类型            | 主键 | 说明         | 备注 |\n| -------------------- | --------------- | ---- | ------------ | ---- |\n| ID_                  | NVARCHAR2(64)   | Y    | 主键         |      |\n| REV_                 | INTEGER         | N    | 数据版本     |      |\n| TYPE_                | NVARCHAR2(255)  | N    | 类型         |      |\n| LOCK_EXP_TIME_       | TIMESTAMP(6)    | N    | 锁定释放时间 |      |\n| LOCK_OWNER_          | NVARCHAR2(255)  | N    | 挂起者       |      |\n| EXCLUSIVE_           | NUMBER(1)       | N    |              |      |\n| EXECUTION_ID_        | NVARCHAR2(64)   | N    | 执行实例ID   |      |\n| PROCESS_INSTANCE_ID_ | NVARCHAR2(64)   | N    | 流程实例ID   |      |\n| PROC_DEF_ID_         | NVARCHAR2(64)   | N    | 流程定义ID   |      |\n| RETRIES_             | INTEGER         | N    |              |      |\n| EXCEPTION_STACK_ID_  | NVARCHAR2(64)   | N    | 异常信息ID   |      |\n| EXCEPTION_MSG_       | NVARCHAR2(2000) | N    | 异常信息     |      |\n| DUEDATE_             | TIMESTAMP(6)    | N    | 到期时间     |      |\n| REPEAT_              | NVARCHAR2(255)  | N    | 重复         |      |\n| HANDLER_TYPE_        | NVARCHAR2(255)  | N    | 处理类型     |      |\n| HANDLER_CFG_         | NVARCHAR2(2000) | N    |              |      |\n| TENANT_ID_           | NVARCHAR2(255)  | N    |              |      |\n\n#### `ACT_RU_DEADLETTER_JOB` 工作数据表(无法执行工作表)\n\n| 字段                 | 类型            | 主键 | 说明       | 备注 |\n| -------------------- | --------------- | ---- | ---------- | ---- |\n| ID_                  | NVARCHAR2(64)   | Y    | 主键       |      |\n| REV_                 | INTEGER         | N    | 数据版本   |      |\n| TYPE_                | NVARCHAR2(255)  | N    | 类型       |      |\n| EXCLUSIVE_           | NUMBER(1)       | N    |            |      |\n| EXECUTION_ID_        | NVARCHAR2(64)   | N    | 执行实例ID |      |\n| PROCESS_INSTANCE_ID_ | NVARCHAR2(64)   | N    | 流程实例ID |      |\n| PROC_DEF_ID_         | NVARCHAR2(64)   | N    | 流程定义ID |      |\n| RETRIES_             | INTEGER         | N    |            |      |\n| EXCEPTION_STACK_ID_  | NVARCHAR2(64)   | N    | 异常信息ID |      |\n| EXCEPTION_MSG_       | NVARCHAR2(2000) | N    | 异常信息   |      |\n| DUEDATE_             | TIMESTAMP(6)    | N    | 到期时间   |      |\n| REPEAT_              | NVARCHAR2(255)  | N    | 重复       |      |\n| HANDLER_TYPE_        | NVARCHAR2(255)  | N    | 处理类型   |      |\n| HANDLER_CFG_         | NVARCHAR2(2000) | N    |            |      |\n| TENANT_ID_           | NVARCHAR2(255)  | N    |            |      |\n\n#### `ACT_RU_SUSPENDED_JOB` 工作数据表(暂停工作表)\n\n| 字段                 | 类型            | 主键 | 说明       | 备注 |\n| -------------------- | --------------- | ---- | ---------- | ---- |\n| ID_                  | NVARCHAR2(64)   | Y    | 主键       |      |\n| REV_                 | INTEGER         | N    | 数据版本   |      |\n| TYPE_                | NVARCHAR2(255)  | N    | 类型       |      |\n| EXCLUSIVE_           | NUMBER(1)       | N    |            |      |\n| EXECUTION_ID_        | NVARCHAR2(64)   | N    | 执行实例ID |      |\n| PROCESS_INSTANCE_ID_ | NVARCHAR2(64)   | N    | 流程实例ID |      |\n| PROC_DEF_ID_         | NVARCHAR2(64)   | N    | 流程定义ID |      |\n| RETRIES_             | INTEGER         | N    |            |      |\n| EXCEPTION_STACK_ID_  | NVARCHAR2(64)   | N    | 异常信息ID |      |\n| EXCEPTION_MSG_       | NVARCHAR2(2000) | N    | 异常信息   |      |\n| DUEDATE_             | TIMESTAMP(6)    | N    | 到期时间   |      |\n| REPEAT_              | NVARCHAR2(255)  | N    | 重复       |      |\n| HANDLER_TYPE_        | NVARCHAR2(255)  | N    | 处理类型   |      |\n| HANDLER_CFG_         | NVARCHAR2(2000) | N    |            |      |\n| TENANT_ID_           | NVARCHAR2(255)  | N    |            |      |\n\n#### `ACT_RU_TIMER_JOB` 工作数据表(定时工作表)\n\n| 字段                 | 类型            | 主键 | 说明       | 备注 |\n| -------------------- | --------------- | ---- | ---------- | ---- |\n| ID_                  | NVARCHAR2(64)   | Y    | 主键       |      |\n| REV_                 | INTEGER         | N    | 数据版本   |      |\n| TYPE_                | NVARCHAR2(255)  | N    | 类型       |      |\n| EXCLUSIVE_           | NUMBER(1)       | N    |            |      |\n| EXECUTION_ID_        | NVARCHAR2(64)   | N    | 执行实例ID |      |\n| PROCESS_INSTANCE_ID_ | NVARCHAR2(64)   | N    | 流程实例ID |      |\n| PROC_DEF_ID_         | NVARCHAR2(64)   | N    | 流程定义ID |      |\n| RETRIES_             | INTEGER         | N    |            |      |\n| EXCEPTION_STACK_ID_  | NVARCHAR2(64)   | N    | 异常信息ID |      |\n| EXCEPTION_MSG_       | NVARCHAR2(2000) | N    | 异常信息   |      |\n| DUEDATE_             | TIMESTAMP(6)    | N    | 到期时间   |      |\n| REPEAT_              | NVARCHAR2(255)  | N    | 重复       |      |\n| HANDLER_TYPE_        | NVARCHAR2(255)  | N    | 处理类型   |      |\n| HANDLER_CFG_         | NVARCHAR2(2000) | N    |            |      |\n| TENANT_ID_           | NVARCHAR2(255)  | N    |            |      |\n\n#### `ACT_RU_EVENT_SUBSCR` 时间描述表\n\n| 字段           | 类型           | 主键 | 说明           | 备注 |\n| -------------- | -------------- | ---- | -------------- | ---- |\n| ID_            | NVARCHAR2(64)  | Y    | 主键           |      |\n| REV_           | INTEGER        | N    | 数据版本       |      |\n| EVENT_TYPE_    | NVARCHAR2(255) | N    | 事件类型       |      |\n| EVENT_NAME_    | NVARCHAR2(255) | N    | 事件名称       |      |\n| EXECUTION_ID_  | NVARCHAR2(64)  | N    | 指定ID         |      |\n| PROC_INST_ID_  | NVARCHAR2(64)  | N    | 流程定义ID     |      |\n| ACTIVITY_ID_   | NVARCHAR2(64)  | N    | 具体事件ID     |      |\n| CONFIGURATION_ | NVARCHAR2(255) | N    | 事件的配置属性 |      |\n| CREATED_       | TIMESTAMP(6)   | N    | 创建时间       |      |\n| PROC_DEF_ID_   | NVARCHAR2(64)  | N    | 属性ID         |      |\n| TENANT_ID_     | NVARCHAR2(255) | N    |                |      |\n\n#### `ACT_HI_PROCINST` 流程实例表\n\n| 字段                       | 类型            | 主键 | 说明         | 备注 |\n| -------------------------- | --------------- | ---- | ------------ | ---- |\n| ID_                        | NVARCHAR2(64)   | Y    | 主键         |      |\n| PROC_INST_ID_              | NVARCHAR2(64)   | N    | 流程实例ID   |      |\n| BUSINESS_KEY_              | NVARCHAR2(255)  | N    | 业务主键     |      |\n| PROC_DEF_ID_               | NVARCHAR2(64)   | N    | 属性ID       |      |\n| START_TIME_                | TIMESTAMP(6)    | N    | 开始时间     |      |\n| END_TIME_                  | TIMESTAMP(6)    | N    | 结束时间     |      |\n| DURATION_                  | NUMBER(19)      | N    | 耗时         |      |\n| START_USER_ID_             | NVARCHAR2(255)  | N    | 起始人       |      |\n| START_ACT_ID_              | NVARCHAR2(255)  | N    | 起始节点     |      |\n| END_ACT_ID_                | NVARCHAR2(255)  | N    | 结束节点     |      |\n| SUPER_PROCESS_INSTANCE_ID_ | NVARCHAR2(64)   | N    | 父流程实例ID |      |\n| DELETE_REASON_             | NVARCHAR2(2000) | N    | 删除原因     |      |\n| TENANT_ID_                 | NVARCHAR2(255)  | N    |              |      |\n| NAME_                      | NVARCHAR2(255)  | N    | 名称         |      |\n\n#### `ACT_HI_DETAIL` 流程明细表\n\n| 字段          | 类型            | 主键 | 说明                                                | 备注 |\n| ------------- | --------------- | ---- | --------------------------------------------------- | ---- |\n| ID_           | NVARCHAR2(64)   | Y    | 主键                                                |      |\n| REV_          | INTEGER         | N    | 数据版本                                            |      |\n| TYPE_         | NVARCHAR2(255)  | N    | 类型                                                |      |\n| PROC_INST_ID_ | NVARCHAR2(64)   | N    | 流程实例ID                                          |      |\n| EXECUTION_ID_ | NVARCHAR2(64)   | N    | 执行ID                                              |      |\n| TASK_ID_      | NVARCHAR2(64)   | N    | 任务ID                                              |      |\n| ACT_INST_ID_  | NVARCHAR2(64)   | N    | 节点实例ID                                          |      |\n| NAME_         | NVARCHAR2(255)  | N    | 名称                                                |      |\n| VAR_TYPE_     | NVARCHAR2(64)   | N    | 参数类型                                            |      |\n| TIME_         | TIMESTAMP(6)    | N    | 时间戳                                              |      |\n| BYTEARRAY_ID_ | NVARCHAR2(64)   | N    | 字节表ID                                            |      |\n| DOUBLE_       | NUMBER(*,10)    | N    | 存储变量类型为Double                                |      |\n| LONG_         | NUMBER(19)      | N    | 存储变量类型为long                                  |      |\n| TEXT_         | NVARCHAR2(2000) | N    | 存储变量值类型为String                              |      |\n| TEXT2_        | NVARCHAR2(2000) | N    | 此处存储的是JPA持久化对象时，才会有值。此值为对象ID |      |\n\n#### `ACT_HI_TASKINST` 历史任务表\n\n| 字段            | 类型            | 主键 | 说明                    | 备注                                   |\n| --------------- | --------------- | ---- | ----------------------- | -------------------------------------- |\n| ID_             | NVARCHAR2(64)   | Y    | 主键                    |                                        |\n| PROC_DEF_ID_    | NVARCHAR2(64)   | N    | 流程定义ID              |                                        |\n| TASK_DEF_KEY_   | NVARCHAR2(255)  | N    | 任务定义的ID值          |                                        |\n| PROC_INST_ID_   | NVARCHAR2(64)   | N    | 流程实例ID              |                                        |\n| EXECUTION_ID_   | NVARCHAR2(64)   | N    | 执行ID                  |                                        |\n| PARENT_TASK_ID_ | NVARCHAR2(64)   | N    | 父任务ID                |                                        |\n| NAME_           | NVARCHAR2(255)  | N    | 名称                    |                                        |\n| DESCRIPTION_    | NVARCHAR2(2000) | N    | 说明                    |                                        |\n| OWNER_          | NVARCHAR2(255)  | N    | 实际签收人 任务的拥有者 | 签收人（默认为空，只有在委托时才有值） |\n| ASSIGNEE_       | NVARCHAR2(255)  | N    | 被指派执行该任务的人    |                                        |\n| START_TIME_     | TIMESTAMP(6)    | N    | 开始时间                |                                        |\n| CLAIM_TIME_     | TIMESTAMP(6)    | N    | 提醒时间                |                                        |\n| END_TIME_       | TIMESTAMP(6)    | N    | 结束时间                |                                        |\n| DURATION_       | NUMBER(19)      | N    | 耗时                    |                                        |\n| DELETE_REASON_  | NVARCHAR2(2000) | N    | 删除原因                |                                        |\n| PRIORITY_       | INTEGER         | N    | 优先级别                |                                        |\n| DUE_DATE_       | TIMESTAMP(6)    | N    | 过期时间                |                                        |\n| FORM_KEY_       | NVARCHAR2(255)  | N    | 节点定义的formkey       |                                        |\n| CATEGORY_       | NVARCHAR2(255)  | N    | 类别                    |                                        |\n| TENANT_ID_      | NVARCHAR2(255)  | N    |                         |                                        |\n\n#### `ACT_HI_ACTINST` 历史行为表\n\n| 字段               | 类型            | 主键 | 说明                 | 备注 |\n| ------------------ | --------------- | ---- | -------------------- | ---- |\n| ID_                | NVARCHAR2(64)   | Y    | 主键                 |      |\n| PROC_DEF_ID_       | NVARCHAR2(64)   | N    | 流程定义ID           |      |\n| PROC_INST_ID_      | NVARCHAR2(64)   | N    | 流程实例ID           |      |\n| EXECUTION_ID_      | NVARCHAR2(64)   | N    | 执行ID               |      |\n| ACT_ID_            | NVARCHAR2(255)  | N    | 节点实例ID           |      |\n| TASK_ID_           | NVARCHAR2(64)   | N    | 任务ID               |      |\n| CALL_PROC_INST_ID_ | NVARCHAR2(64)   | N    | 调用外部的流程实例ID |      |\n| ACT_NAME_          | NVARCHAR2(255)  | N    | 节点名称             |      |\n| ACT_TYPE_          | NVARCHAR2(255)  | N    | 节点类型             |      |\n| ASSIGNEE_          | NVARCHAR2(255)  | N    | 节点签收人           |      |\n| START_TIME_        | TIMESTAMP(6)    | N    | 开始时间             |      |\n| END_TIME_          | TIMESTAMP(6)    | N    | 结束时间             |      |\n| DURATION_          | NUMBER(19)      | N    | 耗时                 |      |\n| DELETE_REASON_     | NVARCHAR2(2000) | N    | 删除原因             |      |\n| TENANT_ID_         | NVARCHAR2(255)  | N    |                      |      |\n\n#### `ACT_HI_ATTACHMENT` 附件表\n\n| 字段          | 类型            | 主键 | 说明       | 备注 |\n| ------------- | --------------- | ---- | ---------- | ---- |\n| ID_           | NVARCHAR2(64)   | Y    | 主键       |      |\n| REV_          | INTEGER         | N    | 数据版本   |      |\n| USER_ID_      | NVARCHAR2(255)  | N    | 用户ID     |      |\n| NAME_         | NVARCHAR2(255)  | N    | 名称       |      |\n| DESCRIPTION_  | NVARCHAR2(2000) | N    | 说明       |      |\n| TYPE_         | NVARCHAR2(255)  | N    | 类型       |      |\n| TASK_ID_      | NVARCHAR2(64)   | N    | 任务ID     |      |\n| PROC_INST_ID_ | NVARCHAR2(64)   | N    | 流程实例ID |      |\n| URL_          | NVARCHAR2(2000) | N    |            |      |\n| CONTENT_ID_   | NVARCHAR2(64)   | N    | 字节表的ID |      |\n| TIME_         | TIMESTAMP(6)    | N    | 时间       |      |\n\n#### `ACT_HI_COMMENT` 评论表\n\n| 字段          | 类型            | 主键 | 说明       | 备注                                 |\n| ------------- | --------------- | ---- | ---------- | ------------------------------------ |\n| ID_           | NVARCHAR2(64)   | Y    | 主键       |                                      |\n| TYPE_         | NVARCHAR2(255)  | N    | 类型       | 类型：event（事件）、comment（意见） |\n| TIME_         | TIMESTAMP(6)    | N    | 时间       |                                      |\n| USER_ID_      | NVARCHAR2(255)  | N    | 用户ID     |                                      |\n| TASK_ID_      | NVARCHAR2(64)   | N    | 任务ID     |                                      |\n| PROC_INST_ID_ | NVARCHAR2(64)   | N    | 流程实例ID |                                      |\n| ACTION_       | NVARCHAR2(255)  | N    | 行为类型   |                                      |\n| MESSAGE_      | NVARCHAR2(2000) | N    | 信息       | 用于存放流程产生的信息，比如审批意见 |\n| FULL_MSG_     | BLOB            | N    | 全部内容   |                                      |\n\n#### `ACT_RE_MODEL` 流程设计模型部署表\n\n| 字段                          | 类型            | 主键 | 说明                         | 备注 |\n| ----------------------------- | --------------- | ---- | ---------------------------- | ---- |\n| ID_                           | NVARCHAR2(64)   | Y    | 主键                         |      |\n| REV_                          | INTEGER         | N    | 数据版本                     |      |\n| NAME_                         | NVARCHAR2(255)  | N    |                              |      |\n| KEY_                          | NVARCHAR2(255)  | N    |                              |      |\n| CATEGORY_                     | NVARCHAR2(255)  | N    | 分类                         |      |\n| CREATE_TIME_                  | TIMESTAMP(6)    | N    | 创建时间                     |      |\n| LAST_UPDATE_TIME_             | TIMESTAMP(6)    | N    | 最后更新时间                 |      |\n| VERSION_                      | INTEGER         | N    | 版本                         |      |\n| META_INFO_                    | NVARCHAR2(2000) | N    | 以json格式保存流程定义的信息 |      |\n| DEPLOYMENT_ID_                | NVARCHAR2(64)   | N    | 部署ID                       |      |\n| EDITOR_SOURCE_VALUE_ID_       | NVARCHAR2(64)   | N    |                              |      |\n| EDITOR_SOURCE_EXTRA_VALUE_ID_ | NVARCHAR2(64)   | N    |                              |      |\n| TENANT_ID_                    | NVARCHAR2(255)  | N    |                              |      |\n\n#### `ACT_EVT_LOG` 事件日志表\n\n| 字段          | 类型           | 主键 | 说明       | 备注 |\n| ------------- | -------------- | ---- | ---------- | ---- |\n| LOG_NR_       | NUMBER(19)     | Y    | 主键       |      |\n| TYPE_         | NVARCHAR2(64)  | N    | 类型       |      |\n| PROC_DEF_ID_  | NVARCHAR2(64)  | N    | 流程定义ID |      |\n| PROC_INST_ID_ | NVARCHAR2(64)  | N    | 流程实例ID |      |\n| EXECUTION_ID_ | NVARCHAR2(64)  | N    | 执行ID     |      |\n| TASK_ID_      | NVARCHAR2(64)  | N    | 任务ID     |      |\n| TIME_STAMP_   | TIMESTAMP(6)   | N    |            |      |\n| USER_ID_      | NVARCHAR2(255) | N    |            |      |\n| DATA_         | BLOB           | N    |            |      |\n| LOCK_OWNER_   | NVARCHAR2(255) | N    |            |      |\n| LOCK_TIME_    | TIMESTAMP(6)   | N    |            |      |\n| IS_PROCESSED_ | NUMBER(3)      | N    |            |      |\n\n#### `ACT_PROCDEF_INFO`\n\n| 字段          | 类型          | 主键 | 说明       | 备注 |\n| ------------- | ------------- | ---- | ---------- | ---- |\n| ID_           | NVARCHAR2(64) | Y    | 主键       |      |\n| PROC_DEF_ID_  | NVARCHAR2(64) | N    | 流程定义ID |      |\n| REV_          | INTEGER       | N    | 数据版本   |      |\n| INFO_JSON_ID_ | NVARCHAR2(64) | N    |            |      |\n\n#### `ACT_HI_VARINST` 历史变量表历史变量表\n\n| 字段               | 类型               | 主键 | 说明               | 备注 |\n| ------------------ | ------------------ | ---- | ------------------ | ---- |\n| ID_                | NVARCHAR2(64)      | Y    | 主键               |      |\n| PROC_INST_ID_      | NVARCHAR2(64)      | N    | 流程实例ID         |      |\n| EXECUTION_ID_      | NVARCHAR2(64)      | N    | 指定ID             |      |\n| TASK_ID_           | NVARCHAR2(64)      | N    | 任务ID             |      |\n| NAME_              | NVARCHAR2(255)     | N    | 名称               |      |\n| VAR_TYPE_          | NVARCHAR2(100)     | N    | 参数类型           |      |\n| REV_               | INTEGER            | N    | 数据版本           |      |\n| BYTEARRAY_ID_      | NVARCHAR2(64)      | N    | 字节表ID           |      |\n| DOUBLE_            | NUMBER(*,10)       | N    | 存储double类型数据 |      |\n| LONG_              | NUMBER(*,10)       | N    | 存储long类型数据   |      |\n| TEXT_              | NVARCHAR2(2000)    | N    |                    |      |\n| TEXT2_             | NVARCHAR2(2000)    | N    |                    |      |\n| CREATE_TIME_       | TIMESTAMP(6)(2000) | N    |                    |      |\n| LAST_UPDATED_TIME_ | TIMESTAMP(6)(2000) | N    |                    |      |\n\n#### `ACT_HI_IDENTITYLINK` 历史流程人员表\n\n| 字段          | 类型           | 主键 | 说明       | 备注 |\n| ------------- | -------------- | ---- | ---------- | ---- |\n| ID_           | NVARCHAR2(64)  | Y    | 主键       |      |\n| GROUP_ID_     | NVARCHAR2(255) | N    | 组ID       |      |\n| TYPE_         | NVARCHAR2(255) | N    | 类型       |      |\n| USER_ID_      | NVARCHAR2(255) | N    | 用户ID     |      |\n| TASK_ID_      | NVARCHAR2(64)  | N    | 任务ID     |      |\n| PROC_INST_ID_ | NVARCHAR2(64)  | N    | 流程实例ID |      |\n","tags":["Flowable"],"categories":["记录","Flowable"]},{"title":"CentOS7 安装 ExpressVPN 客户端","url":"/post/e10aaa92.html","content":"\n### 背景\n\n`ExpressVPN `咱们不做过多介绍，想要了解详情的话放出[官网](https://www.expressvpn.com/)地址自行了解。咱们现在需要在远端的CentOS服务器上安装 `ExpressVPN` 的客户端。\n\n### 开始\n\n#### 客户端安装\n\n在[官方下载](https://www.expressvpn.com/setup#linux)处下载Fedora 64-bit版本的客户端，通过命令安装客户端\n\n```shell\nrpm -ivh expressvpn-3.14.0.4-1.x86_64.rpm\n```\n\n激活，只需要拷贝 `ExpressVPN` 的激活码到终端，然后按下回车键即可\n\n```shell\nexpressvpn activate\n```\n\n可以选择通过共享匿名诊断报告来帮助改进 `ExpressVPN` ，输入 Y 接受，或输入 n 拒绝\n\n#### 客户端卸载\n\n```shell\nyum remove expressvpn\n```\n\n值得一提的是，如果日后需要更新 `ExpressVPN` 的客户端，只需要先卸载旧版的客户端，然后再安装新版的客户端即可\n\n#### 客户端连接服务器\n\n连接 `VPN` 服务器，如果是第一次连接，`ExpressVPN` 将使用 “智能位置” 功能来选择服务器位置，这是根据速度和邻近性等因素推荐的。如果不是第一次连接，`ExpressVPN` 将连接到最近连接过的服务器位置\n\n```shell\nexpressvpn connect\n```\n\n![连接](https://s2.loli.net/2021/12/13/uMgVxc3eaRX46nT.png)\n\n断开 `VPN` 连接，可使用以下命令\n\n```shell\nexpressvpn disconnect\n```\n\n#### 客户端常用命令\n\n```shell\n# 显示所有推荐的 VPN 服务器位置\nexpressvpn list\n\n# 显示所有有效的 VPN 服务器位置\nexpressvpn list all\n\n# 显示最近连接过的三个 VPN 服务器位置\nexpressvpn list recent\n```\n\n```shell\n# 连接到智能推荐的 VPN 服务器位置\nexpressvpn connect smart\n\n# 连接到特定的 VPN 服务器位置\nexpressvpn connect \"Hong Kong - 2\"\n```\n\n```shell\n# 设置 ExpressVPN 使用 TCP 作为 VPN 协议\nexpressvpn protocol tcp\n\n# 设置 ExpressVPN 使用 UDP 作为 VPN 协议\nexpressvpn protocol udp\n\n# 设置 ExpressVPN 自动选择 VPN 协议，包括 lightway_udp、tcp、udp 协议\nexpressvpn protocol auto\n```\n\n```shell\n# 设置 ExpressVPN 在启动时自动连接到上次连接过的 VPN 服务器位置\nexpressvpn autoconnect true\n\n# 禁用 ExpressVPN 在启动时自动连接\nexpressvpn autoconnect false\n```\n\n```shell\n# 查看 ExpressVPN 当前的连接状态\nexpressvpn status\n\n# 查看 ExpressVPN 的后台服务状态\nsystemctl status expressvpn\n```\n\n```shell\n# 查看 ExpressVPN 当前的配置信息\nexpressvpn preferences\n\n# 获取 ExpressVPN 特定的配置信息\nexpressvpn preferences get desktop_notifications\n\n# 设置 ExpressVPN 特定的配置信息\nexpressvpn preferences set desktop_notifications false\n```\n\n```shell\n# 查看 ExpressVPN 的命令帮助文档\nman expressvpn\n```\n\n","tags":["CentOS7"],"categories":["Linux","记录"]},{"title":"橙单-流程开发之会签","url":"/post/ade79965.html","content":"\n### 会签\n\n会签顾名思义简单地讲就是多方共同签署，对签字内容进行确认、签字证明，签字就意味着要负责、要为确认内容承担责任，加强了签字者的责任感和使命感，为确保质量、安全、顺利移交工作面、减少纠纷奠定了必要的书面基础。\n\n本文我们设计流程如下：发起人发起流程，指派多名用户进行会签，然后如果会签任务中同意人数达到一半，进入下一步总经理审批，未达到一半直接返回到发起人；总经理可以同意和拒绝，同意则结束，拒绝则返回到发起人。\n\n### 配置会签流程\n\n#### 起始任务\n\n第一步我们配置`发起会签`的步骤，这一步的重点在于：\n\n1. 添加按钮，类型必须为`会签`\n\n![会签](https://s2.loli.net/2021/12/13/IVBtKcCDrpU9XiG.png)\n\n2. 处理用户为`流程发起人`\n\n![流程发起人](https://s2.loli.net/2021/12/13/sdSabiWt1qxLZDc.png)\n\n#### 会签\n\n在会签任务中，重点在于：\n\n1. 按钮类型要选择`同意（会签）`和`拒绝（会签）`\n\n![同意会签和拒绝会签](https://s2.loli.net/2021/12/13/GjC4M7TAemPLvz8.png)\n\n2. 多实例部分设置如下：回路特性选择`并行多重事件`；集合填写`assigneeList`；元素变量填写`assignee`；完成条件填写`${nrOfInstances == nrOfCompletedInstances}`。具体可以参考内置变量。\n\n![内置变量](https://s2.loli.net/2021/12/13/hAvFCS2dNbWLOks.png)\n\n![多实例](https://s2.loli.net/2021/12/13/l2Z4Cskhq5Dyf1E.png)\n\n3. 任务设置：处理用户选择自定义用户，**注意**要和上一步中的`元素变量`保持一致。\n\n![处理用户](https://s2.loli.net/2021/12/13/183mupTQotMw9rX.png)\n\n![自定义用户](https://s2.loli.net/2021/12/13/EBFb8IoGdp7TaXD.png)\n\n#### 条件网关\n\n条件网关要配置的重点在于：\n\n1. 网关的前一步任务记得配置任务变量，确保网关能拿到条件变量\n2. 如果同意人数达到一半，流转类型选择`条件流转路径`，表达式如下：`${multiAgreeCount / multiNumOfInstances >= 0.5}`\n\n![条件流转](https://s2.loli.net/2021/12/13/BSsAyjLugxO3kTQ.png)\n\n2. 另一条分支同理：`${multiAgreeCount / multiNumOfInstances < 0.5}`\n\n![条件流转](https://s2.loli.net/2021/12/13/eO1y7cbhACSEalv.png)\n\n#### 总经理审批\n\n此步重点：\n\n1. 同意、拒绝按钮\n\n![同意拒绝](https://s2.loli.net/2021/12/13/hvZu8HLGQbptS5c.png)\n\n2. 流转条件为`内置按钮`\n\n![内置按钮](https://s2.loli.net/2021/12/13/cgaPUnxZCIhOEsu.png)\n\n最后，添加结束节点。**至此，流程配置部分全部完成**。\n\n### 效果\n\n#### 流程发起人界面：\n\n1. 填写流程信息；\n2. 点击提交；\n3. 选择指派用户后提交；\n\n![提交](https://s2.loli.net/2021/12/13/hufQJWU2k3VxDsP.png)\n\n#### 被指派人界面：\n\n1. 点击同意或拒绝；\n2. 填写审批意见后提交；\n\n![收到](https://s2.loli.net/2021/12/13/vjfg7Vh3HDs64eu.png)\n\n#### 总经理界面：\n\n1. 点击同意或拒绝；\n2. 填写审批意见后提交；\n3. 流程结束或返回。\n\n![总经理界面](https://s2.loli.net/2021/12/13/ZszmHeyx75Qwk2L.png)\n\n#### 流程图\n\n![流程图](https://s2.loli.net/2021/12/13/nu68lQwx3NtIcaF.png)\n\n![审批记录](https://s2.loli.net/2021/12/13/kDdnXUAjFeuo19q.png)\n","tags":["橙单"],"categories":["记录","橙单"]},{"title":"橙单-流程开发","url":"/post/8ed0ed59.html","content":"\n### 背景\n\n橙单工具的优势就在于流程开发，日常工作中流程也是必不可少的环节。本文主要介绍橙单工具配置流程的基本操作和注意事项。\n\n本文我们按照一个简单例子来设计流程：假设现在我们有一个审批流程，它可以有类型一和类型二。第一步由发起人发起，第二步由部门领导审批，部门领导可以同意或拒绝；第三步出现条件，如果流程类型为类型一，则部门领导审批通过后直接结束；如果流程类型为类型二，则部门领导审批通过后还需总经理审批，总经理同意后流程结束，总经理也可以拒绝，则流程退回至发起人。\n\n### 开始\n\n#### 流程管理\n\n`应用管理->流程管理`\n\n![流程管理](https://i.loli.net/2021/12/03/2SIVvqYneBO3oj1.png)\n\n#### 新建流程\n\n![添加流程](https://s2.loli.net/2021/12/07/CQ2lwYiZmrWBdnk.png)\n\n##### 基础信息\n\n![基础信息](https://s2.loli.net/2021/12/07/eT48BsHoAgzKGUh.png)\n\n##### 流程变量\n\n此步可以暂时先不添加，后续如果要用到可以修改\n\n![流程变量](https://s2.loli.net/2021/12/07/GZpQYLoXli2WTw4.png)\n\n##### 流程表单\n\n这个步骤是为了设计流程页面的表单\n\n![流程表单](https://s2.loli.net/2021/12/07/72KDXnpiEjVFGPe.png)\n\n填写流程页面的基本信息\n\n![基本信息](https://s2.loli.net/2021/12/07/r6xnflB9uDJc5XN.png)\n\n设计页面布局，这里的控件都支持直接拖拽\n\n![页面布局](https://s2.loli.net/2021/12/07/XnULPSwIcY4Fkqa.png)\n\n然后进入流程图的设计界面：\n\n![流程设计](https://s2.loli.net/2021/12/07/WQIPiBDaYo13JS2.png)\n\n接下来简单介绍一下流程图是怎么画出来的\n\n#### 流程图\n\n##### 创建开始事件\n\n![创建开始事件](https://s2.loli.net/2021/12/07/WAfQm2hB7jXsgtI.png)\n\n##### 追加任务\n\n创建开始事件后，我们可以直接鼠标点击开始事件的这个圆圈，选择`追加任务`\n\n![追加任务](https://s2.loli.net/2021/12/07/3BP6Ldu4wKoElqg.png)\n\n此时就会出现一个圆角矩形，代表我们创建了一个任务\n\n我们点击这个任务，右边会弹出详细的参数配置页面。这是一个起始任务，因此我们需要让这个任务`允许编辑`，并赋予一个`提交`按钮（起始任务无法退回因此没有退回按钮）。\n\n![允许编辑](https://s2.loli.net/2021/12/07/2wEfBnvAPIZ6t1u.png)\n\n![编辑按钮](https://s2.loli.net/2021/12/07/Obum7CETMvUV4Ww.png)\n\n这样，我们就给第一个任务配置好了参数，当我们点击提交的时候，我们的流程便流转至部门领导审批环节，在这一步环节中，部门领导可以同意或拒绝，如果拒绝就退回至发起人。因此，我们需要给任务二添加两个按钮`同意`和`退回`。\n\n![同意和退回](https://s2.loli.net/2021/12/07/TnsjQqituIcaz6S.png)\n\n现在，我们以`退回`为例，先点击任务，然后点击消息流或关联连接，将箭头从本任务指向退回的任务。\n\n![关联连接](https://s2.loli.net/2021/12/07/jTf8nUuoXA1pkF7.png)\n\n这时候，这条线就出来了，我们点击这条线，配置参数：流转类型选择`内置按钮`，按钮类型选择`拒绝`，表达式是自动生成的，此步无需配置\n\n![参数](https://s2.loli.net/2021/12/07/OaZhoMVQiYA51Kz.png)\n\n然后，按照我们的流程，部门领导审批通过后，如果流程类型为类型一，则流程直接结束；如果流程类型为类型二，则需要经过总经理审批。因此，这是一个条件分支，我们需要创建一个`网关`节点。\n\n当我们使用`网关`节点，就需要在流程变量环节添加变量了。这里，我们需要添加的变量是流程类型字段。\n\n![流程变量](https://s2.loli.net/2021/12/07/5YHDn47Uckeir18.png)\n\n然后，网关的流转条件，我们需要手动填写：流转类型为`条件流转路径`，条件格式为`表达式`，表达式手动填写，格式如图所示：\n\n![流转条件](https://s2.loli.net/2021/12/07/yDoLq4dw1J8BRv5.png)\n\n总经理审批的任务则可以直接参考部门领导审批，其中如果`同意`则流程直接结束，即追加结束事件即可\n\n**至此，我们在橙单客户端的配置已经结束，我们生成工程之后，还需要在界面中进行部分配置**\n\n#### 启动工程并继续配置\n\n我们启动项目，进入`流程管理->流程设计`，点击`编辑`。\n\n![编辑](https://s2.loli.net/2021/12/07/lfpv4nXIiryYktP.png)\n\n我们需要给每一个任务配置任务处理人，比如我们需要给`起始任务`的`处理用户`设定为`流程发起人`，否则当我们一会儿启动流程的时候，不会弹出相应的界面。\n\n##### 发起人\n\n![发起人](https://s2.loli.net/2021/12/07/RIyWaqO852ALTol.png)\n\n##### 部门领导审批\n\n![部门领导审批](https://s2.loli.net/2021/12/07/Mxw72glT4dez1jb.png)\n\n##### 总经理审批\n\n![总经理审批](https://s2.loli.net/2021/12/07/m6jzPk8QHpWLdNi.png)\n\n**至此，流程的配置部分全部完成**。\n\n#### 发布并启动\n\n我们`点击发布->版本管理选择最新版本->启动`即可看到我们配置的流程页面并发布流程。\n\n![启动](https://s2.loli.net/2021/12/07/Fe5lZotjDdHwgUV.png)\n\n### 效果\n\n![效果](https://s2.loli.net/2021/12/07/XiURNwcmA8va3xz.png)\n\n![流程](https://s2.loli.net/2021/12/07/Io1BCFl2Afi7rw6.png)\n\n![流程图](https://s2.loli.net/2021/12/07/L8dyg4nh9zuZmPW.png)\n\n![审批记录](https://s2.loli.net/2021/12/07/3ZLCGwiq7uEtYSm.png)\n\n### 配置菜单\n\n至此，虽然我们的流程已经配置完成，但是很明显，我们目前是从`流程管理`菜单进入的，显然我们不能给随便一个用户就开通这个入口，因此我们需要专门再开发一个`流程查询界面`，通过这个界面创建流程。\n\n#### 配置工单查询界面\n\n`配置工程->应用管理->流程管理->编辑`，进入`流程表单`步骤，`添加表单`\n\n![添加表单](https://s2.loli.net/2021/12/08/Tw5fkAauJlNS1Vg.png)\n\n这里，`表单类别`要选择`工单查询页面`\n\n![编辑](https://s2.loli.net/2021/12/08/uDcJprwiVtXSj8g.png)\n\n点击`页面布局`，进入页面配置\n\n![页面布局](https://s2.loli.net/2021/12/08/iqEpAOrL2jPMm1l.png)\n\n点击表格，进行基础参数配置及字段配置\n\n![基础参数配置](https://s2.loli.net/2021/12/08/DUQqd1eBrouA9MY.png)\n\n![表格列设置](https://s2.loli.net/2021/12/08/OpWsl2xPKTjuX3J.png)\n\n保存后返回。**至此，流程表单页面配置完毕，接下来绑定到菜单即可**\n\n#### 菜单配置\n\n`配置工程->应用管理->菜单管理`，添加子菜单，类型选择`菜单`，链接表单选择刚刚配置的页面\n\n![菜单配置](https://s2.loli.net/2021/12/08/touiNqz7CZ48frX.png)\n\n**至此，全部完成。我们导出工程看看效果**\n\n#### 效果\n\n![橙单-廉洁流程](https://s2.loli.net/2021/12/08/YuFJA58vByInEqi.gif)\n\n接下来，详细看看[会签](http://www.garfielder.com/post/ade79965.html)的配置。\n","tags":["橙单"],"categories":["记录","橙单"]},{"title":"橙单-系统管理","url":"/post/e1df0514.html","content":"\n### 系统管理\n\n![系统管理](https://i.loli.net/2021/11/25/r5JqBhwos6eCZTn.png)\n\n#### 用户管理\n\n这里管理所有登录用户，想要新建用户，点击`新建`。\n\n<img src=\"https://i.loli.net/2021/11/25/3jAdh97swuSfZOM.png\" alt=\"新增\" style=\"zoom:67%;\" />\n\n**注意！**到这里，我们不得不先跳过用户管理的部分，因为我们首先需要有部门、岗位、角色、权限。因此，我们先往下走，来看`部门管理`。\n\n当我们配置好部门、岗位、角色后，回来配置用户信息。\n\n![用户信息](https://i.loli.net/2021/11/25/EUKmMF2LbviTShH.png)\n\n#### 部门管理\n\n##### 部门\n\n部门管理负责管理部门，部门都隶属于公司总部，同时子部门也可以隶属于部门。新建部门时，需要选择所属部门（不选则默认新建在根节点）并填写部门名称。\n\n![新建部门](https://i.loli.net/2021/11/25/qtfQUuFpR5i1WPl.png)\n\n##### 岗位\n\n在这之前，我们先去`岗位管理`。\n\n然后，我们给部门分配岗位。点击`岗位设置->选中岗位->添加岗位`。\n\n![添加岗位](https://i.loli.net/2021/11/25/FT3dbDK4yv5E7PH.png)\n\n#### 岗位管理\n\n岗位管理负责管理岗位即层级，新增时要填写岗位名称和层级。\n\n![新增岗位](https://i.loli.net/2021/11/25/jtficxGh1Nm9wTn.png)\n\n#### 角色管理\n\n角色管理负责管理角色，一个用户可能有多个角色，一个角色也可以同时分给多个用户。新增时要填写角色名称并选择菜单权限。\n\n![新建角色](https://i.loli.net/2021/11/25/SsmKCOkpQlWgz2E.png)\n\n接下来，继续看本工具的重头戏：[流程开发](http://www.garfielder.com/post/8ed0ed59.html)部分。\n","tags":["橙单"],"categories":["记录","橙单"]},{"title":"橙单-增删改","url":"/post/d9b9e913.html","content":"\n### 背景\n\n首先明确，由于新增、修改操作需要弹窗，因此这两种操作需要先配置好相应的弹窗；删除操作则不需要。\n\n### 新增操作\n\n#### 添加新增弹窗\n\n`表单管理->添加`，创建一个`单段落弹窗`，同时提供新增时需要填写的表单参数。\n\n![创建弹窗](https://i.loli.net/2021/11/24/PEJoTgpaA1jIOFr.png)\n\n#### 数据源初始化\n\n![初始化](https://i.loli.net/2021/11/24/g89udAZosLmtqGX.png)\n\n#### 表单组件\n\n添加表单组件，这些是添加时需要填写的字段。\n\n![表单组件](https://i.loli.net/2021/11/24/PyvDqEnteuGV3kB.png)\n\n创建一个类型为基础块的`组件容器`，用于提供`确定`、`取消`等操作。\n\n![组件容器](https://i.loli.net/2021/11/24/uJzLqQt3pAgZ9RT.png)\n\n#### 表单操作\n\n给组件容器加入确定、取消操作。\n\n![确定取消](https://i.loli.net/2021/11/24/pGLcYBQHRDTq1dx.png)\n\n![确定](https://i.loli.net/2021/11/24/UgknErvuVGHRqxf.png)\n\n![取消](https://i.loli.net/2021/11/24/7eMa3dfVYyzku6n.png)\n\n#### 效果\n\n![橙单-新增](https://i.loli.net/2021/11/24/xPRLiy3MNsgGkBr.gif)\n\n### 编辑操作\n\n可以如法炮制新增操作，不同之处在于下图\n\n![编辑](https://i.loli.net/2021/11/24/ApxqTRMQYgK4FXv.png)\n\n需要在此处将数据源操作换成`编辑`。\n\n#### 效果\n\n![橙单-修改](https://i.loli.net/2021/11/24/uXoJ51Y3RgFyN2c.gif)\n\n### 删除操作\n\n由于删除不需要弹窗，只需要弹出一个提示信息，然后点击确定或取消即可，因此我们直接使用自带的删除即可。\n\n![删除操作](https://i.loli.net/2021/11/24/r7RZ1lWEY68UVQ5.png)\n\n#### 效果\n\n![橙单-删除](https://i.loli.net/2021/11/24/Foksj36L8tv4YI5.gif)\n\n接下来，继续看[系统管理](http://www.garfielder.com/post/e1df0514.html)部分。\n","tags":["橙单"],"categories":["记录","橙单"]},{"title":"橙单-主子表","url":"/post/85295113.html","content":"\n### 主子表\n\n本项目中，我需要做一个廉洁流程，一条流程对应多条流程明细，这样，流程表和流程明细表之间就是主子表的关系，在橙单中配置主子表的操作步骤如下：\n\n### 具体步骤\n\n#### 配置主表\n\n主表配置可以参考[本文](http://www.garfielder.com/post/3111c952.html)。\n\n#### 配置子表\n\n子表配置同样可以参考[本文](http://www.garfielder.com/post/3111c952.html)，不过其中有几个部分需要注意对应，否则明细界面无法对应显示。\n\n##### 表单基础信息\n\n在基础信息这里，我们需要填写`输入参数`，这个字段是子表的关联字段，用于页面初始化过滤。\n\n<img src=\"https://i.loli.net/2021/11/24/F3PfnCr7T1t9dBA.png\" alt=\"输入参数\"  />\n\n##### 数据源初始化\n\n请记得初始化数据源。\n\n##### 表单组件\n\n这里，我们需要添加一个`数据组件`用来显示数据，然后给这个`数据组件`添加过滤器。\n\n![编辑组件](https://i.loli.net/2021/11/24/PRkSBEI6ecXjNVv.png)\n\n![关联字段](https://i.loli.net/2021/11/24/O8LUZCDYTnIBqWz.png)\n\n##### 主表添加跳转动作和参数传递\n\n进入主表的`表单操作`，给`基础表格`添加一个`跳页操作`，这里把主表的关联字段传过去。\n\n![跳页操作](https://i.loli.net/2021/11/24/2J1mILUXKlnfRjT.png)\n\n![关联字段](https://i.loli.net/2021/11/24/KvRZDWquNQ5Ho2m.png)\n\n### 效果\n\n![橙单-主子表](https://i.loli.net/2021/11/24/FB7RW32XAjOg1Nl.gif)\n\n接下来，我们继续研究[增删改操作](http://www.garfielder.com/post/d9b9e913.html)的配置。\n","tags":["橙单"],"categories":["记录","橙单"]},{"title":"橙单-本地部署","url":"/post/3111c952.html","content":"\n### 介绍\n\n[橙单](http://www.orangeforms.com/)是一款代码生成工具，可导入多数据源和复杂的表关系，并生成开箱即用的前后端工程代码。\n\n想要使用橙单生成我们的项目，咱们就从数据库开始。\n\n### 生成工程项目\n\n#### 准备工作\n\n> 本地配置好`Java`、`Node`、`vue@cli`的环境\n>\n> 安装`MySQL`数据库和`Maven`\n>\n> 准备好`redis`服务\n>\n> 一个`IDE`比如`IntelliJ Idea`\n>\n> [橙单客户端](http://download.orangeforms.com/win/orange-code-generator.zip)\n\n#### 创建数据表\n\n数据表创建以**t_**开头，需包含以下字段：\n\n|  字段名称   |   类型   |   注释   |\n| :---------: | :------: | :------: |\n| create_user |  bigint  |  创建人  |\n| create_time | datetime | 创建时间 |\n| delete_flag |   int    | 删除标识 |\n| update_user |  bigint  |  更新人  |\n| update_time | datetime | 更新时间 |\n|   dept_id   |  bigint  | 创建部门 |\n\n#### 数据库连接管理\n\n打开下载好的橙单客户端（这里假设你已经购买了企业版并且已经新建了项目）\n\n##### 点击`配置工程->数据库链接管理`\n\n<img src=\"https://i.loli.net/2021/11/18/vKJA2McOj9Uwmuk.png\" alt=\"数据库链接管理\" style=\"zoom: 33%;\" />\n\n##### 选择数据库表\n\n<img src=\"https://i.loli.net/2021/11/18/WogYVAMQeN7b5mR.png\" alt=\"选择数据库表\" style=\"zoom:33%;\" />\n\n##### 导入数据表\n\n<img src=\"https://i.loli.net/2021/11/18/ShlCmvRyqsa7GIO.png\" alt=\"导入数据表\" style=\"zoom:33%;\" />\n\n##### 添加字段\n\n然后点击`编辑->添加字段`\n\n<img src=\"https://i.loli.net/2021/11/18/oAlu2Uv76rNLw9k.png\" alt=\"添加字段\" style=\"zoom:33%;\" />\n\n#### 服务管理\n\n<img src=\"https://i.loli.net/2021/11/18/i6o7EH1DnMuSQTC.png\" alt=\"服务管理\" style=\"zoom:33%;\" />\n\n##### 添加数据库表\n\n<img src=\"https://i.loli.net/2021/11/18/jNbU7ITQvZxMzJG.png\" alt=\"数据表\" style=\"zoom:33%;\" />\n\n<img src=\"https://i.loli.net/2021/11/18/ezTRY3vow26NLkH.png\" alt=\"数据表\" style=\"zoom:33%;\" />\n\n##### 配置表\n\n点击`编辑`，配置表信息，可参考如下：\n\n<img src=\"https://i.loli.net/2021/11/18/oOWIndCybre7Aiz.png\" alt=\"配置信息\" style=\"zoom:33%;\" />\n\n其中：\n\n1. 实体对象名称首字母大写；\n2. 配置部门过滤字段、用户过滤字段、更新人字段、更新时间字段、创建人字段、创建时间字段、逻辑删除字段；\n3. 如果涉及流程，给主表的支持能力配置支持能力；\n4. 给每个字段配置查询过滤方式：无过滤、模糊过滤、范围过滤、普通过滤等；\n5. 主键父字段：设置父字段之后，把这个表作为字典的时候就是树形字典了，树形字典可以用级联组件去选择和显示，后端也会生成根据id获得某一层级数据的方法。\n\n##### 配置表字段规则\n\n<img src=\"https://i.loli.net/2021/11/18/dvngYS4Mb1zyreV.png\" alt=\"表字段规则\" style=\"zoom:33%;\" />\n\n<img src=\"https://i.loli.net/2021/11/18/UQxdatojOKYpv34.png\" alt=\"配置\" style=\"zoom:33%;\" />\n\n文件上传字段如下：\n\n<img src=\"https://i.loli.net/2021/11/18/GOnVdyw4pmY7IKQ.png\" alt=\"文件字段\" style=\"zoom:33%;\" />\n\n至此，数据表的部分配置完毕。然后，我们需要将这张表转化为一个可视化菜单。因此，我们需要创建应用。\n\n#### 应用管理\n\n<img src=\"https://i.loli.net/2021/11/18/pWL8mh9OJRBlM6S.png\" alt=\"应用管理\" style=\"zoom:33%;\" />\n\n##### 新建应用\n\n<img src=\"https://i.loli.net/2021/11/18/plWQsOaqBEXfDiZ.png\" alt=\"新建应用\" style=\"zoom:33%;\" />\n\n如果已经新建，忽略这一步，直接看下一步\n\n##### 表单管理\n\n<img src=\"https://i.loli.net/2021/11/18/H9P6Q52YyogXJpv.png\" alt=\"表单管理\" style=\"zoom:33%;\" />\n\n##### 添加表单\n\n<img src=\"https://i.loli.net/2021/11/18/PxNZgYs3kThuOXm.png\" alt=\"添加表单\" style=\"zoom:33%;\" />\n\n<img src=\"https://i.loli.net/2021/11/18/gqHS6Pa2sfwuWL7.png\" alt=\"添加表单\" style=\"zoom:33%;\" />\n\n##### 配置详细表单信息\n\n表单添加完成保存后，点击`编辑`\n\n##### 表单组件\n\n<img src=\"https://i.loli.net/2021/11/18/ZG6rx4kbnO9DgSm.png\" alt=\"表单组件\" style=\"zoom:33%;\" />\n\n<img src=\"https://i.loli.net/2021/11/18/AC2ELx3FleTGUuJ.png\" alt=\"表单组件\" style=\"zoom:33%;\" />\n\n##### 编辑表格\n\n<img src=\"https://i.loli.net/2021/11/18/suB5HE7ombdMk19.png\" alt=\"第一步\" style=\"zoom:33%;\" />\n\n<img src=\"https://i.loli.net/2021/11/18/Sw68WXPEzGJfpDs.png\" alt=\"第二部\" style=\"zoom:33%;\" />\n\n<img src=\"https://i.loli.net/2021/11/18/5WIPD9suYgXkrVb.png\" alt=\"第三步\" style=\"zoom:33%;\" />\n\n##### 表单操作\n\n<img src=\"https://i.loli.net/2021/11/18/d5QLGURXys9heEp.png\" alt=\"表单操作\" style=\"zoom:33%;\" />\n\n假设这里我们给表单加上一个`新建`的按钮，配置如下：\n\n<img src=\"https://i.loli.net/2021/11/18/FTVkvKOScflowdX.png\" alt=\"表单操作\" style=\"zoom:33%;\" />\n\n至此，我们可以点击表单预览看到我们设计好的界面原型：\n\n<img src=\"https://i.loli.net/2021/11/18/w65JHzbqteNAQrk.png\" alt=\"表单预览\" style=\"zoom:33%;\" />\n\n<img src=\"https://i.loli.net/2021/11/18/IDtQ3JUzc7nMK14.png\" alt=\"表单预览\" style=\"zoom:33%;\" />\n\n至此，应用管理部分已完成。接下来我们需要把我们设计好的工程导出至本地。\n\n#### 生成工程\n\n##### 生成工程\n\n点击`生成工程`，生成好的工程结构如下：\n\n<img src=\"https://i.loli.net/2021/11/18/Dlh1BfZYyE8dFzL.png\" alt=\"工程结构\" style=\"zoom:50%;\" />\n\n其中，`dist_app`为后端工程目录，`web-project`为前端工程目录。\n\n##### 运行`SQL`脚本\n\n在工程的`admin-project/dist_app/zz-resource/db-scripts`中有4个`SQL`脚本，咱们需要运行第1、2、4个。\n\n![SQL](https://i.loli.net/2021/11/19/yLh8QoNVzUO6jwv.png)\n\n**注意**：如果这不是你第一次生成工程，直接运行这三个脚本的话，原本数据库的数据会被清空，因为这三个脚本执行的操作大多都是删除表格重建的过程。因此，如果你不想丢失之前的数据，你可以用官方提供的文本对比工具（[下载地址](http://1.85.39.141:86/nextcloud/index.php/s/jdZPCDMnPifMgdD)）将最新版和最近一版的`SQL`脚本进行对比，然后执行所有的`新增`代码既可。\n\n![工具截图](https://i.loli.net/2021/11/19/Tkuv4RPo2td7IWQ.png)\n\n##### 信息配置\n\n`dist_app/application-webadmin/src/main/resources/application.yml`\n\n配置数据库信息\n\n<img src=\"https://i.loli.net/2021/11/18/VTP1JjXpOgeuZct.png\" alt=\"数据库信息\" style=\"zoom:50%;\" />\n\n配置`redis`信息\n\n<img src=\"https://i.loli.net/2021/11/18/jYsdvryz4ZVg7GA.png\" alt=\"redis\" style=\"zoom: 80%;\" />\n\n后端运行：运行`WebAdminApplication`\n\n前端运行：（`npm install`）`npm run dev`\n\n#### 效果\n\n![登录页面](https://i.loli.net/2021/11/19/iDEuHIa2rdB86q9.png)\n\n![菜单](https://i.loli.net/2021/11/19/gRCO94kNfjFADlb.png)\n\n![新增](https://i.loli.net/2021/11/19/SnAUYLM97WEVOo1.png)\n\n接下来，我们继续研究[主子表的配置](http://www.garfielder.com/post/85295113.html)。\n","tags":["橙单"],"categories":["记录","橙单"]},{"title":"Nextcloud挂载外部磁盘","url":"/post/aa7dcd5c.html","content":"\n### 挂载磁盘\n\n第一步请参考[本文](http://www.garfielder.com/post/474f95fc.html)，完成文中所有步骤之后进行下一步操作。\n\n### `Nextcloud`设置\n\n#### 开启应用\n\n点击右上角->应用，开启此应用`External storage support`：\n\n<img src=\"https://i.loli.net/2021/11/15/M3ZiD6XNRP7mEwd.png\" alt=\"开启应用\" style=\"zoom: 50%;\" />\n\n#### 配置\n\n然后右上角->设置->外部存储，配置挂载磁盘的路径，同时外部存储字段选择本地\n\n![配置](https://i.loli.net/2021/11/15/zWwO751iMVyXJTL.png)\n\n#### 验证测试\n\n这个时候你便可以在主菜单->外部存储或全部文件中看到`本地`目录，这就是我们刚刚挂载的磁盘。\n\n![挂载](https://i.loli.net/2021/11/15/BP5t38Hgdf76JXe.png)\n","tags":["知识","nextcloud"],"categories":["nextcloud"]},{"title":"VMWare模拟CentOS挂载磁盘场景","url":"/post/474f95fc.html","content":"\n#### 在虚拟机中添加磁盘\n\n点击`编辑虚拟机设置`。\n\n<img src=\"https://i.loli.net/2021/11/11/n7ZVeDW529KuR4H.png\" alt=\"编辑虚拟机设置\" style=\"zoom: 50%;\" />\n\n点击`添加->硬盘`，然后一路默认即可。\n\n<img src=\"https://i.loli.net/2021/11/11/1zlbC45mMaSPQTd.png\" alt=\"添加硬盘\" style=\"zoom:50%;\" />\n\n我给自己分配一个8GB的硬盘进行测试。\n\n<img src=\"https://i.loli.net/2021/11/11/Ank85PaYvflod9B.png\" alt=\"硬盘\" style=\"zoom:50%;\" />\n\n然后，开启虚拟机，连接服务器（推荐`Xshell`）。\n\n#### 开始挂载\n\n##### 查看当前挂载信息\n\n输入`fdisk -l`可以看到我们这块磁盘。\n\n<img src=\"https://i.loli.net/2021/11/11/zbqe16o3Ods45TY.png\" alt=\"fdisk-l\" style=\"zoom:50%;\" />\n\n##### 创建分区\n\n`fdisk /dev/sdc`\n\n然后依次输入n（新建分区）、p（默认分区）、选择分区号（我这里选1，所以输入1）、两个回车选择起始分区和结束分区（默认选择一整块）、w（保存设置并退出）。\n\n<img src=\"https://i.loli.net/2021/11/11/pnKrH4FPOautsUS.png\" alt=\"设置\" style=\"zoom:50%;\" />\n\n##### 查看分区情况\n\n输入`cat /proc/partitions`\n\n<img src=\"https://i.loli.net/2021/11/11/3FuQI9hqSiGv76t.png\" alt=\"分区情况\" style=\"zoom:50%;\" />\n\n##### 格式化分区\n\n`mkfs -t ext3 /dev/sdc1`\n\n<img src=\"https://i.loli.net/2021/11/11/MbjmJ3sQ6UIOF1X.png\" alt=\"格式化分区\" style=\"zoom:50%;\" />\n\n##### 创建挂载目录\n\n在/目录下创建一个名为`guazai`的目录，并且将刚才创建好的格式化的`sdc1`挂载到`/guazai`目录下\n\n`mount /dev/sdc1 /guazai`\n\n##### 查看挂载情况\n\n`df -h`\n\n<img src=\"https://i.loli.net/2021/11/11/DGYLnV3aJyg8K6c.png\" alt=\"查看\" style=\"zoom:50%;\" />\n\n说明挂载成功。\n\n如果想要取消挂载，输入`umount /guazai`\n\n#### 开机自动挂载\n\n直到上一步，如果我们这时候重启服务器会发现，并没有挂载成功，这是因为我们没有设置开机自动挂载。有这个需求的话可以参考下列步骤：\n\n输入`vim /etc/fstab`，在文件的最后一行增加一行代码（格式可以参考文件中已有的格式）：\n\n`/dev/sdc1 /guazai ext3 defaults 0 0`\n\n<img src=\"https://i.loli.net/2021/11/11/dF8cfhPiL6HltR3.png\" alt=\"开机自动挂载\" style=\"zoom:67%;\" />\n\n或者使用`UUID`的方法来挂载：\n\n首先使用命令`blkid -s UUID /dev/sdc1`来查看磁盘分区`UUID`：\n\n<img src=\"https://i.loli.net/2021/11/15/ZExK2NkRgC54qoc.png\" alt=\"UUID\" style=\"zoom: 67%;\" />\n\n然后按照格式填写在`/etc/fstab`中：\n\n<img src=\"https://i.loli.net/2021/11/15/oHuZXL3ex26gdFC.png\" alt=\"fstab\" style=\"zoom:67%;\" />\n\n至此，服务器端的配置已完成。\n","tags":["Linux","VMWare"],"categories":["Linux"]},{"title":"JMeter入门","url":"/post/46b8f03d.html","content":"\n### 关于`Jmeter`\n\n`Apache JMeter`是Apache组织开发的基于Java的压力测试工具。用于对软件做压力测试，它最初被设计用于Web应用测试，但后来扩展到其他测试领域。\n\n### 安装`Jmeter`\n\n本文将以`Windows10`为例。\n\n#### 下载\n\n进入[官网](http://jmeter.apache.org/download_jmeter.cgi)下载压缩包到本地：\n\n<img src=\"https://i.loli.net/2021/11/11/FNweluxHPVjU1hY.png\" alt=\"下载\" style=\"zoom: 50%;\" />\n\n#### 安装及运行\n\n将压缩包解压到本地即可。运行时，只需点击`bin`目录下的`jmeter.bat`即可启动`Jmeter`。\n\n<img src=\"https://i.loli.net/2021/11/11/wjiFn7kJGAX6DlB.png\" alt=\"运行\" style=\"zoom:50%;\" />\n\n启动后可以看到一个Java编写的图形界面。\n\n<img src=\"https://i.loli.net/2021/11/11/MWKNrO7gJEh2QR4.png\" alt=\"Jmeter\" style=\"zoom:50%;\" />\n\n### 一个简单的测试样例\n\n假如我们现在有一个`http`请求接口：`http://10.2.0.40:82/prod-api/qljsystem/qljcontract/list?pageNum=1&pageSize=10&createUser=admin&deleteFlag=0`，要使用`Jmeter`对其进行压力测试，步骤如下：\n\n#### 新建一个线程组\n\n<img src=\"https://i.loli.net/2021/11/11/gnCYLSp3MZEOroc.png\" alt=\"线程组\" style=\"zoom:50%;\" />\n\n#### 设置线程组参数\n\n这里配置为：100个线程，同时启动，循环10次。\n\n<img src=\"https://i.loli.net/2021/11/11/49sdWxC6MpRGVyu.png\" alt=\"参数\" style=\"zoom:50%;\" />\n\n#### 新增`http`请求默认值\n\n在上一步创建的线程组上，新增`http`请求默认值，所有的请求都会使用设置的默认值，这设置协议为`http`，IP为`10.2.0.40`，端口为`82`。\n\n<img src=\"https://i.loli.net/2021/11/11/5ak2NHrRMoPZU13.png\" alt=\"请求\" style=\"zoom:50%;\" />\n\n<img src=\"https://i.loli.net/2021/11/11/xZj3qpFCDeYGgrQ.png\" alt=\"请求设置\" style=\"zoom:50%;\" />\n\n#### 添加要压力测试的`http`请求\n\n<img src=\"https://i.loli.net/2021/11/11/G4yAvwM7bqhzxUj.png\" alt=\"请求\" style=\"zoom:50%;\" />\n\n下图第一个红框内的协议、IP、端口不需要设置，会使用上一步骤中设置的默认值，只需设置请求路径`Path`即可。由于我们的接口带有参数，因此这里填入`/prod-api/qljsystem/businessplan/listBusiness`，然后在下面填入参数（可以直接从剪贴板导入）。\n\n<img src=\"https://i.loli.net/2021/11/11/RTSE3ZujYlULdwK.png\" alt=\"参数\" style=\"zoom:50%;\" />\n\n#### 新增监听器，用于查看压力测试结果\n\n这里添加三种：聚合报告、图形结果、用表格查看结果，区别在于结果展现形式不同。\n\n<img src=\"https://i.loli.net/2021/11/11/TdHLsZYJQgwUAMq.png\" alt=\"监听器\" style=\"zoom:50%;\" />\n\n#### 开始测压\n\n点击运行按钮开始压力测试，并查看结果\n\n<img src=\"https://i.loli.net/2021/11/11/ePk2gAQar4zhF6t.png\" alt=\"运行\" style=\"zoom:50%;\" />\n\n#### 查看结果\n\n<img src=\"https://i.loli.net/2021/11/11/2HQoy8aMth51gdk.png\" alt=\"结果\" style=\"zoom:50%;\" />\n","tags":["Jmeter"],"categories":["记录","Jmeter"]},{"title":"Vue动态控制el-table表格列隐藏与显示","url":"/post/3ca8953c.html","content":"\n### 背景\n\n对于一张el-table，有时候为了看到更多有用信息，会想要隐藏掉某些不重要的列，好让更多有用信息集中在一页中。这个时候我们需要动态控制部分列的显示与隐藏。\n\n### 如何实现\n\n#### 定义一个控制按钮\n\n```html\n<el-popover width=\"60\" trigger=\"click\" placement=\"right-end\">\n  <el-checkbox-group v-model=\"columnSelect\">\n    <el-checkbox v-for=\"item in columnHeaders\" :label=\"item.title\" :key=\"item.title\"></el-checkbox>\n  </el-checkbox-group>\n  <el-button slot=\"reference\" icon=\"el-icon-more\" circle style=\"margin-left: 100px;\"></el-button>\n</el-popover>\n```\n\n其中，`v-model`绑定了默认选择显示的列，`v-for`对应了所有可选的列，定义如下：\n\n```javascript\ncolumnHeaders: [\n  {index: 0, title: \"备注\", isShow: true},\n],\n//已选择的项\ncolumnSelect: [\"备注\"]\n```\n\n#### 表格中选择需要控制的列\n\n```html\n<el-table-column v-if=\"columnHeaders[0].isShow\" label=\"备注\" align=\"center\" prop=\"remark\" width=\"150\"/>\n```\n\n同时，给表格一个ref：`ref=\"dataTable\"`\n\n效果如下：\n\n<img src=\"https://i.loli.net/2021/11/10/KFU7hVqG8mx5kv9.png\" alt=\"效果\" style=\"zoom: 67%;\" />\n\n#### 数据绑定与监听\n\n定义`watch`：\n\n```javascript\nwatch: {\n  /**\n   * @title 监听列显示隐藏\n   */\n  columnSelect(newArrayVal) {\n    // 计算为被选中的列标题数组\n    const nonSelect = this.columnHeaders\n      .filter(item => newArrayVal.indexOf(item.title) === -1)\n      .map(item => item.title);\n    // 根据计算结果进行表格重绘\n    this.columnHeaders.filter(item => {\n      let isNonSelected = nonSelect.indexOf(item.title) !== -1\n      if (isNonSelected) {\n        // 隐藏未选中的列\n        item.isShow = false\n        this.$nextTick(() => {\n          this.$refs.dataTable.doLayout()\n        })\n      } else {\n        // 显示已选中的列\n        item.isShow = true\n        this.$nextTick(() => {\n          this.$refs.dataTable.doLayout()\n        })\n      }\n    })\n  }\n},\n```\n\n监听到已选择和未选择的列，调用`doLayout()`方法对表格进行重绘。\n\n### 效果\n\n<img src=\"https://i.loli.net/2021/11/10/wP4uHYLhrxp6IoM.png\" alt=\"效果\" style=\"zoom: 67%;\" />\n","tags":["ElementUI","Vue"],"categories":["记录","ElementUI","Vue"]},{"title":"MySQL 条件查询进阶","url":"/post/dca2e6d7.html","content":"\n### 背景\n\n假如有一张表Table，有字段A、B，现在有需求如下：如果字段A为空，那么我将执行查询语句`SQL1`；如果字段A不为空，那么我将执行查询语句`SQL2`。\n\n### 如何实现\n\n#### 思路\n\n由于会根据某字段的内容来执行不同的`SQL`语句，那么就可以使用流程条件查询。`MySQL`支持的流程条件查询有`if...else...`和`case... when...`，这里我们选择后者。\n\n其次，对于我们要查询的表进行一定的处理，在查询的时候新增一个临时字段`temp`，针对字段A的内容分别给临时字段赋值0、1、2或其他。\n\n最后，我们在上一步的查询结果中根据临时字段`temp`来查询即可得到想要的结果。\n\n#### 实例实现\n\n现在有一张表，如果字段`sendSupplier_time`为空，说明这条数据没有被推送；若不为空，说明这条数据已被推送。现在，我想要查询所有未被推送的数据。\n\n```mysql\nSELECT * FROM\n\t( SELECT *, \n     CASE WHEN sendSupplier_time IS NULL THEN 0 ELSE 1 END AS isSend \n     FROM qlj_businessplan ) AS a \nWHERE\n\ta.isSend = 0;\n```\n\n#### 简单分析\n\n1. case...when...then...\n\n   当`sendSupplier_time`为空，给临时字段`isSend`赋值0，反之赋值1。\n\n2. 需要给括号中的查询结果给一个表名称（如上面代码的`AS a`），否则会报错。\n\n#### 结果\n\n<img src=\"https://i.loli.net/2021/11/09/BiQdOZtwSz9oNuq.png\" alt=\"结果\" style=\"zoom:67%;\" />\n\n\n\n","tags":["MySQL"],"categories":["记录","MySQL"]},{"title":"若依平台自定义全局变量this.$store.state","url":"/post/c32f11c8.html","content":"\n### 背景\n\n在初次使用若依框架时，我们可以通过使用`this.$store.state.user.name`来获取当前登陆用户的`user_name`字段信息（详见下表`sys_user`）。\n\n![sys_user](https://i.loli.net/2021/11/03/VWznUPCHtGcO618.png)\n\n但是框架自带的可获取变量是有限的，比如我们就没有办法获取到`nick_name`。因此，我们就需要自定义全局变量`this.$store.state`。\n\n### 分析\n\n#### 全局变量的保存位置\n\n全局变量文件保存在文件`ruoyi-ui/src/store/index.js`中，其中，`modules`中的变量是我们可以访问的全局变量\n\n![index.js](https://i.loli.net/2021/11/03/A6iL1dWyfNFDMrs.png)\n\n而`modules`中的变量其实就是一个个`js`文件，并且就保存在当前目录下的`modules`文件夹下\n\n<img src=\"https://i.loli.net/2021/11/03/9CixGUTINsrH7tS.png\" alt=\"mudules\" style=\"zoom:50%;\" />\n\n我们打开`user.js`文件，阅读代码后，如果需要添加一个`nick_name`的全局变量，我们只需要这么做。\n\n### 如何实现\n\n#### 给`state`添加变量\n\n<img src=\"https://i.loli.net/2021/11/03/GS9Ix4KJBdPOjgW.png\" alt=\"state\" style=\"zoom:67%;\" />\n\n#### 添加`mutations`\n\n<img src=\"https://i.loli.net/2021/11/03/tKkD6fO8QWuIwRA.png\" alt=\"mutations\" style=\"zoom:67%;\" />\n\n#### 添加`commit`语句\n\n<img src=\"https://i.loli.net/2021/11/03/YPxq9ykfeX1UvE3.png\" alt=\"commit\" style=\"zoom: 67%;\" />\n\n需要注意函数名要对应。\n\n### 效果\n\n至此，所有步骤完成，以后如果我们想要在前端直接获取当前登录用户的`nick_name`，只需这一条代码即可：\n\n```js\nthis.$store.state.user.nickname\n```\n\n","tags":["若依","Vue"],"categories":["记录","框架","若依"]},{"title":"pyinstaller+NSIS将Python代码转换成安装包","url":"/post/90c1015.html","content":"\n### 背景\n\n我们写了一个可以运行的Python软件代码，通过启动代码来运行。但是我们希望我们可以将代码生成一个安装包，就像大部分安装包一样，直接安装就可以使用。\n\n### 准备\n\n`Python`环境，`pyinstaller`库，`NSIS`工具\n\n#### 生成`exe`文件\n\n需要用到`pyinstaller`库，安装过程省略，使用如下：进入代码所在目录\n\n```shell\npyinstaller -Fw -i test.ico test.py\n```\n\n其中：`-F`代表生成的是一个可执行文件，`-w`代表当程序启动时不打开命令行，`-i`代表生成的可执行文件可以自定义icon，参数后面跟上对应的icon文件。更详细的参数用法可以参考[本文](https://blog.csdn.net/jirryzhang/article/details/78881512)\n\n<img src=\"https://i.loli.net/2021/10/14/Qed4k1mp5vSgthP.png\" alt=\"成功界面\"  />\n\n会生成如下图的文件夹\n\n![文件夹](https://i.loli.net/2021/10/14/3atPArOodXe6c9T.png)\n\n#### 使用`NSIS`工具生成脚本\n\n下载地址：http://1.85.39.141:86/nextcloud/index.php/s/MarQHb99QFZ26tP\n\n<img src=\"https://i.loli.net/2021/10/14/XeTFIGlY5UBS3ZD.png\" alt=\"NSIS\"  />\n\n##### 修改配置\n\n`NSIS->配置`，然后做出如下修改，文件路径要对应\n\n<img src=\"https://i.loli.net/2021/10/14/gZdXT7Uwbs5qM6B.png\" alt=\"配置\"  />\n\n##### 新建脚本->向导\n\n<img src=\"https://i.loli.net/2021/10/14/AB1rlEI82ceZNRo.png\" alt=\"新建脚本：向导\"  />\n\n##### 自定义软件信息\n\n<img src=\"https://i.loli.net/2021/10/14/Zbkv5NxOzaUVshT.png\" alt=\"软件信息\"  />\n\n##### 选择中文界面\n\n<img src=\"https://i.loli.net/2021/10/14/MpWuyVFoz1OEJ9A.png\" alt=\"中文\"  />\n\n##### 选择授权文件\n\n<img src=\"https://i.loli.net/2021/10/14/kulGWDHRpF96LJA.png\" alt=\"选择授权文件\"  />\n\n##### 添加文件和目录\n\n如图，添加刚刚生成的`.exe`文件和`dist`目录\n\n<img src=\"https://i.loli.net/2021/10/14/X2alOJzWjFpdnGc.png\" alt=\"添加文件和目录\"  />\n\n然后一路下一步\n\n##### 保存并编译脚本\n\n<img src=\"https://i.loli.net/2021/10/14/vm8yWtjOxUfTAXG.png\" alt=\"保存并编译脚本\"  />\n\n<img src=\"https://i.loli.net/2021/10/14/h2j5ZEnbVaszUkW.png\" alt=\"编译界面\"  />\n\n<img src=\"https://i.loli.net/2021/10/14/xCQUJKklFBh54jS.png\" alt=\"成功界面\"  />\n\n##### 安装包可以安装了\n\n<img src=\"https://i.loli.net/2021/10/14/ZPs3AuBqnaVfmgJ.png\" alt=\"可以安装了\"  />\n\n","tags":["Python","NSIS"],"categories":["记录","Python"]},{"title":"Windows远程桌面mstsc","url":"/post/48ace401.html","content":"\n#### Windows远程桌面\n\n`Win` + `R`，输入`mstsc`，然后输入远程服务器的信息，即可连接。\n\n<img src=\"https://i.loli.net/2021/10/14/2fwmXJtoxlGOLgW.png\" alt=\"连接\"  />\n\n#### 如何实现复制粘贴\n\n实现本地和服务器之间复制粘贴文本、文件，操作如下：\n\n##### 勾选剪贴板\n\n`本地资源`->`本地设备和资源`->`剪贴板`，勾选\n\n<img src=\"https://i.loli.net/2021/10/14/pEB7oFXTOfPAs8K.png\" alt=\"剪贴板\"  />\n\n#### 无法复制粘贴的解决办法\n\n如果完成了上面一步的配置还是无法复制粘贴，继续下面的操作。\n\n##### 重启远程服务器的`rdpclip.exe`进程\n\n打开资源管理器，杀掉`rdpclip.exe`进程\n\n<img src=\"https://i.loli.net/2021/10/12/kr6niK2mgtIOAB8.png\" alt=\"杀进程\"  />\n\n`Win` + `R`，输入`rdpclip.exe`，回车重启该进程\n\n<img src=\"https://i.loli.net/2021/10/14/NUqCyVmfo5szecW.png\" alt=\"重启进程\" style=\"zoom:;\" />\n\n此时不出意外就可以复制粘贴文件文本了。\n","tags":["win10","mstsc"],"categories":["记录","Windows"]},{"title":"Vue + ElementUI之前端导出Excel表格","url":"/post/20c1b8fc.html","content":"\n### 表格导出\n\n#### 安装依赖\n\n```shell\nnpm install --save xlsx file-saver\n```\n\n#### 导入依赖\n\n```javascript\nimport FileSaver from \"file-saver\";\nimport XLSX from \"xlsx\";\n```\n\n#### 给你的el-table一个标识\n\n```javascript\n<el-table\n  border\n  id=\"saleTable\"\n  v-loading=\"loading\"\n  :data=\"qljProductList\"\n  @selection-change=\"handleSelectionChange\"\n  :span-method=\"objectSpanMethod\"\n>\n```\n\n比如这里给出一个`id=\"saleTable\"`，后面我们就使用`document.querySelector`来找到该表格下的数据\n\n#### 定义导出方法\n\n```html\n<el-button size=\"mini\" @click=\"handleExportElTable\">导出</el-button>\n```\n\n```javascript\n// 纯前端导出Excel表格\nhandleExportElTable() {\n  //  .table要导出的是哪一个表格\n  const wb = XLSX.utils.table_to_book(document.querySelector(\"#saleTable\"));\n  const wbOut = XLSX.write(wb, {\n    bookType: \"xlsx\",\n    bookSST: true,\n    type: \"array\"\n  });\n  try {\n    FileSaver.saveAs(\n      new Blob([wbOut], {type: \"application/octet-stream\"}),\n      \"未命名\" + \".xlsx\"\n    );\n  } catch (e) {\n    if (typeof console !== \"undefined\") console.log(e, wbOut);\n  }\n  return wbOut;\n},\n```\n\n#### 效果展示\n\n##### 系统界面\n\n![前端导出Excel](https://i.loli.net/2021/09/22/1PwIVeR8XQiZv24.gif)\n\n##### 导出界面\n\n![导出Excel表格界面](https://i.loli.net/2021/09/22/lGSKoVqIMLAEi1F.gif)\n\n### 自定样式\n\n使用`xlsx-style`\n\n#### 安装`xlsx-style`\n\n```shell\nnpm install xlsx-style --save\n```\n\n#### 修改`xlsx-style`源码防止报错\n\n在`ruoyi-ui\\node_modules\\xlsx-style\\dist\\cpexcel.js`中做出如下修改：\n\n将`var cpt = require('./cpt' + 'able');`改为`var cpt = cptable;`\n\n#### Vue中的核心代码\n\n```javascript\n// 导入依赖\nimport XLSXS from \"xlsx-style\"\n\n// 使用xlsx-style 去写入\nconst wb = XLSX.utils.table_to_book(document.querySelector(\"#Table\"), {sheet: 'SHEETJS'});\nthis.setExlStyle(wb['Sheets']['SHEETJS']);\nconst wbOut = XLSXS.write(wb, {\n    bookType: \"xlsx\",\n    bookSST: true,\n    type: \"buffer\"\n})\n\n// 定义样式函数, 我这里设置单元格文本水平、垂直居中\nsetExlStyle(data) {\n  data['!cols'] = [];\n  for (let key in data) {\n    if (data.hasOwnProperty(key)) {\n      if (data[key] instanceof Object) {\n        data[key].s = {\n          alignment: {\n            horizontal: 'center',\n            vertical: 'center'\n          },\n          font: {\n            sz: 11\n          },\n          bold: true,\n          numFmt: 0\n        }\n        data['!cols'].push({wpx: 115});\n      }\n    }\n  }\n  return data;\n},\n```\n\n其中，单元格对象的属性如下：\n\n`v`：原始值\n\n`w`：格式化文本\n\n`t`：单元格类型：`b`：Boolean，`n`：Number，`e`：error，`s`：String，`d`：Date\n\n`f`：单元格公式\n\n`r`：富文本编码\n\n`h`：富文本的`HTML`渲染\n\n`c`：与单元格关联的注释\n\n`z`：与单元格关联的数字格式字符串\n\n`l`：单元格超链接对象\n\n`s`：单元格的样式/主题\n\n#### 效果\n\n![效果](https://i.loli.net/2021/09/23/zJibyPhsuDogneY.png)\n\n### 问题记录\n\n#### 导出表格出现重复数据\n\n##### 原因\n\n如果`element-ui`的`el-table`使用了`fixed`属性固定列，导出表格时会出现导出两次的问题，是因为在`el-table`中有两个table标签。\n\n##### 解决方案\n\n```javascript\nlet table = document.querySelector(\"#\"+tableID).cloneNode(true);\n// 因为element-ui的表格的fixed属性导致多出一个table，会下载重复内容，这里删除掉\ntable.removeChild(table.querySelector(\".el-table__fixed\"))\nlet wb = XLSX.utils.table_to_book(table, {raw:true});\n```\n\n","tags":["ElementUI","若依","Vue"],"categories":["记录","ElementUI","Vue"]},{"title":"Element-UI学习","url":"/post/e7e8a548.html","content":"\n### Tree 树形控件\n\n#### 一键展开 / 折叠\n\n##### 定义按钮\n\n```html\n<el-button plain type=\"success\" @click=\"expandAll\" size=\"mini\">展开所有菜单</el-button>\n<el-button plain type=\"warning\" @click=\"collapseAll\" size=\"mini\">收起所有菜单</el-button>\n```\n\n##### 定义展开 / 折叠方法\n\n```javascript\n// 展开\nexpandAll() {\n  for (let i = 0; i < this.$refs.tree.store._getAllNodes().length; i++) {\n    this.$refs.tree.store._getAllNodes()[i].expanded = true;\n  }\n},\n// 折叠\ncollapseAll() {\n  for (let i = 0; i < this.$refs.tree.store._getAllNodes().length; i++) {\n    this.$refs.tree.store._getAllNodes()[i].expanded = false;\n  }\n},\n\n```\n\n##### 效果\n\n<img src=\"https://i.loli.net/2021/09/03/mPAvzshQUJ5GNao.gif\" alt=\"一键展开折叠\" style=\"zoom: 67%;\" />\n","tags":["知识","ElementUI"],"categories":["记录","ElementUI"]},{"title":"iText之PDF添加页码","url":"/post/da01de8.html","content":"\n#### 重写事件\n\n由于我的这个项目是基于[`ruoyi`](http://doc.ruoyi.vip/ruoyi-vue/)框架实现，因此我在`RuoYi-Vue/ruoyi-common/src/main/java/com/ruoyi/common/utils/pdf`目录下新建`PdfPageXofYEventHelper.java`，并添加代码如下：\n\n```java\npackage com.ruoyi.common.utils.pdf;\n\nimport com.itextpdf.text.Document;\nimport com.itextpdf.text.DocumentException;\nimport com.itextpdf.text.ExceptionConverter;\nimport com.itextpdf.text.pdf.*;\n\nimport java.io.IOException;\n\npublic class PdfPageXofYEventHelper extends PdfPageEventHelper {\n    public PdfTemplate total;\n\n    public BaseFont baseFont;\n\n    /**\n     * 重写PdfPageEventHelper中的onOpenDocument方法\n     */\n    @Override\n    public void onOpenDocument(PdfWriter writer, Document document) {\n        // 得到文档的内容并为该内容新建一个模板\n        total = writer.getDirectContent().createTemplate(500, 500);\n        try {\n            baseFont = BaseFont.createFont(\"STSong-Light\", \"UniGB-UCS2-H\", BaseFont.NOT_EMBEDDED);\n        } catch (Exception e) {\n            throw new ExceptionConverter(e);\n        }\n    }\n\n    /**\n     * 重写PdfPageEventHelper中的onEndPage方法\n     */\n    @Override\n    public void onEndPage(PdfWriter writer, Document document) {\n        // 新建获得用户页面文本和图片内容位置的对象\n        PdfContentByte pdfContentByte = writer.getDirectContent();\n        // 保存图形状态\n        pdfContentByte.saveState();\n        String text = \"第 \" + writer.getPageNumber() + \" 页, 共 \";\n        // 获取点字符串的宽度\n        float textSize = baseFont.getWidthPoint(text, 9);\n        pdfContentByte.beginText();\n        // 设置随后的文本内容写作的字体和字号\n        pdfContentByte.setFontAndSize(baseFont, 9);\n\n        // 定位'X/'\n        float x = (float) ((document.right() + document.left()) / 2.2);\n//        float x = document.right();\n        float y = 20f;\n        pdfContentByte.setTextMatrix(x, y);\n        pdfContentByte.showText(text + \"   页\");\n        pdfContentByte.endText();\n\n        // 将模板加入到内容（content）中- // 定位'Y'\n        pdfContentByte.addTemplate(total, x + textSize, y);\n\n        pdfContentByte.restoreState();\n    }\n\n    /**\n     * 重写PdfPageEventHelper中的onCloseDocument方法\n     */\n    @Override\n    public void onCloseDocument(PdfWriter writer, Document document) {\n        total.beginText();\n        try {\n            baseFont = BaseFont.createFont(\"STSong-Light\", \"UniGB-UCS2-H\", BaseFont.NOT_EMBEDDED);\n            total.setFontAndSize(baseFont, 9);\n        } catch (DocumentException | IOException e) {\n            e.printStackTrace();\n        }\n        total.setTextMatrix(0, 0);\n        // 设置总页数的值到模板上，并应用到每个界面\n        total.showText(String.valueOf(writer.getPageNumber()));\n        total.endText();\n    }\n}\n\n```\n\n#### 代码中调用\n\n```java\n// 1.新建document对象\ndocument = new Document(PageSize.A4);\n// 2.建立一个书写器(Writer)与document对象关联，通过书写器(Writer)可以将文档写入到磁盘中。\nwriter = PdfWriter.getInstance(document, os);\n\n//--------------------------页码添加---------------------------\n// 设置页面布局\nwriter.setViewerPreferences(PdfWriter.PageLayoutOneColumn);\n// 为这篇文档设置页面事件(X/Y)\nwriter.setPageEvent(new PdfPageXofYEventHelper());\n//--------------------------页码添加---------------------------\n\n// 3.打开文档\ndocument.open();\n```\n\n#### 效果\n\n![XOfY](https://i.loli.net/2021/09/06/3gPRrvwZCBoh1jz.png)\n","tags":["iText","Java"],"categories":["记录","iText","Java"]},{"title":"iText入门手册","url":"/post/2b3e24ae.html","content":"\n### 介绍\n\n`iText`是著名的开放项目，是用于生成`PDF`文档的一个`Java`类库。通过`iText`不仅可以生成`PDF`或`rtf`的文档，而且可以将`XML`、`Html`文件转化为`PDF`文件。访问[官网](http://itextpdf.com/)。\n\n### 入门教程\n\n#### 生成一个`PDF`\n\n```java\n//Step 1—Create a Document.  \nDocument document = new Document();  \n//Step 2—Get a PdfWriter instance.  \nPdfWriter.getInstance(document, new FileOutputStream(FILE_DIR + \"createSamplePDF.pdf\")); \n\n//Step 3—Open the Document.  \ndocument.open();  \n//Step 4—Add content.  \ndocument.add(new Paragraph(\"Hello World\"));  \n//Step 5—Close the Document.  \ndocument.close();  \n```\n\n#### 页面大小、页面背景色、页边空白、Title、Author、Subject、Keywords\n\n```java\n//页面大小  \nRectangle rect = new Rectangle(PageSize.B5.rotate());  \n//页面背景色  \nrect.setBackgroundColor(BaseColor.ORANGE);  \n  \nDocument doc = new Document(rect);  \n  \nPdfWriter writer = PdfWriter.getInstance(doc, out);  \n  \n//PDF版本(默认1.4)  \nwriter.setPdfVersion(PdfWriter.PDF_VERSION_1_2);  \n  \n//文档属性  \ndoc.addTitle(\"Title@sample\");  \ndoc.addAuthor(\"Author@rensanning\");  \ndoc.addSubject(\"Subject@iText sample\");  \ndoc.addKeywords(\"Keywords@iText\");  \ndoc.addCreator(\"Creator@iText\");  \n  \n//页边空白  \ndoc.setMargins(10, 20, 30, 40);  \n  \ndoc.open();  \ndoc.add(new Paragraph(\"Hello World\"));\n```\n\n#### 设置密码\n\n```java\nPdfWriter writer = PdfWriter.getInstance(doc, out);  \n  \n// 设置密码为：\"World\"  \nwriter.setEncryption(\"Hello\".getBytes(), \"World\".getBytes(),  \n        PdfWriter.ALLOW_SCREENREADERS,  \n        PdfWriter.STANDARD_ENCRYPTION_128);  \n  \ndoc.open();  \ndoc.add(new Paragraph(\"Hello World\"));\n```\n\n#### 添加Page\n\n```java\ndocument.open();  \ndocument.add(new Paragraph(\"First page\"));  \ndocument.add(new Paragraph(Document.getVersion()));  \n  \ndocument.newPage();  \nwriter.setPageEmpty(false);  \n  \ndocument.newPage();  \ndocument.add(new Paragraph(\"New page\"));\n```\n\n#### 添加水印\n\n```java\n//图片水印  \nPdfReader reader = new PdfReader(FILE_DIR + \"setWatermark.pdf\");  \nPdfStamper stamp = new PdfStamper(reader, new FileOutputStream(FILE_DIR  \n        + \"setWatermark2.pdf\"));  \n  \nImage img = Image.getInstance(\"resource/watermark.jpg\");  \nimg.setAbsolutePosition(200, 400);  \nPdfContentByte under = stamp.getUnderContent(1);  \nunder.addImage(img);  \n  \n//文字水印  \nPdfContentByte over = stamp.getOverContent(2);  \nover.beginText();  \nBaseFont bf = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.WINANSI,  \n        BaseFont.EMBEDDED);  \nover.setFontAndSize(bf, 18);  \nover.setTextMatrix(30, 30);  \nover.showTextAligned(Element.ALIGN_LEFT, \"DUPLICATE\", 230, 430, 45);  \nover.endText();  \n  \n//背景图  \nImage img2 = Image.getInstance(\"resource/test.jpg\");  \nimg2.setAbsolutePosition(0, 0);  \nPdfContentByte under2 = stamp.getUnderContent(3);  \nunder2.addImage(img2);  \n  \nstamp.close();  \nreader.close();  \n```\n\n#### 插入Chunk、Phrase、Paragraph、List\n\n```java\n//Chunk对象: a String, a Font, and some attributes  \ndocument.add(new Chunk(\"China\"));  \ndocument.add(new Chunk(\" \"));  \nFont font = new Font(Font.FontFamily.HELVETICA, 6, Font.BOLD, BaseColor.WHITE);  \nChunk id = new Chunk(\"chinese\", font);  \nid.setBackground(BaseColor.BLACK, 1f, 0.5f, 1f, 1.5f);  \nid.setTextRise(6);  \ndocument.add(id);  \ndocument.add(Chunk.NEWLINE);  \n  \ndocument.add(new Chunk(\"Japan\"));  \ndocument.add(new Chunk(\" \"));  \nFont font2 = new Font(Font.FontFamily.HELVETICA, 6, Font.BOLD, BaseColor.WHITE);  \nChunk id2 = new Chunk(\"japanese\", font2);  \nid2.setBackground(BaseColor.BLACK, 1f, 0.5f, 1f, 1.5f);  \nid2.setTextRise(6);  \nid2.setUnderline(0.2f, -2f);  \ndocument.add(id2);  \ndocument.add(Chunk.NEWLINE);  \n  \n//Phrase对象: a List of Chunks with leading  \ndocument.newPage();  \ndocument.add(new Phrase(\"Phrase page\"));  \n  \nPhrase director = new Phrase();  \nChunk name = new Chunk(\"China\");  \nname.setUnderline(0.2f, -2f);  \ndirector.add(name);  \ndirector.add(new Chunk(\",\"));  \ndirector.add(new Chunk(\" \"));  \ndirector.add(new Chunk(\"chinese\"));  \ndirector.setLeading(24);  \ndocument.add(director);  \n  \nPhrase director2 = new Phrase();  \nChunk name2 = new Chunk(\"Japan\");  \nname2.setUnderline(0.2f, -2f);  \ndirector2.add(name2);  \ndirector2.add(new Chunk(\",\"));  \ndirector2.add(new Chunk(\" \"));  \ndirector2.add(new Chunk(\"japanese\"));  \ndirector2.setLeading(24);  \ndocument.add(director2);  \n          \n//Paragraph对象: a Phrase with extra properties and a newline  \ndocument.newPage();  \ndocument.add(new Paragraph(\"Paragraph page\"));  \n  \nParagraph info = new Paragraph();  \ninfo.add(new Chunk(\"China \"));  \ninfo.add(new Chunk(\"chinese\"));  \ninfo.add(Chunk.NEWLINE);  \ninfo.add(new Phrase(\"Japan \"));  \ninfo.add(new Phrase(\"japanese\"));  \ndocument.add(info);  \n  \n//List对象: a sequence of Paragraphs called ListItem  \ndocument.newPage();  \nList list = new List(List.ORDERED);  \nfor (int i = 0; i < 10; i++) {  \n    ListItem item = new ListItem(String.format(\"%s: %d movies\",  \n            \"country\" + (i + 1), (i + 1) * 100), new Font(  \n            Font.FontFamily.HELVETICA, 6, Font.BOLD, BaseColor.WHITE));  \n    List movielist = new List(List.ORDERED, List.ALPHABETICAL);  \n    movielist.setLowercase(List.LOWERCASE);  \n    for (int j = 0; j < 5; j++) {  \n        ListItem movieitem = new ListItem(\"Title\" + (j + 1));  \n        List directorlist = new List(List.UNORDERED);  \n        for (int k = 0; k < 3; k++) {  \n            directorlist.add(String.format(\"%s, %s\", \"Name1\" + (k + 1),  \n                    \"Name2\" + (k + 1)));  \n        }  \n        movieitem.add(directorlist);  \n        movielist.add(movieitem);  \n    }  \n    item.add(movielist);  \n    list.add(item);  \n}  \ndocument.add(list);\n```\n\n#### 插入Anchor、Image、Chapter、Section\n\n```java\n//Anchor对象: internal and external links  \nParagraph country = new Paragraph();  \nAnchor dest = new Anchor(\"china\", new Font(Font.FontFamily.HELVETICA, 14, Font.BOLD, BaseColor.BLUE));  \ndest.setName(\"CN\");  \ndest.setReference(\"http://www.china.com\");//external  \ncountry.add(dest);  \ncountry.add(String.format(\": %d sites\", 10000));  \ndocument.add(country);  \n  \ndocument.newPage();  \nAnchor toUS = new Anchor(\"Go to first page.\", new Font(Font.FontFamily.HELVETICA, 14, Font.BOLD, BaseColor.BLUE));  \ntoUS.setReference(\"#CN\");//internal  \ndocument.add(toUS);  \n  \n//Image对象  \ndocument.newPage();  \nImage img = Image.getInstance(\"resource/test.jpg\");  \nimg.setAlignment(Image.LEFT | Image.TEXTWRAP);  \nimg.setBorder(Image.BOX);  \nimg.setBorderWidth(10);  \nimg.setBorderColor(BaseColor.WHITE);  \nimg.scaleToFit(1000, 72);//大小  \nimg.setRotationDegrees(-30);//旋转  \ndocument.add(img);  \n  \n//Chapter, Section对象（目录）  \ndocument.newPage();  \nParagraph title = new Paragraph(\"Title\");  \nChapter chapter = new Chapter(title, 1);  \n  \ntitle = new Paragraph(\"Section A\");  \nSection section = chapter.addSection(title);  \nsection.setBookmarkTitle(\"bmk\");  \nsection.setIndentation(30);  \nsection.setBookmarkOpen(false);  \nsection.setNumberStyle(  \nSection.NUMBERSTYLE_DOTTED_WITHOUT_FINAL_DOT);  \n  \nSection subsection = section.addSection(new Paragraph(\"Sub Section A\"));  \nsubsection.setIndentationLeft(20);  \nsubsection.setNumberDepth(1);  \n  \ndocument.add(chapter);\n```\n\n#### 画图\n\n```java\n//左右箭头  \ndocument.add(new VerticalPositionMark() {  \n  \n    public void draw(PdfContentByte canvas, float llx, float lly,  \n            float urx, float ury, float y) {  \n        canvas.beginText();  \n        BaseFont bf = null;  \n        try {  \n            bf = BaseFont.createFont(BaseFont.ZAPFDINGBATS, \"\", BaseFont.EMBEDDED);  \n        } catch (Exception e) {  \n            e.printStackTrace();  \n        }  \n        canvas.setFontAndSize(bf, 12);  \n          \n        // LEFT  \n        canvas.showTextAligned(Element.ALIGN_CENTER, String.valueOf((char) 220), llx - 10, y, 0);  \n        // RIGHT  \n        canvas.showTextAligned(Element.ALIGN_CENTER, String.valueOf((char) 220), urx + 10, y + 8, 180);  \n          \n        canvas.endText();  \n    }  \n});  \n  \n//直线  \nParagraph p1 = new Paragraph(\"LEFT\");  \np1.add(new Chunk(new LineSeparator()));  \np1.add(\"R\");  \ndocument.add(p1);  \n//点线  \nParagraph p2 = new Paragraph(\"LEFT\");  \np2.add(new Chunk(new DottedLineSeparator()));  \np2.add(\"R\");  \ndocument.add(p2);  \n//下滑线  \nLineSeparator UNDERLINE = new LineSeparator(1, 100, null, Element.ALIGN_CENTER, -2);  \nParagraph p3 = new Paragraph(\"NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\");  \np3.add(UNDERLINE);  \ndocument.add(p3);  \n```\n\n#### 设置段落\n\n```java\nParagraph p = new Paragraph(\"In the previous example, you added a header and footer with the showTextAligned() method. This example demonstrates that it’s sometimes more interesting to use PdfPTable and writeSelectedRows(). You can define a bottom border for each cell so that the header is underlined. This is the most elegant way to add headers and footers, because the table mechanism allows you to position and align lines, images, and text.\");  \n  \n//默认  \np.setAlignment(Element.ALIGN_JUSTIFIED);  \ndocument.add(p);  \n  \ndocument.newPage();  \np.setAlignment(Element.ALIGN_JUSTIFIED);  \np.setIndentationLeft(1 * 15f);  \np.setIndentationRight((5 - 1) * 15f);  \ndocument.add(p);  \n  \n//居右  \ndocument.newPage();  \np.setAlignment(Element.ALIGN_RIGHT);  \np.setSpacingAfter(15f);  \ndocument.add(p);  \n  \n//居左  \ndocument.newPage();  \np.setAlignment(Element.ALIGN_LEFT);  \np.setSpacingBefore(15f);  \ndocument.add(p);  \n  \n//居中  \ndocument.newPage();  \np.setAlignment(Element.ALIGN_CENTER);  \np.setSpacingAfter(15f);  \np.setSpacingBefore(15f);  \ndocument.add(p);\n```\n\n#### 删除Page\n\n```java\nFileOutputStream out = new FileOutputStream(FILE_DIR + \"deletePage.pdf\");  \n  \nDocument document = new Document();  \n  \nPdfWriter writer = PdfWriter.getInstance(document, out);  \n  \ndocument.open();  \ndocument.add(new Paragraph(\"First page\"));  \ndocument.add(new Paragraph(Document.getVersion()));  \n  \ndocument.newPage();  \nwriter.setPageEmpty(false);  \n  \ndocument.newPage();  \ndocument.add(new Paragraph(\"New page\"));  \n  \ndocument.close();  \n  \nPdfReader reader = new PdfReader(FILE_DIR + \"deletePage.pdf\");  \nreader.selectPages(\"1,3\");  \nPdfStamper stamp = new PdfStamper(reader, new FileOutputStream(FILE_DIR  \n        + \"deletePage2.pdf\"));  \nstamp.close();  \nreader.close();\n```\n\n#### 插入Page\n\n```java\nFileOutputStream out = new FileOutputStream(FILE_DIR + \"insertPage.pdf\");  \n  \nDocument document = new Document();  \n  \nPdfWriter.getInstance(document, out);  \n  \ndocument.open();  \ndocument.add(new Paragraph(\"1 page\"));  \n  \ndocument.newPage();  \ndocument.add(new Paragraph(\"2 page\"));  \n  \ndocument.newPage();  \ndocument.add(new Paragraph(\"3 page\"));  \n  \ndocument.close();  \n  \nPdfReader reader = new PdfReader(FILE_DIR + \"insertPage.pdf\");  \nPdfStamper stamp = new PdfStamper(reader, new FileOutputStream(FILE_DIR  \n        + \"insertPage2.pdf\"));  \n  \nstamp.insertPage(2, reader.getPageSize(1));  \n  \nColumnText ct = new ColumnText(null);  \nct.addElement(new Paragraph(24, new Chunk(\"INSERT PAGE\")));  \nct.setCanvas(stamp.getOverContent(2));  \nct.setSimpleColumn(36, 36, 559, 770);  \n  \nstamp.close();  \nreader.close();\n```\n\n#### 排序Page\n\n```java\nPdfWriter writer = PdfWriter.getInstance(doc, out);  \nwriter.setLinearPageMode();  \n  \ndoc.open();  \ndoc.add(new Paragraph(\"1 page\"));  \ndoc.newPage();  \ndoc.add(new Paragraph(\"2 page\"));  \ndoc.newPage();  \ndoc.add(new Paragraph(\"3 page\"));  \ndoc.newPage();  \ndoc.add(new Paragraph(\"4 page\"));  \ndoc.newPage();  \ndoc.add(new Paragraph(\"5 page\"));  \n  \nint[] order = {4,3,2,1};  \nwriter.reorderPages(order);\n```\n\n#### 目录\n\n```java\n// Code 1  \ndocument.add(new Chunk(\"Chapter 1\").setLocalDestination(\"1\"));  \n  \ndocument.newPage();  \ndocument.add(new Chunk(\"Chapter 2\").setLocalDestination(\"2\"));  \ndocument.add(new Paragraph(new Chunk(\"Sub 2.1\").setLocalDestination(\"2.1\")));  \ndocument.add(new Paragraph(new Chunk(\"Sub 2.2\").setLocalDestination(\"2.2\")));  \n  \ndocument.newPage();  \ndocument.add(new Chunk(\"Chapter 3\").setLocalDestination(\"3\"));  \n  \n// Code 2  \nPdfContentByte cb = writer.getDirectContent();  \nPdfOutline root = cb.getRootOutline();  \n  \n// Code 3  \n@SuppressWarnings(\"unused\")  \nPdfOutline oline1 = new PdfOutline(root, PdfAction.gotoLocalPage(\"1\", false), \"Chapter 1\");  \n  \nPdfOutline oline2 = new PdfOutline(root, PdfAction.gotoLocalPage(\"2\", false), \"Chapter 2\");  \noline2.setOpen(false);  \n  \n@SuppressWarnings(\"unused\")  \nPdfOutline oline2_1 = new PdfOutline(oline2, PdfAction.gotoLocalPage(\"2.1\", false), \"Sub 2.1\");  \n@SuppressWarnings(\"unused\")  \nPdfOutline oline2_2 = new PdfOutline(oline2, PdfAction.gotoLocalPage(\"2.2\", false), \"Sub 2.2\");  \n  \n@SuppressWarnings(\"unused\")  \nPdfOutline oline3 = new PdfOutline(root, PdfAction.gotoLocalPage(\"3\", false), \"Chapter 3\");\n```\n\n#### Header、Footer\n\n```java\nPdfWriter writer = PdfWriter.getInstance(doc, new FileOutputStream(FILE_DIR + \"setHeaderFooter.pdf\"));  \n  \nwriter.setPageEvent(new PdfPageEventHelper() {  \n  \n    public void onEndPage(PdfWriter writer, Document document) {  \n          \n        PdfContentByte cb = writer.getDirectContent();  \n        cb.saveState();  \n  \n        cb.beginText();  \n        BaseFont bf = null;  \n        try {  \n            bf = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.WINANSI, BaseFont.EMBEDDED);  \n        } catch (Exception e) {  \n            e.printStackTrace();  \n        }  \n        cb.setFontAndSize(bf, 10);  \n          \n        //Header  \n        float x = document.top(-20);  \n          \n        //左  \n        cb.showTextAligned(PdfContentByte.ALIGN_LEFT,  \n                           \"H-Left\",  \n                           document.left(), x, 0);  \n        //中  \n        cb.showTextAligned(PdfContentByte.ALIGN_CENTER,  \n                            writer.getPageNumber()+ \" page\",  \n                           (document.right() + document.left())/2,  \n                           x, 0);  \n        //右  \n        cb.showTextAligned(PdfContentByte.ALIGN_RIGHT,  \n                           \"H-Right\",  \n                           document.right(), x, 0);  \n  \n        //Footer  \n        float y = document.bottom(-20);  \n  \n        //左  \n        cb.showTextAligned(PdfContentByte.ALIGN_LEFT,  \n                           \"F-Left\",  \n                           document.left(), y, 0);  \n        //中  \n        cb.showTextAligned(PdfContentByte.ALIGN_CENTER,  \n                            writer.getPageNumber()+\" page\",  \n                           (document.right() + document.left())/2,  \n                           y, 0);  \n        //右  \n        cb.showTextAligned(PdfContentByte.ALIGN_RIGHT,  \n                           \"F-Right\",  \n                           document.right(), y, 0);  \n  \n        cb.endText();  \n          \n        cb.restoreState();  \n    }  \n});  \n  \ndoc.open();  \ndoc.add(new Paragraph(\"1 page\"));          \ndoc.newPage();  \ndoc.add(new Paragraph(\"2 page\"));          \ndoc.newPage();  \ndoc.add(new Paragraph(\"3 page\"));          \ndoc.newPage();  \ndoc.add(new Paragraph(\"4 page\"));\n```\n\n#### 左右文字\n\n```java\nPdfWriter writer = PdfWriter.getInstance(document, out);  \n  \ndocument.open();  \n  \nPdfContentByte canvas = writer.getDirectContent();  \n  \nPhrase phrase1 = new Phrase(\"This is a test!left\");  \nPhrase phrase2 = new Phrase(\"This is a test!right\");  \nPhrase phrase3 = new Phrase(\"This is a test!center\");  \nColumnText.showTextAligned(canvas, Element.ALIGN_LEFT, phrase1, 10, 500, 0);  \nColumnText.showTextAligned(canvas, Element.ALIGN_RIGHT, phrase2, 10, 536, 0);  \nColumnText.showTextAligned(canvas, Element.ALIGN_CENTER, phrase3, 10, 572, 0);\n```\n\n#### 分割PDF\n\n```java\nFileOutputStream out = new FileOutputStream(FILE_DIR + \"splitPDF.pdf\");  \n  \nDocument document = new Document();  \n  \nPdfWriter.getInstance(document, out);  \n  \ndocument.open();  \ndocument.add(new Paragraph(\"1 page\"));  \n  \ndocument.newPage();  \ndocument.add(new Paragraph(\"2 page\"));  \n  \ndocument.newPage();  \ndocument.add(new Paragraph(\"3 page\"));  \n  \ndocument.newPage();  \ndocument.add(new Paragraph(\"4 page\"));  \n  \ndocument.close();  \n  \nPdfReader reader = new PdfReader(FILE_DIR + \"splitPDF.pdf\");  \n  \nDocument dd = new Document();  \nPdfWriter writer = PdfWriter.getInstance(dd, new FileOutputStream(FILE_DIR + \"splitPDF1.pdf\"));  \ndd.open();  \nPdfContentByte cb = writer.getDirectContent();  \ndd.newPage();  \ncb.addTemplate(writer.getImportedPage(reader, 1), 0, 0);  \ndd.newPage();  \ncb.addTemplate(writer.getImportedPage(reader, 2), 0, 0);  \ndd.close();  \nwriter.close();  \n  \nDocument dd2 = new Document();  \nPdfWriter writer2 = PdfWriter.getInstance(dd2, new FileOutputStream(FILE_DIR + \"splitPDF2.pdf\"));  \ndd2.open();  \nPdfContentByte cb2 = writer2.getDirectContent();  \ndd2.newPage();  \ncb2.addTemplate(writer2.getImportedPage(reader, 3), 0, 0);  \ndd2.newPage();  \ncb2.addTemplate(writer2.getImportedPage(reader, 4), 0, 0);  \ndd2.close();  \nwriter2.close();\n```\n\n#### 合并PDF\n\n```java\nPdfReader reader1 = new PdfReader(FILE_DIR + \"splitPDF1.pdf\");  \nPdfReader reader2 = new PdfReader(FILE_DIR + \"splitPDF2.pdf\");  \n  \nFileOutputStream out = new FileOutputStream(FILE_DIR + \"mergePDF.pdf\");  \n  \nDocument document = new Document();  \nPdfWriter writer = PdfWriter.getInstance(document, out);  \n  \ndocument.open();  \nPdfContentByte cb = writer.getDirectContent();  \n  \nint totalPages = 0;  \ntotalPages += reader1.getNumberOfPages();  \ntotalPages += reader2.getNumberOfPages();  \n  \njava.util.List<PdfReader> readers = new ArrayList<PdfReader>();  \nreaders.add(reader1);  \nreaders.add(reader2);  \n  \nint pageOfCurrentReaderPDF = 0;  \nIterator<PdfReader> iteratorPDFReader = readers.iterator();  \n  \n// Loop through the PDF files and add to the output.  \nwhile (iteratorPDFReader.hasNext()) {  \n    PdfReader pdfReader = iteratorPDFReader.next();  \n  \n    // Create a new page in the target for each source page.  \n    while (pageOfCurrentReaderPDF < pdfReader.getNumberOfPages()) {  \n        document.newPage();  \n        pageOfCurrentReaderPDF++;  \n        PdfImportedPage page = writer.getImportedPage(pdfReader, pageOfCurrentReaderPDF);  \n        cb.addTemplate(page, 0, 0);  \n    }  \n    pageOfCurrentReaderPDF = 0;  \n}  \nout.flush();  \ndocument.close();  \nout.close();\n```\n\n#### 插入一个Table\n\n```java\nPdfPTable table = new PdfPTable(3);  \nPdfPCell cell;  \ncell = new PdfPCell(new Phrase(\"Cell with colspan 3\"));  \ncell.setColspan(3);  \ntable.addCell(cell);  \ncell = new PdfPCell(new Phrase(\"Cell with rowspan 2\"));  \ncell.setRowspan(2);  \ntable.addCell(cell);  \ntable.addCell(\"row 1; cell 1\");  \ntable.addCell(\"row 1; cell 2\");  \ntable.addCell(\"row 2; cell 1\");  \ntable.addCell(\"row 2; cell 2\");  \n  \ndocument.add(table);\n```\n\n#### 表格嵌套\n\n```java\nPdfPTable table = new PdfPTable(4);  \n  \n//1行2列  \nPdfPTable nested1 = new PdfPTable(2);  \nnested1.addCell(\"1.1\");  \nnested1.addCell(\"1.2\");  \n  \n//2行1列  \nPdfPTable nested2 = new PdfPTable(1);  \nnested2.addCell(\"2.1\");  \nnested2.addCell(\"2.2\");  \n  \n//将表格插入到指定位置  \nfor (int k = 0; k < 24; ++k) {  \n    if (k == 1) {  \n        table.addCell(nested1);  \n    } else if (k == 20) {  \n        table.addCell(nested2);  \n    } else {  \n        table.addCell(\"cell \" + k);  \n    }  \n}  \n  \ndocument.add(table);\n```\n\n#### 设置表格宽度\n\n```java\nPdfPTable table = new PdfPTable(3);  \nPdfPCell cell;  \ncell = new PdfPCell(new Phrase(\"Cell with colspan 3\"));  \ncell.setColspan(3);  \ntable.addCell(cell);  \ncell = new PdfPCell(new Phrase(\"Cell with rowspan 2\"));  \ncell.setRowspan(2);  \ntable.addCell(cell);  \ntable.addCell(\"row 1; cell 1\");  \ntable.addCell(\"row 1; cell 2\");  \ntable.addCell(\"row 2; cell 1\");  \ntable.addCell(\"row 2; cell 2\");  \n  \n//100%  \ntable.setWidthPercentage(100);  \ndocument.add(table);          \ndocument.add(new Paragraph(\"\\n\\n\"));  \n  \n//宽度50% 居左  \ntable.setHorizontalAlignment(Element.ALIGN_LEFT);  \ndocument.add(table);  \ndocument.add(new Paragraph(\"\\n\\n\"));  \n  \n//宽度50% 居中  \ntable.setHorizontalAlignment(Element.ALIGN_CENTER);  \ndocument.add(table);  \ndocument.add(new Paragraph(\"\\n\\n\"));  \n  \n//宽度50% 居右  \ntable.setWidthPercentage(50);  \ntable.setHorizontalAlignment(Element.ALIGN_RIGHT);  \ndocument.add(table);  \ndocument.add(new Paragraph(\"\\n\\n\"));  \n  \n//固定宽度  \ntable.setTotalWidth(300);  \ntable.setLockedWidth(true);  \ndocument.add(table);\n```\n\n#### 设置表格前后间隔\n\n```java\nPdfPTable table = new PdfPTable(3);  \nPdfPCell cell = new PdfPCell(new Paragraph(\"合并3个单元格\",fontZH));  \ncell.setColspan(3);  \ntable.addCell(cell);  \ntable.addCell(\"1.1\");  \ntable.addCell(\"2.1\");  \ntable.addCell(\"3.1\");  \ntable.addCell(\"1.2\");  \ntable.addCell(\"2.2\");  \ntable.addCell(\"3.2\");  \n  \ncell = new PdfPCell(new Paragraph(\"红色边框\",fontZH));  \ncell.setBorderColor(new BaseColor(255, 0, 0));  \ntable.addCell(cell);  \n  \ncell = new PdfPCell(new Paragraph(\"合并单2个元格\",fontZH));  \ncell.setColspan(2);  \ncell.setBackgroundColor(new BaseColor(0xC0, 0xC0, 0xC0));  \ntable.addCell(cell);  \n  \ntable.setWidthPercentage(50);  \n  \ndocument.add(new Paragraph(\"追加2个表格\",fontZH));  \ndocument.add(table);  \ndocument.add(table);  \n  \ndocument.newPage();  \ndocument.add(new Paragraph(\"使用'SpacingBefore'和'setSpacingAfter'\",fontZH));  \ntable.setSpacingBefore(15f);  \ndocument.add(table);  \ndocument.add(table);  \ndocument.add(new Paragraph(\"这里没有间隔\",fontZH));  \ntable.setSpacingAfter(15f);\n```\n\n#### 设置单元格宽度\n\n```java\n//按比例设置单元格宽度  \nfloat[] widths = {0.1f, 0.1f, 0.05f, 0.75f};  \nPdfPTable table = new PdfPTable(widths);  \ntable.addCell(\"10%\");  \ntable.addCell(\"10%\");  \ntable.addCell(\"5%\");  \ntable.addCell(\"75%\");  \ntable.addCell(\"aa\");  \ntable.addCell(\"aa\");  \ntable.addCell(\"a\");  \ntable.addCell(\"aaaaaaaaaaaaaaa\");  \ntable.addCell(\"bb\");  \ntable.addCell(\"bb\");  \ntable.addCell(\"b\");  \ntable.addCell(\"bbbbbbbbbbbbbbb\");  \ntable.addCell(\"cc\");  \ntable.addCell(\"cc\");  \ntable.addCell(\"c\");  \ntable.addCell(\"ccccccccccccccc\");  \ndocument.add(table);  \ndocument.add(new Paragraph(\"\\n\\n\"));  \n  \n//调整比例  \nwidths[0] = 20f;  \nwidths[1] = 20f;  \nwidths[2] = 10f;  \nwidths[3] = 50f;  \ntable.setWidths(widths);  \ndocument.add(table);  \n  \n//按绝对值设置单元格宽度  \nwidths[0] = 40f;  \nwidths[1] = 40f;  \nwidths[2] = 20f;  \nwidths[3] = 300f;  \nRectangle r = new Rectangle(PageSize.A4.getRight(72), PageSize.A4.getTop(72));  \ntable.setWidthPercentage(widths, r);  \ndocument.add(new Paragraph(\"\\n\\n\"));  \ndocument.add(table);\n```\n\n#### 设置单元格高度\n\n```java\nPdfPTable table = new PdfPTable(2);  \n  \nPdfPCell cell;  \n  \n//折行  \ntable.addCell(new PdfPCell(new Paragraph(\"折行\", fontZH)));  \ncell = new PdfPCell(new Paragraph(\"blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah\"));  \ncell.setNoWrap(false);  \ntable.addCell(cell);  \n  \n//不折行  \ntable.addCell(new PdfPCell(new Paragraph(\"不折行\", fontZH)));  \ncell.setNoWrap(true);  \ntable.addCell(cell);  \n  \n//设置高度  \ntable.addCell(new PdfPCell(new Paragraph(\"任意高度\",fontZH)));  \ncell = new PdfPCell(new Paragraph(\"1. blah blah\\n2. blah blah blah\\n3. blah blah\\n4. blah blah blah\\n5. blah blah\\n6. blah blah blah\\n7. blah blah\\n8. blah blah blah\"));  \ntable.addCell(cell);  \n  \n//固定高度  \ntable.addCell(new PdfPCell(new Paragraph(\"固定高度\",fontZH)));  \ncell.setFixedHeight(50f);  \ntable.addCell(cell);  \n  \n//最小高度  \ntable.addCell(new PdfPCell(new Paragraph(\"最小高度\",fontZH)));  \ncell = new PdfPCell(new Paragraph(\"最小高度：50\",fontZH));  \ncell.setMinimumHeight(50f);  \ntable.addCell(cell);  \n  \n//最后一行拉长到page底部  \ntable.setExtendLastRow(true);  \ntable.addCell(new PdfPCell(new Paragraph(\"拉长最后一行\",fontZH)));  \ncell = new PdfPCell(new Paragraph(\"最后一行拉长到page底部\",fontZH));  \ntable.addCell(cell);  \n  \ndocument.add(table);\n```\n\n#### 设置单元格颜色\n\n```java\nPdfPTable table = new PdfPTable(4);  \nPdfPCell cell;  \ncell = new PdfPCell(new Paragraph(\"颜色测试\",fontZH));  \ntable.addCell(cell);  \n  \n//红色背景，无边框  \ncell = new PdfPCell(new Paragraph(\"红色背景，无边框\",fontZH));  \ncell.setBorder(Rectangle.NO_BORDER);  \ncell.setBackgroundColor(BaseColor.RED);  \ntable.addCell(cell);  \n  \n//绿色背景，下边框  \ncell = new PdfPCell(new Paragraph(\"绿色背景，下边框\",fontZH));  \ncell.setBorder(Rectangle.BOTTOM);  \ncell.setBorderColorBottom(BaseColor.MAGENTA);  \ncell.setBorderWidthBottom(5f);  \ncell.setBackgroundColor(BaseColor.GREEN);  \ntable.addCell(cell);  \n  \n//蓝色背景，上边框  \ncell = new PdfPCell(new Paragraph(\"蓝色背景，上边框\",fontZH));  \ncell.setBorder(Rectangle.TOP);  \ncell.setUseBorderPadding(true);  \ncell.setBorderWidthTop(5f);  \ncell.setBorderColorTop(BaseColor.CYAN);  \ncell.setBackgroundColor(BaseColor.BLUE);  \ntable.addCell(cell);  \n  \ncell = new PdfPCell(new Paragraph(\"背景灰色度\",fontZH));  \ntable.addCell(cell);  \ncell = new PdfPCell(new Paragraph(\"0.25\"));  \ncell.setBorder(Rectangle.NO_BORDER);  \ncell.setGrayFill(0.25f);  \ntable.addCell(cell);  \ncell = new PdfPCell(new Paragraph(\"0.5\"));  \ncell.setBorder(Rectangle.NO_BORDER);  \ncell.setGrayFill(0.5f);  \ntable.addCell(cell);  \ncell = new PdfPCell(new Paragraph(\"0.75\"));  \ncell.setBorder(Rectangle.NO_BORDER);  \ncell.setGrayFill(0.75f);  \ntable.addCell(cell);  \n  \ndocument.add(table);\n```\n\n#### 设置表头\n\n```java\nString[] bogusData = { \"M0065920\", \"SL\", \"FR86000P\", \"PCGOLD\",  \n        \"119000\", \"96 06\", \"2001-08-13\", \"4350\", \"6011648299\",  \n        \"FLFLMTGP\", \"153\", \"119000.00\" };  \nint NumColumns = 12;  \n// 12  \nPdfPTable datatable = new PdfPTable(NumColumns);  \nint headerwidths[] = { 9, 4, 8, 10, 8, 11, 9, 7, 9, 10, 4, 10 }; // percentage  \ndatatable.setWidths(headerwidths);  \ndatatable.setWidthPercentage(100);  \ndatatable.getDefaultCell().setPadding(3);  \ndatatable.getDefaultCell().setBorderWidth(2);  \ndatatable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);  \n  \ndatatable.addCell(\"Clock #\");  \ndatatable.addCell(\"Trans Type\");  \ndatatable.addCell(\"Cusip\");  \ndatatable.addCell(\"Long Name\");  \ndatatable.addCell(\"Quantity\");  \ndatatable.addCell(\"Fraction Price\");  \ndatatable.addCell(\"Settle Date\");  \ndatatable.addCell(\"Portfolio\");  \ndatatable.addCell(\"ADP Number\");  \ndatatable.addCell(\"Account ID\");  \ndatatable.addCell(\"Reg Rep ID\");  \ndatatable.addCell(\"Amt To Go \");  \n  \ndatatable.setHeaderRows(1);  \n  \n//边框  \ndatatable.getDefaultCell().setBorderWidth(1);  \n  \n//背景色  \nfor (int i = 1; i < 1000; i++) {  \n    for (int x = 0; x < NumColumns; x++) {  \n        datatable.addCell(bogusData[x]);  \n    }  \n}  \n  \ndocument.add(datatable);\n```\n\n#### 设置单元格边框\n\n```java\n//没有边框  \nPdfPTable table1 = new PdfPTable(3);    \ntable1.getDefaultCell().setBorder(PdfPCell.NO_BORDER);    \ntable1.addCell(new Paragraph(\"Cell 1\"));   \ntable1.addCell(new Paragraph(\"Cell 2\"));   \ntable1.addCell(new Paragraph(\"Cell 3\"));   \ndocument.add(table1);  \n  \n//边框粗细颜色  \ndocument.newPage();  \nRectangle b1 = new Rectangle(0f, 0f);  \nb1.setBorderWidthLeft(6f);  \nb1.setBorderWidthBottom(5f);  \nb1.setBorderWidthRight(4f);  \nb1.setBorderWidthTop(2f);  \nb1.setBorderColorLeft(BaseColor.RED);  \nb1.setBorderColorBottom(BaseColor.ORANGE);  \nb1.setBorderColorRight(BaseColor.YELLOW);  \nb1.setBorderColorTop(BaseColor.GREEN);  \nPdfPTable table2 = new PdfPTable(1);  \nPdfPCell cell =  new PdfPCell(new Paragraph(\"Cell 1\"));  \ncell.cloneNonPositionParameters(b1);  \ntable2.addCell(cell);  \ndocument.add(table2);\n```\n\n","tags":["iText","Java"],"categories":["记录","iText","Java"]},{"title":"Nextcloud 修改数据存储位置","url":"/post/a5eecd86.html","content":"\n### 背景\n\n`NextCloud`默认将用户数据的存储位置放在系统盘，如果系统盘存满，则无法继续使用。故而在正确安装`NextCloud`之后，建议将存储位置重新设置。\n\n### 步骤\n\n#### 确认`Nextcloud`用户数据文件存储位置\n\n一般在`/var/www/html/nextcloud/data`下\n\n#### 复制原位置到新位置\n\n```shell\ncp -r /var/www/html/nextcloud/data /home/nextcloud/\n```\n\n#### 修改配置文件\n\n`vim /var/www/html/nextcloud/config/config.php`，做出如下修改：\n\n`'datadirectory' => '/var/www/nextcloud/data'`改为\n\n`'datadirectory' => '/home/nextcloud/data'`\n\n#### 修改访问权限\n\n```shell\nchown -R apache:apache /home/nextcloud/data\nchmod 777 /home/nextcloud/data\n```\n\n#### 查看`SELinux`模式\n\n需要将`SELinux`模式设置为 permissive 或者 disabled \n\n`vim /etc/selinux/config`，设置`SELINUX=disabled`，重启服务器即可\n\n#### 释放旧空间\n\n至此已经完成设置，你可以尝试上传文件并进入新目录的相应账户下查看是否有新增文件，测试通过后可以将原来的文件删除以释放空间。\n","tags":["知识","nextcloud"],"categories":["nextcloud"]},{"title":"Springboot输出PDF文件","url":"/post/52d0c2f0.html","content":"\n### 需求\n\n比如我们需要将一张单据输出为`PDF`并打印，那么我们需要制作这张单据的模板并将数据填入表格中对应的位置中。本文主要讲制作`PDF`模板并简单将数据写入`PDF`中。\n\n### 开始\n\n#### 安装maven依赖\n\n我们使用一个很好的`PDF`第三方工具[itext](http://itextpdf.com/)\n\n```xml\n<dependency>\n    <groupId>com.itextpdf</groupId>\n    <artifactId>itextpdf</artifactId>\n    <version>5.5.10</version>\n</dependency>\n\n<dependency>\n    <groupId>com.itextpdf</groupId>\n    <artifactId>itext-asian</artifactId>\n    <version>5.2.0</version>\n</dependency>\n```\n\n#### 基础操作\n\n`itext`有很多功能，这里先说基本的操作。其他更多高级的操作，可以继续看下面的。\n\n基本处理步骤如下伪代码\n\n```java\n//Step 1—Create a Document.  \nDocument document = new Document();  \n//Step 2—Get a PdfWriter instance.  \nPdfWriter.getInstance(document, new FileOutputStream(FILE_DIR + \"createSamplePDF.pdf\"));  \n//Step 3—Open the Document.  \ndocument.open();  \n//Step 4—Add content.  \ndocument.add(new Paragraph(\"Hello World\"));  \n//Step 5—Close the Document.  \ndocument.close();  \n```\n\n#### 根据模板生成`PDF`文件并导出\n\n1. 使用word制作模板界面\n\n![模板](https://i.loli.net/2021/08/24/oTCyLmRbcwO4FPf.png)\n\n2. 导出或另存为`pdf`文件\n3. 通过`Adobe Acrobat pro`软件打开刚刚用word转换成的`pdf`文件（嫌麻烦直接走这个[链接](http://1.85.39.141:86/nextcloud/index.php/s/FefXMKSCNXS3oWx)下载，有安装包和破解文件，密码：`Acrobat2021`）\n4. 点击右边的`准备表单`按钮，选择这个`PDF`文件，然后它会自动侦测并命名表单域，一般情况下可以不修改\n\n![准备表单](https://i.loli.net/2021/08/24/IUkQgOcTM1Vyp7f.png)\n\n![选择](https://i.loli.net/2021/08/24/jKFtsrlmnqD7MBR.png)\n\n![域](https://i.loli.net/2021/08/24/oCnIvsEuMDJ3SZb.png)\n\n5. 做完这些功能，直接`另存为`即可\n\n#### 代码写入数据\n\n后端采用Java\n\n```java\npublic class Snippet {\n    // 利用模板生成pdf\n    public static void fillTemplate() {\n        // 模板路径\n        String templatePath = \"D:/Files/Temp/test1.pdf\";\n        // 生成的新文件路径\n        String newPDFPath = \"D:/Files/Temp/result.pdf\";\n        PdfReader reader;\n        FileOutputStream out;\n        ByteArrayOutputStream bos;\n        PdfStamper stamper;\n        try {\n            out = new FileOutputStream(newPDFPath);// 输出流\n            reader = new PdfReader(templatePath);// 读取pdf模板\n            bos = new ByteArrayOutputStream();\n            stamper = new PdfStamper(reader, bos);\n            AcroFields form = stamper.getAcroFields();\n            String[] str = {\"123456789\", \"TOP__ONE\", \"男\", \"1991-01-01\", \"130222111133338888\", \"西安市\"};\n            int i = 0;\n            java.util.Iterator<String> it = form.getFields().keySet().iterator();\n            while (it.hasNext()) {\n                String name = it.next().toString();\n                System.out.println(name);\n                form.setField(name, str[i++]);\n            }\n            stamper.setFormFlattening(true);// 如果为false那么生成的PDF文件还能编辑，一定要设为true\n            stamper.close();\n            Document doc = new Document();\n            PdfCopy copy = new PdfCopy(doc, out);\n            doc.open();\n            PdfImportedPage importPage = copy.getImportedPage(new PdfReader(bos.toByteArray()), 1);\n            copy.addPage(importPage);\n            doc.close();\n        } catch (IOException e) {\n            System.out.println(1);\n        } catch (DocumentException e) {\n            System.out.println(2);\n        }\n    }\n\n    public static void main(String[] args) {\n        fillTemplate();\n    }\n}\n```\n\n结果如下：\n\n![结果](https://i.loli.net/2021/08/24/3Fhq5iV4lzKWfGT.png)\n\n","tags":["Springboot"],"categories":["记录","框架","Springboot"]},{"title":"MySQL in查询参数化","url":"/post/34b1f2dd.html","content":"\n### 背景\n\n如何将MySQL的`where ... in ...`语句翻译成有参数的查询语句\n\n### 开始\n\n#### MySQL\n\n```mysql\nselect * from temp where id in ('1','2','3','4','5')\n```\n\n#### 解决方案\n\n##### 不带参数\n\n```mysql\nselect * from temp where FIND_IN_SET(id, '1,2,3,4,5')\n```\n\n##### 带参数\n\n```mysql\nselect * from temp where FIND_IN_SET(id, #{idSet})\n```\n\n其中，`idSet`是一个由集合类型转换过来的字符串类型，在`Java`中，有这么一个简单的方法：\n\n```java\nString str = StringUtils.join(list, \",\");  // 集合转String\n```\n\n","tags":["MySQL"],"categories":["记录","MySQL"]},{"title":"bootstrap table 获取表格数据","url":"/post/44336635.html","content":"\n#### 获取表格所有数据\n\n```javascript\nvar rows = $('#bootstrap-table').bootstrapTable('getData')\n```\n\n#### 获取选中的数据\n\n```javascript\nvar selected = $(\"#bootstrap-table\").bootstrapTable('getSelections');\n```\n\n#### 刷新表格数据\n\n```javascript\n$('#bootstrap-table').bootstrapTable(\"refresh\");\n```\n\n#### 销毁表格\n\n```javascript\n$('#bootstrap-table').bootstrapTable(\"destroy\");\n```\n\n#### 清空表格所有数据\n\n```javascript\n$(\"#bootstrap-table\").bootstrapTable('removeAll')\n```\n\n","tags":["bootstrap"],"categories":["记录","bootstrap"]},{"title":"Docker安装各种服务","url":"/post/93e5e0bb.html","content":"\n### Docker 安装 Nginx\n\n#### 获取最新版 Nginx 镜像\n\n```shell\ndocker pull nginx:latest\n```\n\n![最新](https://i.loli.net/2021/08/06/NS7XhpQmVEwr2kc.png)\n\n#### 查看本地镜像\n\n使用以下命令来查看是否已安装了 Nginx\n\n```shell\ndocker image\n```\n\n![已安装](https://i.loli.net/2021/08/06/5RJ1MactZpBY3Og.png)\n\n#### 运行容器\n\n```shell\ndocker run --name nginx-test -p 8080:80 -d nginx\n```\n\n- --name nginx-test：容器名称。\n- -p 8080:80： 端口进行映射，将本地 8080 端口映射到容器内部的 80 端口。\n- -d nginx： 设置容器在在后台一直运行。\n\n![成功](https://i.loli.net/2021/08/06/P2zkmHntwlCKN9Y.png)\n\n#### 安装成功\n\n最后我们可以通过浏览器可以直接访问 8080 端口的 nginx 服务\n\n![成功](https://i.loli.net/2021/08/06/mNCFvdQcknw2fI6.png)\n\n### Docker 安装 Node.js\n\n#### 获取最新版 node 镜像\n\n```shell\ndocker pull node:latest\n```\n\n![node](https://i.loli.net/2021/08/06/PRJcM1GhC2n9rxt.png)\n\n#### 查看本地镜像\n\n```shell\ndocker image\n```\n\n![查看](https://i.loli.net/2021/08/06/45mikZGlv3xR7YW.png)\n\n#### 运行容器\n\n```shell\ndocker run -itd --name node-test node\n```\n\n- --name node-test：容器名称。\n\n![运行](https://i.loli.net/2021/08/06/rOnmhWC85iwZXp3.png)\n\n#### 安装成功\n\n最后进入查看容器运行的 node 版本\n\n```shell\ndocker exec -it node-test /bin/bash\nroot@6c5d265c68a6:/# node -v\n```\n\n![cg](https://i.loli.net/2021/08/06/9vm4nC5My78XJ16.png)\n\n### Docker 安装 PHP\n\n#### 获取 PHP\n\n```shell\ndocker pull php:5.6-fpm\n```\n\n等待下载完成后，我们就可以在本地镜像列表里查到REPOSITORY为php,标签为5.6-fpm的镜像\n\n```shell\ndocker images\n```\n\n![完成](https://i.loli.net/2021/08/06/GOqLZtVXm6IQid8.png)\n\n#### Nginx + PHP 部署\n\n启动 PHP\n\n```shell\ndocker run --name  myphp-fpm -v ~/nginx/www:/www  -d php:5.6-fpm\n```\n\n- --name myphp-fpm : 将容器命名为 myphp-fpm\n- -v ~/nginx/www:/www : 将主机中项目的目录 www 挂载到容器的 /www\n\n创建 ~/nginx/conf/conf.d 目录\n\n```shell\nmkdir ~/nginx/conf/conf.d\n```\n\n在该目录下添加 `~/nginx/conf/conf.d/runoob-test-php.conf` 文件，内容如下\n\n```php\nserver {\n    listen       80;\n    server_name  localhost;\n\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm index.php;\n    }\n\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n\n    location ~ \\.php$ {\n        fastcgi_pass   php:9000;\n        fastcgi_index  index.php;\n        fastcgi_param  SCRIPT_FILENAME  /www/$fastcgi_script_name;\n        include        fastcgi_params;\n    }\n}\n```\n\n- php:9000: 表示 php-fpm 服务的 URL，下面我们会具体说明\n- /www/: 是 myphp-fpm 中 php 文件的存储路径，映射到本地的 ~/nginx/www 目录\n\n启动 nginx\n\n```shell\ndocker run --name runoob-php-nginx -p 8083:80 -d \\\n    -v ~/nginx/www:/usr/share/nginx/html:ro \\\n    -v ~/nginx/conf/conf.d:/etc/nginx/conf.d:ro \\\n    --link myphp-fpm:php \\\n    nginx\n```\n\n- -p 8083:80: 端口映射，把 nginx 中的 80 映射到本地的 8083 端口。\n- ~/nginx/www: 是本地 html 文件的存储目录，/usr/share/nginx/html 是容器内 html 文件的存储目录。\n- ~/nginx/conf/conf.d: 是本地 nginx 配置文件的存储目录，/etc/nginx/conf.d 是容器内 nginx 配置文件的存储目录。\n- --link myphp-fpm:php: 把 myphp-fpm 的网络并入 nginx，并通过修改 nginx 的 /etc/hosts，把域名 php 映射成 127.0.0.1，让 nginx 通过 php:9000 访问 php-fpm\n\n![部署](https://i.loli.net/2021/08/06/JwuMkETspSXqzaV.png)\n\n接下来我们在 ~/nginx/www 目录下创建 index.php，代码如下\n\n```php\n<?php\necho phpinfo();\n?>\n```\n\n浏览器打开 http://127.0.0.1:8083/index.php，显示如下\n\n![成功](https://i.loli.net/2021/08/06/ZwzyofC5n4piYRt.png)\n\n### Docker 安装 MySQL\n\n#### 拉取 MySQL 镜像\n\n```shell\ndocker pull mysql:latest\n```\n\n![获取](https://i.loli.net/2021/08/06/XuwL76edpTshKNm.png)\n\n#### 查看本地镜像\n\n```shell\ndocker image\n```\n\n![镜像](https://i.loli.net/2021/08/06/2z89Xjl6ERhg31t.png)\n\n#### 运行容器\n\n```shell\ndocker run -itd --name mysql-test -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql\n```\n\n- -p 3306:3306 ：映射容器服务的 3306 端口到宿主机的 3306 端口，外部主机可以直接通过 宿主机ip:3306 访问到 MySQL 的服务。\n- MYSQL_ROOT_PASSWORD=123456：设置 MySQL 服务 root 用户的密码\n\n![运行](https://i.loli.net/2021/08/06/osflvVP2deTaHtZ.png)\n\n#### 安装成功\n\n通过 `docker ps` 命令查看是否安装成功\n\n![成功](https://i.loli.net/2021/08/06/OhsN481C3jxWQnr.png)\n\n#### 启动 MySQL的 Container\n\n```shell\ndocker start 73de1fb9f4f4 # mysql对应的CONTAINER ID\n```\n\n#### 进入 MySQL 容器\n\n```shell\ndocker exec -it mysql-test bash\n```\n\n成功进入bash环境后，通过如下命令进入\n\n```shell\nmysql -h localhost -u root -p\n```\n\n![mysql](https://i.loli.net/2021/08/06/64sEF7L2aOmdPcp.png)\n\n### Docker 安装 Redis\n\n#### 拉取最新版的 Redis 镜像\n\n```shell\ndocker pull redis:latest\n```\n\n![拉取](https://i.loli.net/2021/08/06/DCdSsgc72GEHkLB.png)\n\n#### 查看本地镜像\n\n```shell\ndocker images\n```\n\n![镜像、](https://i.loli.net/2021/08/06/2fbwiUJrhB5Qv3g.png)\n\n#### 运行容器\n\n安装完成后，我们可以使用以下命令来运行 redis 容器\n\n```shell\ndocker run -itd --name redis-test -p 6379:6379 redis\n```\n\n![运行](https://i.loli.net/2021/08/06/IxtioWEbT8XFP96.png)\n\n* -p 6379:6379：映射容器服务的 6379 端口到宿主机的 6379 端口。外部可以直接通过宿主机ip:6379 访问到 Redis 的服务\n\n#### 安装成功\n\n![成功](https://i.loli.net/2021/08/06/EIQf2FCAlex7KXd.png)\n\n接着我们通过 redis-cli 连接测试使用 redis 服务\n\n```shell\ndocker exec -it redis-test /bin/bash\n```\n\n![成功](https://i.loli.net/2021/08/06/OayCLXlSDhcNkJg.png)\n\n### Docker 安装 MongoDB\n\n#### 拉取最新版的 MongoDB 镜像\n\n```shell\ndocker pull mongo:latest\n```\n\n![拉取](https://i.loli.net/2021/08/06/nWNGFd3me5QKipt.png)\n\n#### 查看本地镜像\n\n```shell\ndocker images\n```\n\n![查看](https://i.loli.net/2021/08/06/u5S7GWVBbypPlzI.png)\n\n#### 运行容器\n\n```shell\ndocker run -itd --name mongo -p 27017:27017 mongo --auth\n```\n\n![运行](https://i.loli.net/2021/08/06/mYjADi9zZxB6HyW.png)\n\n- -p 27017:27017 ：映射容器服务的 27017 端口到宿主机的 27017 端口。外部可以直接通过 宿主机 ip:27017 访问到 mongo 的服务。\n- --auth：需要密码才能访问容器服务\n\n#### 安装成功\n\n接着使用以下命令添加用户和设置密码，并且尝试连接\n\n```shell\ndocker exec -it mongo mongo admin\n```\n\n```mariadb\n# 创建一个名为 admin，密码为 123456 的用户。\n>  db.createUser({ user:'admin',pwd:'123456',roles:[ { role:'userAdminAnyDatabase', db: 'admin'},\"readWriteAnyDatabase\"]});\n# 尝试使用上面创建的用户信息进行连接。\n> db.auth('admin', '123456')\n```\n\n![成功](https://i.loli.net/2021/08/06/KQrRIn6HWfgutoF.png)\n","tags":["CentOS7","Docker"],"categories":["Linux","Docker"]},{"title":"CentOS7安装Docker","url":"/post/e3f67d02.html","content":"\n### 安装步骤\n\n#### 卸载旧版本Docker\n\n查看安装过的包\n\n```shell\nyum list installed | grep docker\n```\n\n删除相关包\n\n```shell\nyum -y remove 包名\n```\n\n#### 安装Docker\n\n查看内核版本（Docker要求CentOS系统的内核版本高于3.10）\n\n```shell\nuname -r\n# 3.10.0-1127.el7.x86_64\n```\n\n更新yum包\n\n```shell\nyum update\n```\n\n安装需要的软件包\n\n```shell\nyum install -y device-mapper-persistent-data lvm2\n```\n\n安装docker\n\n```shell\nyum install docker-ce -y\n```\n\n启动docker，设置开机启动docker\n\n```shell\nsystemctl start docker\nsystemctl enable docker\n```\n\n查看状态\n\n```shell\nsystemctl status docker.service\n```\n\n![status](https://i.loli.net/2021/08/04/Os1uPYpZ28RVChz.png)\n\n","tags":["CentOS7","Docker"],"categories":["Linux","Docker"]},{"title":"Windows部署Prometheus+Grafana实现监控看板","url":"/post/40076019.html","content":"\n### 介绍\n\n#### Prometheus\n\nPrometheus是由SoundCloud开发的开源监控报警系统和时序列数据库(TSDB)。Prometheus使用Go语言开发，是Google BorgMon监控系统的开源版本。\n\n#### Grafana\n\nGrafana是一款用Go语言开发的开源数据可视化工具，可以做数据监控和数据统计，带有告警功能。\n\n### 部署\n\n#### 安装Windows采集器\n\n安装window采集器，用来接收window系统的一系列性能指标，进入这个[地址](https://github.com/martinlindhe/wmi_exporter/releases)下载，选择`msi`文件直接安装即可\n\n![msi](https://i.loli.net/2021/08/04/t9kYg48dbXla2zo.png)\n\n然后访问 http://localhost:9182/metrics 出现下面界面说明安装成功\n\n![成功](https://i.loli.net/2021/08/04/uLclGp6BFJXvNbj.png)\n\n#### 下载Prometheus\n\n下载[地址](https://prometheus.io/download/)，下载对应版本，然后解压，编辑`prometheus.yml`文件\n\n![下载](https://i.loli.net/2021/08/04/oipZEG41wAnPhs2.png)\n\n![编辑](https://i.loli.net/2021/08/04/ZsjQkKAHaluIgNy.png)\n\n修改如下\n\n![编辑](https://i.loli.net/2021/08/04/1I6juxrcARLCXSe.png)\n\n修改完成后，保存，双击启动`promethues.exe`，出现这个信息说明启动成功\n\n![启动成功](https://i.loli.net/2021/08/04/ByKpjAIG7grEa6q.png)\n\n访问 http://localhost:9090 ，出现如下安装界面也代表成功\n\n![成功](https://i.loli.net/2021/08/04/pHblgsQWD8EdRvS.png)\n\n#### 安装Grafana\n\n进入下载[地址](https://grafana.com/grafana/download)，选择Windows版本，下载压缩包并解压到本地\n\n![下载](https://i.loli.net/2021/08/04/k1SVpb3oljuqzgC.png)\n\n解压后进入bin目录，双击启动`grafana-server.exe`，启动即可\n\n![启动](https://i.loli.net/2021/08/04/KJUIFB2xQuyNrL3.png)\n\n之后，浏览器输入 http://localhost:3000 ，用户名/密码输入 admin/admin即可\n\n![成功](https://i.loli.net/2021/08/04/benCtMWR8UfvT3w.png)\n\n#### 创建连接数据库\n\n点击`Add your first data source`\n\n![添加数据库](https://i.loli.net/2021/08/04/CjbIkaH7qmsc3fE.png)\n\n选择`prometheus`\n\n![prometheus](https://i.loli.net/2021/08/04/aLCSP94VguWXEpb.png)\n\n配置参数\n\n![参数](https://i.loli.net/2021/08/04/pnKcS4N57Xx6OuV.png)\n\n连接\n\n![连接](https://i.loli.net/2021/08/04/Ga1Qo3yMCWNveIh.png)\n\n导入\n\n![导入](https://i.loli.net/2021/08/04/FUgtuTvkP8MLc5H.png)\n\n访问[官方看板](https://grafana.com/grafana/dashboards)，选择自己喜欢的看板，复制ID进来，例如10467\n\n![看板](https://i.loli.net/2021/08/04/98fMd1VURwckHDO.png)\n\n选择`Prometheus`\n\n<img src=\"https://i.loli.net/2021/08/04/AyU5fzWKVd9Qnpl.png\" alt=\"Prometheus\" style=\"zoom:67%;\" />\n\n至此，大功告成！！是不是非常有逼格~\n\n![成功](https://i.loli.net/2021/08/04/u4FmJab1yR6sOPE.png)\n\n查看已保存的模板：\n\n<img src=\"https://i.loli.net/2021/08/04/wJg9Waci1LRGtAO.png\" alt=\"查看\" style=\"zoom:60%;\" />\n\n![管理](https://i.loli.net/2021/08/04/jh9b8W7GNqdfwRz.png)\n\n","tags":["Windows","Prometheus","Grafana"],"categories":["记录","Windows"]},{"title":"中文错别字检索工具之秘塔写作猫","url":"/post/4906f0eb.html","content":"\n### 背景\n\n我们在创作文章、制作PPT的时候很容易出现错别字，语句不通顺的现象，快写慢改成为一个头疼的问题，修改和校对真的很花时间，而秘塔写作猫主要解决的问题就是各种错别字，错误标点、语法、搭配等各种问题。\n\n### 官网\n\n秘塔写作猫[官网](https://xiezuocat.com/)\n\n目前官方提供了浏览器插件、微信小程序、word插件三种使用方式，本文介绍前两种\n\n### 下载安装\n\n#### 浏览器插件\n\n以Chrome为例，进入[应用中心](https://xiezuocat.com/#/applicationCenter?redirect=applicationCenter)，下载谷歌浏览器插件到本地\n\n![下载插件](https://i.loli.net/2021/08/02/BDlKWQeki8sTScR.png)\n\n点击右上角，更多工具->扩展程序\n\n![扩展程序](https://i.loli.net/2021/08/02/NaPZ91Wu3eXVAhn.png)\n\n在这个界面将刚刚下载的插件拖拽进来即可，然后点击`添加扩展程序`即可\n\n#### 微信小程序\n\n![小程序](https://i.loli.net/2021/08/02/OHI7fQr6aRJxilB.png)\n\n### 首页\n\n![首页](https://i.loli.net/2021/08/02/gq4wXQuBGIUVLal.png)\n\n### 使用教程\n\n#### 复制文本\n\n你可以点击`新建文档`，然后把你需要验证的文本粘贴进来\n\n![文本](https://i.loli.net/2021/08/02/a52B3R8l4svdrbq.png)\n\n可以看到，它可以检索出大多数可能出现的错误类型，包括同音字、形近字、标点符号等\n\n#### 上传文档\n\n你可以上传你的已经编辑好的**word文档**进行检索\n\n### 实测样例\n\n#### 同音异义词\n\n![同音异义词](https://i.loli.net/2021/08/03/rnHt1SiaAqy7g9p.png)\n\n#### 形近词\n\n![形近词](https://i.loli.net/2021/08/03/1FLnXNh5EuVlIjY.png)\n\n#### 病句修改\n\n![病句修改](https://i.loli.net/2021/08/03/Ff6ZmMGJ58xLnUg.png)\n\n#### 内容分析\n\n![内容分析](https://i.loli.net/2021/08/03/ckL8flE9VWm73nA.png)\n\n#### 标点符号\n\n![标点符号](https://i.loli.net/2021/08/03/IbwFeWoDrV6RBxJ.png)\n","tags":["知识","工具"],"categories":["记录"]},{"title":"el-input输入框事件","url":"/post/be91e8e2.html","content":"\n#### 基本用法\n\n```html\n<el-input v-model=\"formData.coOrderPrice\" @input=\"sum\" clearable>\n```\n\n#### @input\n\n适用于实时查询，每输入一个字符都会触发该事件\n\n#### @keyup.enter\n\n该事件与@input事件的区别在于：@input事件是实时监控的，每次输入都会调用，而@keyup.enter事件则是在电脑上需要点击回车键触发，而在手机上则是需要点击输入键盘上的确定键才可触发\n\n#### @change\n\n该事件和enter事件相似，在手机上都是要经过触发虚拟键盘的搜索键才会触发事件。使用方式同@input事件\n\n#### @blur\n\n要满足输入框在输入完成、移到其他地方时进行验证时，需要用到该事件，用此事件进行绑定验证方法即可\n","tags":["ElementUI","若依","Vue"],"categories":["记录"]},{"title":"使用Python推送链接到百度站长","url":"/post/2c5ffeb.html","content":"\n### 辣鸡百度！！！\n\n### 背景\n\n自己创建的网站，需要被搜索引擎收录才能使得自己的文章可以被搜索到（即被搜索引擎爬虫抓取），但是百度的`sitemap收录`实在是过于智障，因此换成`API推送`。\n\n### 收录方式比较\n\n**API推送：**最为快速的提交方式，建议您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录。\n\n**sitemap：**您可以定期将网站链接放到Sitemap中，然后将Sitemap提交给百度。百度会周期性的抓取检查您提交的Sitemap，对其中的链接进行处理，但收录速度慢于API推送。\n\n**手动提交：**如果您不想通过程序提交，那么可以采用此种方式，手动将链接提交给百度。\n\n**自动推送**：轻量级链接提交组件，将自动推送的JS代码放置在站点每一个页面源代码中，当页面被访问时，页面链接会自动推送给百度，有利于新页面更快被百度发现。\n\n综上，选择使用Python编写自动提交的脚本来实现手动API推送。\n\n### 开始\n\n#### 分析sitemap.xml\n\n让我们打开我们站点的`sitemap.xml`文件，观察\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n  \n  <url>\n    <loc>http://garfielder.com/post/990cc2cb.html</loc>\n    <lastmod>2021-07-20</lastmod>\n  </url>\n  \n  <url>\n    <loc>http://garfielder.com/post/bad46b98.html</loc>\n    <lastmod>2021-07-20</lastmod>\n  </url>\n  \n  <url>\n    <loc>http://garfielder.com/post/8dc94313.html</loc>\n    <lastmod>2021-07-19</lastmod>\n  </url>\n</urlset>\n```\n\n发现，我们文章的链接都被包裹在了`<url>`标签中的`<loc>`标签内，因此只要获取到这些链接然后推送即可，这里就需要用到Python的`xml`模块和`requests`模块。\n\n#### Python代码\n\n```python\nimport requests\nimport xml.dom.minidom\n\nsitemap = 'sitemap.xml'\nsite = 'yoursite'\napi = 'http://data.zz.baidu.com/urls?site=yoursite&token=xxxxxxxxxxx'\nres = []\n\ndom = xml.dom.minidom.parse(sitemap)\nroot = dom.documentElement\nurls = root.getElementsByTagName(\"url\")\nfor url in urls:\n    loc = url.getElementsByTagName(\"loc\")\n    if loc[0].childNodes[0].data.split(site)[1].split(\"/\")[1] == \"post\":\n        res.append(\"//www.\".join(loc[0].childNodes[0].data.split(\"//\")))\nresponse = requests.post(api, data=\"\\n\".join(res))\nprint(response.content.decode())\n```\n\n其中，`site`换成你自己的网站，`api`可以在百度站长处查看，`sitemap.xml`必须是本地文件\n\n![api](https://i.loli.net/2021/07/20/aTBrPSZ3x5seykV.png)\n\n运行代码，看到成功的状态即表示提交成功\n\n```json\n{\n  remain: 2870,\n  success: 61\n}\n```\n\n","tags":["Python"],"categories":["Python"]},{"title":"CentOS7上 firewalld 防火墙的使用","url":"/post/bad46b98.html","content":"\n### 简述\n\nCentos7 默认的防火墙是 firewall，替代了以前的 iptables\n\nfirewall 使用更加方便、功能也更加强大一些\n\nfirewalld 服务引入了一个信任级别的概念来管理与之相关联的连接与接口。它支持 ipv4 与 ipv6，并支持网桥，采用 firewall-cmd (command) 或 firewall-config (gui) 来动态的管理 kernel netfilter 的临时或永久的接口规则，并实时生效而无需重启服务\n\n### firewalld 服务基本使用\n\n查看防火墙状态\n\n```shell\nsystemctl status firewalld\n```\n\n关闭防火墙，停止 firewall 服务\n\n```shell\nsystemctl stop firewalld\n```\n\n开启防火墙，启动 firewall 服务\n\n```shell\nsystemctl start firewalld\n```\n\n重启防火墙，重启 firewall 服务\n\n```shell\nsystemctl restart firewalld\n```\n\n查看 firewall 服务是否开机启动\n\n```shell\nsystemctl is-enabled firewalld\n```\n\n开机时自动启动 firewall 服务\n\n```shell\nsystemctl enable firewalld.service\n```\n\n开机时自动禁用 firewall 服务\n\n```shell\nsystemctl disable firewalld.service\n```\n\n### firewalld-cmd 防护墙命令使用\n\n上面所说的 firewall 可以看成整个防火墙服务，而 firewall-cmd 可以看成是其中的一个功能，可用来管理端口\n\n#### 查看 firewall-cmd 状态：\n\n```shell\nfirewall-cmd --state\n```\n\n#### 查看已打开的所有端口：\n\n```shell\nfirewall-cmd --zone=public --list-ports\n```\n\n#### 开启指定端口\n\n当我们想要开启81端口的时候，使用这个命令：\n\n```shell\nfirewall-cmd --zone=public --add-port=81/tcp --permanent\n```\n\n修改配置后，必须重新加载才能生效，使用下面的命令重新加载：\n\n```shell\nfirewall-cmd --reload\n```\n\n#### 关闭指定端口\n\n当我们想要关闭81端口的时候，使用这个命令：\n\n```shell\nfirewall-cmd --zone=public --remove-port=81/tcp --permanent\n```\n\n同样的，必须重启生效。这里的 --permanent表示永久生效，没有此参数重启后失效。\n\n","tags":["CentOS7","知识","firewalld"],"categories":["Linux"]},{"title":"CentOS7上部署onlyoffice服务","url":"/post/d8c1fe6e.html","content":"\n### onlyoffice\n\n**ONLYOFFICE Docs**是一个在线办公套件，包括文本、电子表格和演示文稿的查看器和编辑器，完全兼容 Office Open XML 格式：.docx、.xlsx、.pptx 并支持实时协作编辑。\n\n#### 功能\n\n- 文件编辑器\n- 电子表格编辑器\n- 演示文稿编辑器\n- 移动网络查看器\n- 协同编辑\n- 象形文字支持\n- 支持所有流行格式：DOC、DOCX、TXT、ODT、RTF、ODP、EPUB、ODS、XLS、XLSX、CSV、PPTX、HTML\n\n### 开始\n\n#### 安装最新的 Nginx 包版本\n\n要为 RHEL/CentOS 设置 yum 存储库，创建`vim /etc/yum.repos.d/nginx.repo`，然后输入以下内容：\n\n```nginx\n[nginx-stable]\nname=nginx stable repo\nbaseurl=http://nginx.org/packages/centos/$releasever/$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=https://nginx.org/keys/nginx_signing.key\n\n[nginx-mainline]\nname=nginx mainline repo\nbaseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/\ngpgcheck=1\nenabled=0\ngpgkey=https://nginx.org/keys/nginx_signing.key\n```\n\n保存退出后，开始安装 Nginx\n\n```shell\nsudo yum install nginx -y\n```\n\n安装好之后，`vim /etc/nginx/nginx.conf`，应该是长这样的：\n\n```\nuser                  nginx;\nworker_processes      1;\nerror_log             /var/log/nginx/error.log warn;\npid                   /var/run/nginx.pid;\nevents {\n  worker_connections  1024;\n}\nhttp {\n  include             /etc/nginx/mime.types;\n  default_type        application/octet-stream;\n  log_format          main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                            '$status $body_bytes_sent \"$http_referer\" '\n                            '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n  access_log          /var/log/nginx/access.log  main;\n  sendfile            on;\n  #tcp_nopush         on;\n  keepalive_timeout   65;\n  #gzip               on;\n  include             /etc/nginx/conf.d/*.conf;\n}\n```\n\n#### 安装 EPEL 存储库\n\n```shell\nsudo yum install epel-release -y\n```\n\n#### 安装和配置 PostgreSQL\n\n安装 PostgreSQL：\n\n```shell\nsudo yum install postgresql postgresql-server -y\n```\n\n初始化 PostgreSQL 数据库：\n\n```shell\nsudo service postgresql initdb \nsudo chkconfig postgresql on\n```\n\n为 IPv4 和 IPv6 设置信任：\n\n`vim /var/lib/pgsql/data/pg_hba.conf`之后，做出如下修改：\n\n```\nhost    all             all             127.0.0.1/32            trust\nhost    all             all             ::1/128                 trust\n```\n\n保存并退出，然后重启 PostgreSQL 服务\n\n```shell\nsudo service postgresql restart\n```\n\n#### 创建 PostgreSQL 数据库和用户\n\n先进入这个目录`cd /tmp`\n\n然后创建数据库和用户：\n\n```shell\nsudo -u postgres psql -c \"CREATE DATABASE onlyoffice;\"\nsudo -u postgres psql -c \"CREATE USER onlyoffice WITH password 'onlyoffice';\"\nsudo -u postgres psql -c \"GRANT ALL privileges ON DATABASE onlyoffice TO onlyoffice;\"\n```\n\n#### 安装RabbitMQ\n\n```shell\nsudo yum install rabbitmq-server -y\n```\n\n启动服务并设置开机自启：\n\n```shell\nsudo service rabbitmq-server start\nsudo systemctl enable rabbitmq-server\n```\n\n#### 安装 mscorefonts\n\n安装`cabextract`和`xorg-x11-font-utils`包：\n\n```shell\nsudo yum install cabextract xorg-x11-font-utils -y\nsudo yum install fontconfig -y\n```\n\n安装 msttcore 字体包：\n\n```shell\nsudo rpm -i https://deac-ams.dl.sourceforge.net/project/mscorefonts2/rpms/msttcore-fonts-installer-2.6-1.noarch.rpm\n```\n\n#### 添加 ONLYOFFICE 文档存储库\n\n```shell\nsudo yum install https://download.onlyoffice.com/repo/centos/main/noarch/onlyoffice-repo.noarch.rpm\n```\n\n#### 安装 ONLYOFFICE 文档\n\n```shell\nsudo yum install onlyoffice-documentserver -y\n```\n\n启动并设置开机自启：\n\n```shell\nsudo service supervisord start\nsudo systemctl enable supervisord\nsudo service nginx start\nsudo systemctl enable nginx\n```\n\n#### 运行配置脚本\n\n运行`documentserver-configure.sh`脚本：\n\n```shell\nbash documentserver-configure.sh\n```\n\n然后输入下列数据：\n\n**PostgreSQL**\n\n```\nHost: localhost\nDatabase: onlyoffice\nUser: onlyoffice\nPassword: onlyoffice\n```\n\n**RabbitMQ**\n\n```\nHost: localhost\nUser: guest\nPassword: guest\n```\n\n#### 添加至防火墙\n\n```shell\nsudo firewall-cmd --zone=public --add-port=80/tcp --permanent\nsudo firewall-cmd --reload\n```\n\n至此已经全部配置完毕，重启服务器，输入`http://localhost`，看到欢迎界面说明配置成功！\n\n![welcome](https://i.loli.net/2021/07/16/nKfgCQRrb5VSHmx.png)\n\n### onlyoffice集成到nextcloud\n\n#### 下载onlyoffice\n\n进入nextcloud应用商店，下载并启用onlyoffice\n\n![下载onlyoffice](https://i.loli.net/2021/07/19/ID5Z4b3doCVqkwK.png)\n\n然后进入设置进行配置\n\n![设置](https://i.loli.net/2021/07/19/tXaBWPIoJsrScH8.png)\n\n**坑！！！**\n\n如果报错`Error when trying to connect (Host violates local access rules)`，那么配置文件记得加上\n`'allow_local_remote_servers' => true,`\n\n","tags":["CentOS7","知识","onlyoffice"],"categories":["Linux"]},{"title":"Nextcloud入门操作手册","url":"/post/990cc2cb.html","content":"\n### Nextcloud的优点\n\n自建的Nextcloud一举提升了优点。比如，\n\n1. 安全性高，全部位于公司内部。没有广告，实验数据为公司所拥有。\n2. 支持多种使用插件功能，按需要安装。\n3. 可以与公司的AD账户继承，使用邮箱等认证系统。\n4. 在线文档的协同编辑、在线流程图绘制、思维导图的使用。\n\n### 详细介绍\n\n让我们开始吧！\n\n### 个人信息\n\n#### 设置\n\n点击右上角头像->设置，可以修改个人信息\n\n![个人设置](https://i.loli.net/2021/07/20/EgLInvZ7NVqJrMy.png)\n\n#### 修改密码\n\n点击右上角头像->设置->安全，输入新旧密码即可\n\n![密码](https://i.loli.net/2021/07/20/dzs1rEb3uQNpkv2.png)\n\n### 首页\n\n如果你是第一次登录，首页应该会是这样子：\n\n![首页](https://i.loli.net/2021/07/20/xO9MqGwHXlICV16.png)\n\n其中，红色框里的文件及文件夹都可以删除，换句话说，你只需要留下那个`共享文件夹`就可以，剩下的你尽管随意操作。\n\n### 文件及同步\n\n#### 文件基本操作\n\n##### 上传及新建\n\n上传支持拖拽上传\n\n![上传及新建](https://i.loli.net/2021/07/20/Eb1tjKklIowGxBR.png)\n\n##### 右键\n\n在这里可以使用鼠标右键，提供了`添加到收藏夹`、`详细信息`、`重命名`、`移动或复制`、`下载`、`删除`等功能，随着你安装的扩展增加，右键功能也会增加，比如这里的`用ONLYOFFICE打开`，就是在[部署onlyoffice服务](http://www.garfielder.com/post/d8c1fe6e.html)后增加的功能\n\n![右键](https://i.loli.net/2021/07/20/xbseXq9SOuUR6Cr.png)\n\n#### 添加标签\n\n点击一个文件的`···`->`详细信息`->`···`->`标签`，然后添加标签\n\n![标签](https://i.loli.net/2021/07/20/mxb6j29lpytnHRL.gif)\n\n删除标签也很简单，操作如下：\n\n![删除标签](https://i.loli.net/2021/07/20/h72TMF5JAQE4Hux.gif)\n\n#### 评论\n\n可以给文件夹、文件添加评论\n\n![评论](https://i.loli.net/2021/07/20/OC4wdyWhSIcZYBn.png)\n\n#### 管理删除文件\n\n当您在`Nextcloud`中删除文件时，它不会立即永久删除，只会移动到`已删除文件`中。当你在`已删除文件`中删除，才是永久删除，因此你还可以在`已删除文件`中进行恢复。\n\n#### 新建共享文件夹/文件\n\n点击上方`+`，选择`新建文件夹`\n\n![新建共享文件夹](https://i.loli.net/2021/07/13/BnGiP7UQ5jyEImA.png)\n\n#### 添加分享组\n\n点击分享，在右边输入栏搜索相关信息比如成员、分组等\n\n![创建共享](https://i.loli.net/2021/07/13/XqCJstKPoGugZxY.png)\n\n![共享成功](https://i.loli.net/2021/07/13/R7WVuboTNs2aKHv.png)\n\n![别人的界面](https://i.loli.net/2021/07/13/BTIFEgZidxpR958.png)\n\n#### 生成分享链接\n\n不仅适合单个文件，还适合文件夹分享，支持密码，可以直接打开\n\n![分享文件](https://i.loli.net/2021/07/20/jOPKXB4CkNfgpiD.png)\n\n![分享权限](https://i.loli.net/2021/07/20/2mSstTeFQ1woXvi.png)\n\n#### 共享权限\n\n![共享权限](https://i.loli.net/2021/07/20/ApBotaJyrmHWz5X.png)\n\n### 其他\n\n#### 全局搜索\n\n点击右上角的放大镜进行搜索，会默认先在当前目录下搜索，如果没有找到，自动开始全局搜索\n\n![搜索](https://i.loli.net/2021/07/21/5CQvJTiu61IXrMe.png)\n\n#### 切换视图\n\n点击右上角头像下面的图标可以切换视图\n\n![列表](https://i.loli.net/2021/07/21/PHe4BrvFM5ylg69.png)\n\n![大图标](https://i.loli.net/2021/07/21/HQcPxNhoBq5sVIX.png)\n\n#### 多人协同之通讯录\n\n你可以使用通讯录工具来管理自己的联系人\n\n![联系人](https://i.loli.net/2021/07/20/rym4pijzQ9FvBs6.png)\n\n#### 多人协同之markdown\n\nmarkdown语法非常强大，最大的优点是排版整洁方便，美观程度和省事方面吊打某软的蓝色文档编辑软件，本人真的非常强烈推荐大家学习markdown语法，你会爱上他们的。仅需要掌握基本的语法即可，用到百度一下，一旦掌握，终身受益。\n\n说回正题，大文档的协同编辑，只要三步即可。\n\n1. 创建文档，划分好段落。\n2. 通知到相关人员，在云盘中打开文件，编辑相应的段落。\n3. 最后汇总到处生成文档即可。\n\n### 管理员手册\n\n#### 安装插件\n\n正常情况下，直接去应用商店下载启动就可以，但是如果因为网络原因加载不出来应用商店，可以参考下面的方法\n\n比如我们要为我们的云盘加上`日历`插件，我们打开[官方插件网站](https://apps.nextcloud.com/)，以[Calendar](https://apps.nextcloud.com/apps/calendar)为例：\n\n![下载插件](https://i.loli.net/2021/07/13/U61fEgT3KsRPvWn.png)\n\n拉到下面，找到对应版本，下载到本地，是一个压缩包，自己解压至出现一个文件夹为止，然后使用`putty`将整个`calendar`文件夹上传至服务器中`nextcloud`的`apps`的地址下，上传可参考[本文](http://www.garfielder.com/post/a1f1da6f.html)\n\n![上传](https://i.loli.net/2021/07/13/KSZbta2D7vfkqT5.png)\n\n然后打开`nextcloud`的应用，找到`calendar`，启用，即可成功\n\n![启用](https://i.loli.net/2021/07/13/Pcjbp7urTCqKkFs.png)\n\n![日历](https://i.loli.net/2021/07/13/mfGDiwlxcIrgHBM.png)\n","tags":["知识","nextcloud"],"categories":["nextcloud","知识"]},{"title":"在VMWare上安装Windows11","url":"/post/772b43fd.html","content":"\n\n\n### 直接开始不多逼逼\n\n#### 选择经典模式\n\n![典型](https://i.loli.net/2021/07/16/ZlWqIBzAnOKViE7.png)\n\n#### 选择镜像\n\n![iso](https://i.loli.net/2021/07/16/f58M7SItdnsLNVv.png)\n\n#### 选择版本\n\n这里选Windows 10 就行，不用担心\n\n![win10](https://i.loli.net/2021/07/16/jAKy19pVFUzNm5i.png)\n\n#### 选择安装位置\n\n![位置](https://i.loli.net/2021/07/16/WgbjNcAFJZpTyIr.png)\n\n#### 分区\n\n简简单单一个区就行，反正是虚拟机，一切以操作方便为准\n\n![分区](https://i.loli.net/2021/07/16/DqixZEYcLCFpQ7N.png)\n\n#### 自定义硬件\n\n![自定义硬件](https://i.loli.net/2021/07/16/Z8MUgRkBQJm5phb.png)\n\n#### 开启虚拟机\n\n![开启](https://i.loli.net/2021/07/16/pD2WShmHeGncKt4.png)\n\n打开虚拟机，如果出现`EFI network time out`字样，不必担心，先关闭虚拟机，然后在打开虚拟机的页面，点击编辑虚拟机，点击选项-高级，使用BIOS，确定\n\n![高级](https://i.loli.net/2021/07/16/84zyGbphsdelmC6.png)\n\n有了\n\n![Windows11](https://i.loli.net/2021/07/16/LYkWaIdm5EoptRB.png)\n\n进到安装页面，几乎不需要做什么选择，大部分选择next即可\n\n![安装](https://i.loli.net/2021/07/16/FGcq9PmZRWMQasj.png)\n\n这里由于我们肯定没有密钥，所以点击红框中的`我没有密钥`\n\n![我没有密钥](https://i.loli.net/2021/07/16/wZIcjG1iB9hrSWC.png)\n\n选择第二个\n\n![第二个](https://i.loli.net/2021/07/16/VPhKQisR7cSk3CY.png)\n\n然后耐心等待\n\n![开始安装](https://i.loli.net/2021/07/16/EuQAFr6C2nZjP3K.png)\n\n一切准备就和正常安装系统一样，你可以登录微软账号，如果你有的话\n\n![登录](https://i.loli.net/2021/07/16/iVcfDwKeGjM6l7Q.png)\n\n并创建pin\n\n![pin](https://i.loli.net/2021/07/16/A1zunbXRvW6Zmqc.png)\n\n继续操作，然后进入等待时间\n\n![等待](https://i.loli.net/2021/07/16/dBbPnODTse7gYF8.png)\n\n### 这就是Windows11吗\n\n![Windows11](https://i.loli.net/2021/07/16/rKZna8G1MyfWqPL.png)\n\n![Windows11](https://i.loli.net/2021/07/16/isNJwzmv76XbTLR.png)\n\n![流氓广告](https://i.loli.net/2021/07/16/mw5SVZcLKWFqlDA.png)\n\n到此结束！！！\n","tags":["Linux","VMWare","Windows"],"categories":["记录","Windows"]},{"title":"MySQL触发器","url":"/post/ceb3ed74.html","content":"\n### 什么是触发器\n\n触发器（trigger）是MySQL提供给程序员和数据分析员来保证数据完整性的一种方法，它是与表事件相关的特殊的存储过程，它的执行不是由程序调用，也不是手工启动，而是由事件来触发，比如当对一个表进行操作（insert，delete， update）时就会激活它执行。简单理解为：你执行一条sql语句，这条sql语句的执行会自动去触发执行其他的sql语句。\n\n### 触发器详细介绍\n\n#### 触发器创建四要素\n\n- 监视地点（table）\n- 监视事件（insert、update、delete）\n- 触发时间（after、before）\n- 触发事件（insert、update、delete）\n\n#### 触发器使用语法\n\n```mysql\nCREATE TRIGGER 触发器名\nBEFORE|AFTER DELETE|INSERT|UPDATE\nON 表名 FOR EACH ROW\nBEGIN\n触发SQL代码块;\nEND;\n```\n\n`before/after`： 触发器是在增删改之前执行，还是之后执行\n`delete/insert/update`： 触发器由哪些行为触发（增、删、改）\n`on 表名`： 触发器监视哪张表的（增、删、改）操作\n`触发SQL代码块`： 执行触发器包含的SQL语句\n\n#### 例子\n\n比如，现在我有单价、数量、总价三个字段，众所周知，总价 = 单价 x 数量，那么我们便可以写出一个触发器如下，当我们修改单价或者数量的时候，总价自动进行计算：\n\n```mysql\nCREATE TRIGGER sum\nBEFORE UPDATE\nON product FOR EACH ROW\nBEGIN\nSET NEW.total_price = NEW.price * NEW.amount\nEND;\n```\n\n#### Navicat中创建触发器\n\n选中表->右键->设计表->触发器->添加触发器，\n\n![触发器](https://i.loli.net/2021/07/13/4BNoi2fKbjYsV1D.png)\n\n","tags":["知识","MySQL"],"categories":["MySQL"]},{"title":"Windows用putty上传文件到远程Linux服务器","url":"/post/a1f1da6f.html","content":"\n在putty安装目录下，存在可执行文件**pscp.exe**，用法跟scp命令相似，\n\nwin+R 输入 cmd进入命令行，\n\n比如要将本地的LICENCE文件上传到远程计算机192.168.1.105的home/god中，远程主机登陆账号为god，命令如下：\n\n```shell\npscp LICENCE god@192.168.1.105:/home/god\n```\n\n然后提示输入密码，然后OK\n\n**注意：**这里@前面一定要加上用户，如果不加会出现Access Denied错误\n\n另外pscp后面还可以跟随选项:\n\n```\n-p 拷贝文件的时候保留源文件建立的时间。\n-q 执行文件拷贝时，不显示任何提示消息。\n-r 拷贝整个目录\n-v 拷贝文件时，显示提示信息。<br>-sftp 强制使用sftp协议<br>-scp 强制使用scp协议\n```\n\n例如：\n\n```shell\npscp -r root@192.168.0.11:/root/extundelete-0.2.4 Desktop\\\n```\n\n","tags":["Linux","win10","putty"],"categories":["Linux","记录","Windows"]},{"title":"Nextcloud批量添加新用户","url":"/post/d3ed757b.html","content":"\n### 需求\n\n我们现在已经在CentOS上搭建好了Nextcloud环境，现在需要新增用户，由于用户数量较多，我们不可能人工一个个手动添加，既费时又费力，因此需要批量新增用户。但是Nextcloud自己不提供这个功能，因此需要借助脚本的力量，我们使用Python来完成这个工作。\n\n### 开始\n\n#### 使用官方接口\n\n这是官方的[用户接口](https://docs.nextcloud.com/server/latest/admin_manual/configuration_user/instruction_set_for_users.html)，提供了许多可用接口，我们这里需要使用的是`Add a new user`，如下：\n\n![add](https://i.loli.net/2021/07/08/RKIPF9yfVd5zxr8.png)\n\n官方使用方法：\n\n```shell\n$ curl -X POST http://admin:secret@example.com/ocs/v1.php/cloud/users -d userid=\"Frank\" -d password=\"frankspassword\"\n```\n\n但是我们要用Python，因此不需要用到curl\n\n#### 使用开发者工具解析\n\n我们打开浏览器的开发者工具，然后手动添加一个用户，观察参数如下：\n\n```json\n{\n  \"ocs\": {\n    \"meta\": {\n      \"status\": \"ok\",\n      \"statuscode\": 200,\n      \"message\": \"OK\"\n    },\n    \"data\": {\n      \"enabled\": true,\n      \"storageLocation\": \"/var/www/html/nextcloud/data/test\",\n      \"id\": \"test\",\n      \"lastLogin\": 0,\n      \"backend\": \"Database\",\n      \"subadmin\": [\n        \"临时用户\"\n      ],\n      \"quota\": {\n        \"quota\": 1073741824,\n        \"used\": 0\n      },\n      \"email\": \"test@test.com\",\n      \"displayname\": \"测试用户\",\n      \"phone\": \"\",\n      \"address\": \"\",\n      \"website\": \"\",\n      \"twitter\": \"\",\n      \"groups\": [\n        \"临时用户\"\n      ],\n      \"language\": \"zh_CN\",\n      \"locale\": \"\",\n      \"backendCapabilities\": {\n        \"setDisplayName\": true,\n        \"setPassword\": true\n      }\n    }\n  }\n}\n```\n\n因此，当我们新增用户的时候，需要的关键参数如下（你也可以自己决定你需要的关键参数）：\n\n```json\n{\n  \"userid\": \"Test\",\n  \"displayName\": \"测试用户\",\n  \"password\": \"testpassword\",\n  \"email\": \"test@new.com\",\n  \"groups\": [\n    \"普通用户\"\n  ],\n  \"subadmin\": [\n    \"普通用户\"\n  ],\n  \"quota\": \"1GB\",\n  \"language\": \"zh_CN\"\n}\n```\n\n注意此处**坑点**：你可能发现，开发者工具中看到的显示名称字段为`displayname`，n是小写，但是注意，你的代码中一定要写成`displayName`，即N要大写，这是我的`Nextcloud 19.0.13`的一个小bug，如果你的版本不同，不一定遇到这个问题\n\n#### 获取头文件信息\n\n在刚刚的开发者工具中，将最新一次你登录的信息记录下来，这里我们需要记录的信息有：`Cookie`、`requesttoken`和`User-Agent`\n\n![Headers](https://i.loli.net/2021/07/08/IOr4l3PCFBdu67c.png)\n\n当你每一次**重新登录**的时候，这里的三个信息都需要**更新**，因此你可以将这三个信息记录在文件中然后用代码读取，本例将包括这三个信息的五条信息都存在文件中。\n\n即我们的头文件信息需要：\n\n```python\nheaders = {\n    \"HOST\": host,\n    \"Referer\": url,\n    \"User-Agent\": user_agent,\n    \"Cookie\": cookies,\n    \"requesttoken\": request_token\n}\n```\n\n#### 完整的Python代码\n\n```python\nimport xlrd\nimport copy\nimport requests\n\n\nclass Header:\n    def __init__(self):\n        self.host = \"\"\n        self.url = \"\"\n        self.cookies = \"\"\n        self.user_agent = \"\"\n        self.request_token = \"\"\n\n    def get_headers(self, filename):\n        data = xlrd.open_workbook(filename)\n        table = data.sheets()[0]\n        self.host = table.cell_value(0, 1)\n        self.url = table.cell_value(1, 1)\n        self.cookies = table.cell_value(2, 1)\n        self.user_agent = table.cell_value(3, 1)\n        self.request_token = table.cell_value(4, 1)\n        return {\n            \"HOST\": self.host,\n            \"Referer\": self.url,\n            \"User-Agent\": self.user_agent,\n            \"Cookie\": self.cookies,\n            \"requesttoken\": self.request_token\n        }\n\n\nclass User:\n    def __init__(self):\n        self.template = {\"userid\": \"Test\", \"displayName\": \"测试用户\", \"password\": \"testpassword\", \"email\": \"test@new.com\",\n                         \"groups\": [\"普通用户\"], \"subadmin\": [\"普通用户\"], \"quota\": \"1GB\", \"language\": \"zh_CN\"}\n\n    def get_user_data(self, filename):\n        res = []\n        data = xlrd.open_workbook(filename)\n        table = data.sheets()[0]\n        n_rows = table.nrows\n        for i in range(1, n_rows):\n            self.template['userid'] = table.cell_value(i, 0)\n            self.template['displayName'] = table.cell_value(i, 1)\n            self.template['password'] = table.cell_value(i, 2)\n            self.template['email'] = table.cell_value(i, 3)\n            if table.cell_value(i, 4).__len__() > 0:\n                self.template['groups'] = table.cell_value(i, 4).split('、')\n            else:\n                self.template['groups'] = []\n            if table.cell_value(i, 5).__len__() > 0:\n                self.template['subadmin'] = table.cell_value(i, 5).split('、')\n            else:\n                self.template['subadmin'] = []\n            self.template['quota'] = table.cell_value(i, 6)\n            res.append(copy.copy(self.template))\n        return res\n\n\nif __name__ == '__main__':\n    user_file = \"users.xlsx\"\n    header_file = \"headers.xlsx\"\n    user = User()\n    header = Header()\n\n    user_info = user.get_user_data(user_file)\n    headers = header.get_headers(header_file)\n    url = headers[\"Referer\"]\n\n    for info in user_info:\n        print(info)\n        response = requests.post(url, json=info, headers=headers)\n        print(response.text)\n\n```\n\n#### 准备好你的用户信息文件\n\n我这里使用Excel文件，`users.xlsx`和`headers.xlsx`\n\n![users](https://i.loli.net/2021/07/08/TGJ1qFDBWdUCS3P.png)\n\n![headers](https://i.loli.net/2021/07/08/OuatVCDv15Ayhik.png)\n\n**注意**：分组管理员请谨慎填写，因为这会让普通用户也拥有对于用户的管理权限\n\n#### 运行Python脚本\n\n![结果](https://i.loli.net/2021/07/08/QR5Yl7t9P2dZ1yF.png)\n\n当你看到200的状态码时，说明你成功了\n\n![成功](https://i.loli.net/2021/07/08/GiRVUL3W5EDYwaP.png)\n\n### 项目地址\n\n[地址](https://github.com/GarfieldCCC/nextcloud)\n\n","tags":["知识","nextcloud","Python"],"categories":["nextcloud","Python"]},{"title":"MySQL获取最近新增数据的id","url":"/post/30036f85.html","content":"\n### 背景\n\n当我们新增一条数据时，需要立刻获得这条数据的id\n\n### 如何实现\n\n**推荐使用SELECT LAST_INSERT_ID()**\n\n#### `MyBatis`代码\n\n```xml\n<insert id=\"insertQljContract\" parameterType=\"QljContract\" useGeneratedKeys=\"true\" keyProperty=\"id\">\n    insert into qlj_contract\n    <selectKey keyProperty=\"kid\" order=\"AFTER\" resultType=\"java.lang.Integer\">\n        SELECT LAST_INSERT_ID()\n    </selectKey>\n</insert>\n```\n\n`SELECT LAST_INSERT_ID()`：得到刚 insert 进去记录的主键值，只适用于自增主键\n\n`keyProperty`：将查询到主键值设置到 `parameterType` 指定的对象的那个属性\n\n`order`：SELECT LAST_INSERT_ID() 执行顺序，相对于 insert 语句来说它的执行顺序\n\n`resultType`：指定 SELECT LAST_INSERT_ID() 的结果类型\n\n#### Domain层\n\n加入相关代码\n\n```java\nprivate Integer kid;\npublic Integer getKid() { return kid; }\npublic void setKid(Integer kid) { this.kid = kid; }\n```\n\n#### 注意\n\n**假如你使用一条INSERT语句插入多个行， LAST_INSERT_ID() 只会返回插入的第一行数据时产生的值**。\n\n比如我插入了 3 条数据，它们的 id 分别是 21,22,23，那么最后我还是只会得到 21 这个值\n\n","tags":["知识","MySQL"],"categories":["记录","MySQL","若依"]},{"title":"Windows远程连接CentOS桌面","url":"/post/6fd55fc5.html","content":"\n#### 安装开源资源库\n\n```shell\nyum install epel-release\n```\n\n![epel-release](https://i.loli.net/2021/07/01/VPnIQqA7fXbBUOp.png)\n\n#### 安装`xrtp`软件\n\n```shell\nyum install xrdp\n```\n\n![xrdp](https://i.loli.net/2021/07/01/R6iOfNQKsouHa8S.png)\n\n#### 安装`tigervnc`服务\n\n```shell\nyum install tigervnc-server\n```\n\n![vnc](https://i.loli.net/2021/07/01/aM3RbxUm1IJ5nhK.png)\n\n#### 为用户root设置vnc密码\n\n```shell\nvncpasswd root\n```\n\n#### 关闭防火墙\n\n##### 仅本次关闭\n\n```shell\nsystemctl stop firewalld.service\n```\n\n##### 开机关闭\n\n```shell\nsystemctl disable firewalld.servie\n```\n\n#### 开启`xrdp`服务\n\n```shell\nsystemctl start xrdp\nsystemctl enable xrdp\n```\n\n#### 尝试远程连接\n\n![远程连接](https://i.loli.net/2021/07/01/aJfQpAj6q8wcXMD.png)\n\n成功\n\n![成功](https://i.loli.net/2021/07/01/9ajRAKnMmOrN64w.png)\n\n","tags":["Linux","win10"],"categories":["Linux","记录"]},{"title":"CentOS7上安装Nextcloud","url":"/post/8dc94313.html","content":"\n### Nextcloud简介\n\n[Nextcloud](https://nextcloud.com/)是一款开源免费的私有云存储网盘项目，可以让你快速便捷地搭建一套属于自己或团队的云同步网盘，从而实现跨平台跨设备文件同步、共享、版本控制、团队协作等功能。它的客户端覆盖了Windows、Mac、Android、iOS、Linux 等各种平台，也提供了网页端以及 WebDAV接口，所以你几乎可以在各种设备上方便地访问你的云盘。\n\n![Nextcloud](https://i.loli.net/2021/06/29/q1HyBLpDW9ic8Kd.png)\n\n### 在CentOS7上部署Nextcloud\n\n#### 关闭SELINUX检查\n\n```shell\n[root@localhost root]# vim /etc/selinux/config\n```\n\n![disabled](https://i.loli.net/2021/06/29/WagY6IfpoDOhyc9.png)\n\n#### 更换国内源（网络条件允许请一定跳过这一步）\n\n如果你在使用yum的时候出现了**正在尝试其他镜像**的错误，那么索性将其换成国内阿里源，步骤如下：\n\n删除yum.repos.d目录下所有文件\n\n```shell\n[root@localhost root]# rm -f /etc/yum.repos.d/* \n```\n\n然后重新下载阿里的镜像\n\n```shell\n[root@localhost root]# wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n```\n\n然后输入下列两行生成新镜像缓存\n\n```shell\n[root@localhost root]# yum clean all\n[root@localhost root]# yum makecache\n```\n\n#### 更换yum源\n\n由于CentOS7自带的yum没有PHP7的安装包，因此需要更换yum源使其可以下载安装PHP7+\n\n```shell\n[root@localhost root]# yum install epel-release -y\n[root@localhost root]# rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm\n```\n\n#### 安装Apache服务\n\n```shell\n[root@localhost root]# yum install httpd httpd-tools -y\n```\n\n![Apache](https://i.loli.net/2021/06/29/LQYHudaW1nRebcZ.png)\n\n#### 启动Apache服务并设置开机自启动\n\n```shell\n[root@localhost root]# systemctl start httpd     // 启动\n[root@localhost root]# systemctl enable httpd    // 开机自启\n[root@localhost root]# systemctl status httpd    // 检查状态\n```\n\n![status](https://i.loli.net/2021/06/29/4wbo5OKghaVUQzF.png)\n\n#### 安装启动MariaDB\n\n```shell\n[root@localhost root]# yum install mariadb-server mariadb -y\n[root@localhost root]# systemctl start mariadb\n[root@localhost root]# systemctl enable mariadb\n[root@localhost root]# systemctl status mariadb\n```\n\n![status](https://i.loli.net/2021/06/29/JLVxlrzAcB4Z37k.png)\n\n#### 配置MariaDB\n\n```shell\n[root@localhost root]# mysql_secure_installation\n```\n\n![配置MariaDB](https://i.loli.net/2021/06/29/mztqRXGfM9YQoiS.gif)\n\n#### 安装配置PHP\n\n```shell\n[root@localhost root]# yum install php72w php72w-common php72w-curl php72w-zip php72w-bz2 php72w-intl php72w-mbstring php72w-gd php72w-pecl-zip php72w-xml php72w-json php72w-cli php72w-pdo php72w-mysql unzip wget -y\n```\n\n#### 创建Nextcloud数据库\n\n##### 登录MariaDB\n\n```shell\n[root@localhost root]# mysql -uroot -p\n```\n\n##### 创建数据库\n\n```mysql\nMariaDB [(none)]> create database nextclouddb;\n```\n\n##### 创建管理员用户\n\n```mysql\nMariaDB [(none)]> create user nextclouduser@localhost identified by 'nextcloudPWD';\n```\n\n**注意：**这里的`nextcloudPWD`要换成你自己的密码\n\n##### 用户授权\n\n```mysql\nMariaDB [(none)]> grant all on nextclouddb.* to nextclouduser@localhost;\n```\n\n##### 刷新重启\n\n```mysql\nMariaDB [(none)]> flush privileges;\nMariaDB [(none)]> exit;\n```\n\n#### 下载安装Nextcloud\n\n##### 切换目录\n\n来到`var/www/html`下\n\n```shell\n[root@localhost root]# cd /var/www/html\n```\n\n##### 下载稳定版本的Nextcloud\n\n```shell\n[root@localhost html]# wget https://download.nextcloud.com/server/releases/nextcloud-19.0.1.zip\n```\n\n如果此时出现证书过期的错误\n\n![证书过期](https://i.loli.net/2021/11/12/LnXldmjTrGcquNe.png)\n\n那么输入命令`yum install -y ca-certificates`可以解决\n\n##### 解压\n\n```shell\n[root@localhost html]# unzip nextcloud-19.0.1.zip\n```\n\n![解压](https://i.loli.net/2021/06/29/GxMaRjo8blKiyDH.png)\n\n##### 创建数据目录\n\n```shell\n[root@localhost html]# mkdir nextcloud/data\n```\n\n##### 文件夹权限\n\n```shell\n[root@localhost html]# chown -R apache:apache nextcloud\n[root@localhost html]# chmod -R 755 nextcloud\n```\n\n![权限](https://i.loli.net/2021/06/29/vb3XoE7yZ9RYVBU.png)\n\n#### 重启Apache服务\n\n```shell\n[root@localhost html]# systemctl restart httpd\n```\n\n#### 配置防火墙策略\n\n```shell\n[root@localhost html]# firewall-cmd --permanent --add-service=http\n[root@localhost html]# firewall-cmd --permanent --add-service=https\n[root@localhost html]# firewall-cmd --reload    // 防火墙重启\n```\n\n![防火墙](https://i.loli.net/2021/06/29/BJ6MS1vxKPAEiOw.png)\n\n#### 打开Nextcloud并继续配置\n\n服务器浏览器打开`http://localhost/nextcloud`，如果没有问题会出现如下界面：\n\n![Nextcloud](https://i.loli.net/2021/06/29/G3eTkOr1CoXbF9R.png)\n\n##### 输入管理员账号密码\n\n![admin](https://i.loli.net/2021/06/29/Nhrem14Ql5uAOq8.png)\n\n##### 输入之前创建好的数据库信息\n\n![dbinfo](https://i.loli.net/2021/06/29/Y23QX5qkCM78pvf.png)\n\n然后点击`Finish setup`完成配置，然后输入账号密码登录即可\n\n![Nextcloud主界面](https://i.loli.net/2021/06/29/dSpc6YzPHbUDeKL.png)\n\n### 问题及解决方案\n\n#### 新建用户默认语言英文地区美国\n\n如果想要修改为中文，打开`config.php`，并在末尾追加两行配置信息\n\n```php\n  'default_language' => 'zh_CN',\n  'default_locale' => 'zh',\n```\n\n#### yum提示Another app is currently holding the yum lock; waiting for it to exit...\n\n强制关掉yum进程：\n\n```shell\nrm -f /var/run/yum.pid\n```\n\n#### 通过不被信任的域名访问\n\n##### 问题\n\n![问题](https://i.loli.net/2021/07/05/3dAsE6wfM5BlLhQ.png)\n\n##### 解决方案\n\n找到`config.php`的位置，使用这条命令`find / -name \"config.php\"`\n\n![位置](https://i.loli.net/2021/07/05/tNdzxV3eHp7C9bk.png)\n\n编辑它：`vi /var/www/html/nextcloud/config/config.php`，在`trusted_domains`加入域名\n\n![添加域名](https://i.loli.net/2021/07/05/QraLkbBC69Vf1Xe.png)\n\n保存，即可\n\n#### 取消新用户的默认文件\n\n##### 问题\n\n新用户注册后会生成一些引导文件，如：\n\n![引导文件](https://s2.loli.net/2021/12/24/wHsVYeEnO89vDKW.png)\n\n##### 解决方案\n\n进入`nextcloud`安装目录（一般都为`/var/www/html/nextcloud/core/skeleton`）\n\n删除这个目录下的文件即可，或者替换成你想要的文件\n\n![skeleton](https://s2.loli.net/2021/12/24/AuKlHyXRBCbEa2Y.png)\n","tags":["知识","Linux","nextcloud"],"categories":["Linux","nextcloud"]},{"title":"MySQL获取表字段及注释","url":"/post/d438e44c.html","content":"\n#### 查看所有表的注释\n\n```mysql\nSELECT\n    table_name 表名,\n    table_comment 表说明\nFROM\n    information_schema. TABLES\nWHERE\n    table_schema = '数据库名'\nORDER BY\n    table_name ;\n```\n\n#### 查询所有表及字段的注释\n\n```mysql\nSELECT\n    a.table_name 表名,\n    a.table_comment 表说明,\n    b.COLUMN_NAME 字段名,\n    b.column_comment 字段说明,\n    b.column_type 字段类型,\n    b.column_key 约束\nFROM\n    information_schema. TABLES a\nLEFT JOIN information_schema. COLUMNS b ON a.table_name = b.TABLE_NAME\nWHERE\n    a.table_schema = '数据库名'\nORDER BY\n    a.table_name ;\n```\n\n#### 查询某表的所有字段的注释\n\n```mysql\nSELECT\n    COLUMN_NAME 字段名,\n    column_comment 字段说明,\n    column_type 字段类型,\n    column_key 约束\nFROM\n    information_schema. COLUMNS\nWHERE\n    table_schema = ‘数据库名’\nAND table_name = '表名';\n<br>\n或者 SHOW FULL COLUMNS\nFROM  表名;\n```\n\n#### 查看表生成的`DDL`， 注意表名不加单引号\n\n```mysql\nSHOW CREATE TABLE 表名;\n```\n\n#### 修改表注释\n\n```mysql\nALTER TABLE t_user COMMENT = '修改后的表注释信息 (用户信息表) ' ;\n```\n\n#### 修改字段注释\n\n```mysql\nALTER TABLE t_user MODIFY COLUMN id INT COMMENT '主键ID' ;\n```\n\n","tags":["知识","MySQL"],"categories":["MySQL"]},{"title":"若依-树表","url":"/post/b3f73e98.html","content":"\n### 树表效果\n\n![树表](https://i.loli.net/2021/06/16/WwYtrqDheX59n2S.gif)\n\n### 具体实现\n\n#### 表单部分\n\n```html\n<el-table\n  :data=\"businessplanList\"\n  row-key=\"id\"\n  ref=\"tableBusiness\"\n  default-expand-all\n  :tree-props=\"{children: 'children', hasChildren: 'hasChildren'}\"\n>\n```\n\n`row-key`：指定行的id\n\n`default-expand-all`：默认展开\n\n`:tree-props`：这个字段一般就这么写\n\n#### js代码\n\n```javascript\nthis.businessplanList = this.handleTree(response.rows, \"id\", \"parentId\");\n```\n\n### 树表的多选\n\n![树表多选](https://i.loli.net/2021/06/16/6hav2nxV81YXesA.gif)\n\n#### 全选的代码\n\n##### 表单部分\n\n```html\n<el-table \n  :data=\"businessplanList\"\n  row-key=\"id\"\n  ref=\"tableBusiness\"\n  default-expand-all\n  @select-all=\"selectAll\"\n  :tree-props=\"{children: 'children', hasChildren: 'hasChildren'}\"\n>\n```\n\n`@select-all=\"selectAll\"`\n\n##### js代码\n\n```javascript\nmethod: {\n  selectAll(selection) {\n    let flag = false; // 默认 为全不选\n    selection.forEach(item => {\n      if (item.parentId === 0) {\n        flag = true;\n        this.toggleSelection(item.children, true);\n      }\n    });\n    if (!flag) {\n      this.toggleSelection();\n    }\n  },\n}\n```\n\n```javascript\nmethod: {\n  toggleSelection(rows, flag) {\n    if (rows) {\n      rows.forEach(row => {\n        this.$refs.tableBusiness.toggleRowSelection(row, flag);\n      });\n    } else {\n      this.$refs.tableBusiness.clearSelection();\n    }\n  },\n}\n```\n\n#### 选中父节点自动选中子节点\n\n##### 表单部分\n\n```html\n<el-table \n  :data=\"businessplanList\"\n  row-key=\"id\"\n  ref=\"tableBusiness\"\n  default-expand-all\n  @select=\"rowSelect\"\n  @select-all=\"selectAll\"\n  :tree-props=\"{children: 'children', hasChildren: 'hasChildren'}\"\n>\n```\n\n`@select=\"rowSelect\"`\n\n##### js代码\n\n```javascript\nmethod: {\n  rowSelect(selection, row) {\n    // 选中并且为父节点\n    if (selection.indexOf(row) > -1 && row.parentId === 0) {\n      this.toggleSelection(row.children, true);\n    }\n      \n    // 取消选中并且为父节点\n    if (selection.indexOf(row) === -1 && row.parentId === 0) {\n      this.toggleSelection(row.children, false);\n    }\n      \n    // 取消选中并且不为父节点\n    // if (selection.indexOf(row) === -1 && row.parentId !== 0) {\n    //   this.msgSuccess(this.$refs.tree.getHalfCheckedKeys())\n    // }\n      \n    // 选中并且不为父节点\n    if (selection.indexOf(row) > -1 && row.parentId !== 0) {\n      this.toggleSelection(row, true);\n    }\n  },\n}\n```\n\n","tags":["ElementUI","若依","Vue"],"categories":["记录","框架","若依"]},{"title":"若依-参数验证","url":"/post/9daccfd.html","content":"\n### 效果展示\n\n![约束条件](https://i.loli.net/2021/05/26/DlyiX8oPM54NveR.gif)\n\n### 基本实现\n\n#### 定义约束条件\n\n```javascript\n// 表单校验\nreturn {\n    rules: {\n        contractNum: [\n            {required: true, message: \"合同号不能为空\", trigger: \"blur\"}\n        ],\n    }\n}\n```\n\n注意，这里的规则名`contractNum`对应了合同号字段\n\n#### 添加规则\n\n```html\n<el-form ref=\"contractNumForm\" :model=\"formData\" :rules=\"rules\">\n```\n\n#### 函数中添加判断语句\n\n```javascript\n/** 提交按钮 */\nsubmitForm() {\n    this.$refs[\"contractNumForm\"].validate(valid => {\n        if (valid) {\n            //业务代码\n        \t... ...\n        }\n    })\n},\n```\n\n注意，这里的`contractNumForm`对应了表单`ref`参数的值\n\n### 验证是否为数字\n\n要验证是否为数字，我们的验证语句需要这么写：\n\n```javascript\n{type: 'number', message: \"数量必须为数字\", trigger: [\"blur\", \"change\"]}\n```\n\n**同时**，在表单中需要给`v-model`字段参数加上`.number`，即\n\n````html\n<el-input v-model.number=\"formData.amount\" placeholder=\"数量\" clearable>\n````\n\n### 验证是否为纯数字(整数、小数)\n\n#### 效果\n\n![纯数字验证](https://i.loli.net/2021/06/11/FCpiTjfMgeH57uR.gif)\n\n#### 如何实现\n\n##### 自定义验证方法\n\n在`ruoyi-ui/src/utils/validate.js`中，自定义判定纯数字的接口方法如下：\n\n```javascript\n/**\n * 纯数字校验\n * @param rule\n * @param value\n * @param callback\n */\nexport function validateNumber(rule, value, callback) {\n    let numberReg = /^\\d+$|^\\d+[.]?\\d+$/\n    if (value !== '') {\n        if (!numberReg.test(value)) {\n            callback(new Error('请输入数字'))\n        } else {\n            callback()\n        }\n    } else {\n        callback(new Error('请输入值'))\n    }\n}\n```\n\n##### 导入\n\n```javascript\nimport {validateNumber} from \"@/utils/validate\";\n```\n\n##### 参数验证\n\n```javascript\ntotalPrice: [\n  {required: true, message: '总价不能为空', trigger: [\"blur\", \"change\"]},\n  {validator: validateNumber, trigger: [\"blur\", \"change\"]}\n]\n```\n\n","tags":["ElementUI","若依","Vue"],"categories":["记录","框架","若依"]},{"title":"若依前后端分离版Windows服务器部署","url":"/post/4a61743c.html","content":"\n### 准备工作\n\n需要服务器安装Java环境，Mysql，Redis，Nginx，步骤本文略。\n\n### 前端部署\n\n#### 编译\n\n如果你使用`IDEA`，那么进入目录`RuoYi-Vue/ruoyi-ui`找到`package.json`文件，点击右键，选择`Show npm Scripts`，显示出可以运行的npm脚本\n\n![npm脚本](https://i.loli.net/2021/06/10/ePFOJcpghN7XA9M.png)\n\n在可以运行的npm脚本中，双击`build:prod`，\n\n![build:prod](https://i.loli.net/2021/06/10/S2FOPAalU4XKmiy.png)\n\n编译后的文件就在`ruoyi-ui/dist`，将整个dist文件夹复制到服务器上即可\n\n![dist](https://i.loli.net/2021/06/10/zMJhmAF3s6iwxqO.png)\n\n#### 部署\n\n服务器上下载并配置Nginx，可以参考[本文](http://www.garfielder.com/post/115fa29.html)\n\n在Nginx安装目录下，输入命令`start nginx`启动Nginx服务\n\n之后去Nginx的安装目录下的`conf`文件夹下，修改Nginx的配置文件`nginx.conf`\n\n![nginx.conf](https://i.loli.net/2021/06/10/HmJpqiYvx6yQOTt.png)\n\n配置如下：\n\n```shell\nworker_processes  1;\nworker_rlimit_nofile 65535;\n \nevents {\n    worker_connections  1024;\n}\n \nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n \n    server {\n        listen       82;\n        server_name  localhost;\n \n\t\tlocation / {\n            root   E:/qlj/dist;\n            index  index.html index.htm;\n        }\n\t\t\n\t\tlocation /prod-api/{\n\t\t\tproxy_set_header Host $http_host;\n\t\t\tproxy_set_header X-Real-IP $remote_addr;\n\t\t\tproxy_set_header REMOTE-HOST $remote_addr;\n\t\t\tproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\t\t\tproxy_pass http://localhost:8080/;\n\t\t}\n\t\tlocation /boom {\n\t\t\tproxy_redirect off;\n\t\t\tproxy_pass http://localhost:8080/;\n\t\t\tproxy_set_header Host $http_host;\n\t\t\tproxy_set_header X-Real-IP $remote_addr;\n\t\t\tproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\t\t}\n \n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n}\n```\n\n需要注意的参数：\n\n`listen  82`：这个是监听的端口，访问\"服务器地址:82\"这个地址的时候，就会被Nginx监听\n\n`root  E:/qlj/dist;`：这个是编译的dist文件夹，在这里做静态资源\n\n进入Nginx目录并运行`cmd`，执行`nginx -s reload`命令，就可以重新加载Nginx静态资源了\n\n这样前端就部署好了。之后通过“服务器地址:82”就可以访问到静态的网页了\n\n![前端](https://i.loli.net/2021/06/10/NqFDXVektin1YMo.png)\n\n### 后端部署\n\n#### 打包\n\n在`ruoyi`项目的`bin`目录下执行`package.bat`打包Web工程，生成war/jar包文件\n\n![package](https://i.loli.net/2021/06/10/J5HNRaVK8ZU7bnE.png)\n\n然后会在项目下生成`target`文件夹包含`war`或`jar`，本项目包所在地址`RuoYi-Vue/ruoyi-admin/target/ruoyi-admin.jar`，将`jar`包复制到服务器上即可\n\n最后，在服务器上jar包所在目录下，进行`java -jar ruoyi-admin.jar`运行就可以了\n\n![运行成功](https://i.loli.net/2021/06/10/TbIPuZXe1AsqzYl.png)\n\n![界面](https://i.loli.net/2021/06/10/LEZ9UV3jhMCm5s7.png)\n\n","tags":["Windows","若依","Nginx"],"categories":["记录","Windows","若依","Nginx"]},{"title":"Nginx在Windows服务器上的部署","url":"/post/115fa29.html","content":"\n### Nginx为何物\n\nNginx (engine x) 是一个高性能的HTTP和反向代理服务器，也是一个IMAP/POP3/SMTP服务器。它也是一种轻量级的Web服务器，可以作为独立的服务器部署网站（类似Tomcat）。它高性能和低消耗内存的结构受到很多大公司青睐，如淘宝网站架设。\n\n### 下载安装部署\n\n#### 下载\n\n进入[Nginx下载界面](http://nginx.org/en/download.html)，本例需要下载Windows版本的稳定版本Nginx，如图\n\n![Nginx下载](https://i.loli.net/2021/06/10/opW29BiDsIwg6LO.png)\n\n远程连接：`Win+R`后输入`mstsc`\n\n#### 安装部署\n\n下载完成后，解压缩，运行`cmd`，使用命令来启动Nginx服务，**注意**：这里不要直接双击运行nginx.exe！\n\n进入`nginx-1.20.1`，运行`cmd`，执行命令`start nginx`\n\n查看任务进程是否存在，可以执行命令`tasklist /fi \"imagename eq nginx.exe\"`\n\n![查看进程](https://i.loli.net/2021/06/10/ZKsGbMcqhDfVid6.png)\n\n#### 验证是否部署成功\n\n在`conf`目录下找到`nginx.conf`使用txt文本打开，找到`server`这个节点，查看`listen`和`server_name`，\n\n![nginx.conf](https://i.loli.net/2021/06/10/cpoFD8IhyRgPZxw.png)\n\n之后就打开浏览器访问刚才的域名及端口http://localhost:80，出现欢迎页就说明部署成功了\n\n![成功](https://i.loli.net/2021/06/10/zIN4vsmZAY3QVbw.png)\n\n#### 一些命令\n\n##### 重启服务\n\n```shell\nnginx -s reload\n```\n\n##### 关闭服务\n\n快速停止\n\n```shell\nnginx -s stop\n```\n\n完整有序的关闭\n\n```shell\nnginx -s quit\n```\n\n### 问题记录\n\n#### 部署Vue项目到服务器，刷新任意界面报错404\n\n##### 解决方案\n\n编辑配置文件`nginx.conf`\n\n```shell\nvi nginx.conf\n \n输入命令 i 进入编辑模式,在指定位置添加代码\n \nlocation / {\n    root ...\n    index ...\n    try_files $uri $uri/ /index.html; ---解决页面刷新404问题\n}\n```\n\n保存退出并重启Nginx即可\n\n","tags":["Windows","Nginx"],"categories":["记录","Windows","Nginx"]},{"title":"Vue踩坑填坑合集","url":"/post/3739380.html","content":"\n### vue-router传参params为空\n\n#### 情景\n\n在使用`vue-router`时，通过`this.$router.push()`进行路由跳转，传参params为空\n\n#### 解决方法\n\n##### params传参\n\n路径不能使用 `path` 只能使用 `name`，否则 `params` 将无效\n\n```javascript\nthis.$router.push({\n    name: '...', \n    params: {id: '...'}\n})\n```\n\n取数据：`this.$route.params.id`\n\n##### query传参\n\n路径可以使用 `path` 或者 `name`\n\n```javascript\nthis.$router.push({\n    path: '/xxx', \n    query: {id: '...'}\n})\n```\n\n取数据：`this.$route.query.id`\n\n### 使用=将整个表单赋值的深浅拷贝问题\n\n观察下面这条语句：\n\n```javascript\nthis.form = this.temp;\n```\n\n其中，form和temp都是字典类型的数据，这里你是不是以为这条语句的作用是将temp的值赋给了form。但是当我们用`alert(this.form === this.temp)`的时候，输出值为true。因此，这里的=赋值偷偷启动了浅拷贝。\n\n为了避免这种情况，换种思路进行深拷贝即可：\n\n```javascript\ntempToForm() {\n    for (let key in this.temp) {\n        this.form[key] = this.temp[key]\n    }\n},\n```\n\n**最新方法**\n\n通过`json`的方式实现\n\n```javascript\nfunction (obj) {\n    let tmp = JSON.stringify(obj); \n    let result = JSON.parse(tmp); \n    return result;\n}\n```\n\n### vue中的name的作用\n\n官方文档如下：\n\n![官方文档](https://i.loli.net/2021/08/12/QD8f5kjKZu34x62.png)\n\n这个解释并不通俗易懂，下面是比较直白的解释：\n\n#### 递归组件运用\n\n```vue\n<template>\n  <article>\n    <div class=\"item\" v-for=\"(item,index) in list\" :key=\"index\">\n      <div class=\"item-title\">\n        <span class=\"item-title-ticket\"></span>\n        {{ item.title }}\n      </div>\n      <div v-if=\"item.children\" class=\"item-children\">\n        <detail-list :list=\"item.children\"></detail-list>\n      </div>\n    </div>\n  </article>\n</template>\n<script>\nexport default {\n  name: \"DetailList\",  /*指组件自身组件调用自身组件*/\n  props: {\n    list: Array\n  },\n  data() {\n    return {};\n  }\n};\n</script>\n```\n\n#### keep-alive\n\nkeep-alive包裹动态组件时，会缓存不活动的组件实例，会出现include和exclude属性，包含或者排除指定name组件\n\n```vue\n<div id=\"app\"> \n   <keep-alive exclude=\"compA\">\n      <router-view/>\n   </keep-alive>\n</div>\n\nexclude=\"compA\"   /*keep-alive属性对compA组件不生效*/\n```\n\n#### vue-tools插件调试\n\n- 组件未定义name属性\n- 组件将显示成，这很没有语义\n- 通过提供name选项，可以获得更有语义信息的组件树\n","tags":["Vue"],"categories":["记录","Vue"]},{"title":"前端三巨头技巧记录","url":"/post/f05fb1b7.html","content":"\n\n\n### JavaScript\n\n#### 获取{}类型数据长度\n\n```javascript\nObject.keys(data).length\n```\n\n#### 三元表达式\n\n```javascript\nvar str = grade>=60 ? '及格': '不及格';\n```\n\n#### 数组筛选(字典数据)\n\n类似于python中的List，JavaScript中的Array也可以进行筛选\n\n```javascript\n// 这个是例子中的被筛选数组\nvar aim = [\n    {name: 'Anne', age: 23, gender: 'female'},\n    {name: 'Leila', age: 16, gender: 'female'},\n    {name: 'Jay', age: 19, gender: 'male'},\n    {name: 'Mark', age: 40, gender: 'male'}\n]\n```\n\n单条件单数据筛选\n\n```javascript\n// 根据单个名字筛选\nfunction filterByName(aim, name) {\n    return aim.filter(item => item.name == name)\n}\n// 输入 aim 'Leila' 期望输出为 [{name:'Leila', age: 16, gender:'female'}]\nconsole.log(filterByName(aim, 'leila'))\n```\n\n#### 字符串切割\n\n这里推荐`split()`函数\n\n##### 语法\n\n```javascript\nstringObject.split(separator,howmany)\n```\n\n`separator`：必需。字符串或正则表达式，从该参数指定的地方分割 stringObject\n\n`howmany`：可选。该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度\n\n##### 返回值\n\n一个字符串数组。该数组是通过在 *separator* 指定的边界处将字符串 stringObject 分割成子串创建的。返回的数组中的字串不包括 *separator* 自身\n\n##### 例子\n\n```javascript\n\"2:3:4:5\".split(\":\")\t//将返回[\"2\", \"3\", \"4\", \"5\"]\n\"|a|b|c\".split(\"|\")\t//将返回[\"\", \"a\", \"b\", \"c\"]\n```\n\n#### 首字母大写\n\n```javascript\nvar str = 'test string';\n// 只需要一行代码即可\nstr = str.replace(str[0],str[0].toUpperCase());\nconsole.log(str);\n// 输出：Test string\n```\n\n#### 字符串拼接\n\n推荐`join()`方法\n\n```javascript\nvar s = \"JavaScript\" , a = [];\nfor (var i = 0; i < 1000; i ++) {\n    a.push(s);\nvar str = a.join(\"\");\na = null;\ndocument.write(str);\n```\n\n#### sessionStorage用法\n\n使用 `sessionStorage` 创建一个本地存储的 `name/value` 对，用于临时保存同一窗口(或标签页)的数据，在关闭窗口或标签页之后将会删除这些数据\n\n如果你想在浏览器窗口关闭后还保留数据，可以使用 [localStorage](https://www.runoob.com/jsref/prop-win-localstorage.html) 属性， 该数据对象没有过期时间，今天、下周、明年都能用，除非你手动去删除\n\n##### 语法\n\n保存数据\n\n```javascript\nsessionStorage.setItem(\"key\", \"value\");\n```\n\n读取数据\n\n```javascript\nvar lastname = sessionStorage.getItem(\"key\");\n```\n\n删除指定键的数据\n\n```javascript\nsessionStorage.removeItem(\"key\");\n```\n\n删除所有数据\n\n```javascript\nsessionStorage.clear();\n```\n\n**坑！！**Chrome 浏览器，_blank 方式新开窗口，sessionStorage 存储的数据会丢失\n\n#### includes(), startsWith(), endsWith()\n\n传统上，JavaScript 只有`indexOf`方法，可以用来确定一个字符串是否包含在另一个字符串中。ES6 又提供了三种新方法。\n\n- includes()：返回布尔值，表示是否找到了参数字符串。\n- startsWith()：返回布尔值，表示参数字符串是否在原字符串的头部。\n- endsWith()：返回布尔值，表示参数字符串是否在原字符串的尾部。\n\n```javascript\nlet s = 'Hello world!';\n\ns.startsWith('Hello') // true\ns.endsWith('!') // true\ns.includes('o') // true\n\n// 这三个方法都支持第二个参数，表示开始搜索的位置\ns.startsWith('world', 6) // true\ns.endsWith('Hello', 5) // true\ns.includes('Hello', 6) // false\n```\n\n#### replaceAll()替换全部\n\n字符串的实例方法`replace()`只能替换第一个匹配，因此引入了`replaceAll()`方法，可以一次性替换所有匹配\n\n```javascript\n'aabbcc'.replaceAll('b', '_')\n// 'aa__cc'\n```\n\n#### 去除小数部分\n\n`Math.trunc`方法用于去除一个数的小数部分，返回整数部分\n\n```javascript\nMath.trunc(4.1) // 4\nMath.trunc(4.9) // 4\nMath.trunc(-4.1) // -4\nMath.trunc(-4.9) // -4\nMath.trunc(-0.1234) // -0\n```\n\n#### 替代函数的 apply 方法\n\n```javascript\n// ES5 的写法\nMath.max.apply(null, [14, 3, 77])\n\n// ES6 的写法\nMath.max(...[14, 3, 77])\n\n// 等同于\nMath.max(14, 3, 77);\n```\n\n另一个例子是通过`push`函数，将一个数组添加到另一个数组的尾部\n\n```javascript\n// ES5的 写法\nvar arr1 = [0, 1, 2];\nvar arr2 = [3, 4, 5];\nArray.prototype.push.apply(arr1, arr2);\n\n// ES6 的写法\nlet arr1 = [0, 1, 2];\nlet arr2 = [3, 4, 5];\narr1.push(...arr2);\n// [0, 1, 2, 3, 4, 5]\n```\n\n复制数组\n\n使用扩展运算符会返回原数组的克隆，再修改`a2`就不会对`a1`产生影响\n\n```javascript\nconst a1 = [1, 2];\n// 写法一\nconst a2 = [...a1];\n// 写法二\nconst [...a2] = a1;\n```\n\n#### Object.keys()，Object.values()，Object.entries() \n\n`Object.keys`方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键名；`Object.values`方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值；`Object.entries()`方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值对数组\n\n```javascript\nvar obj = { foo: 'bar', baz: 42 };\nObject.keys(obj)\n// [\"foo\", \"baz\"]\n\nconst obj = { foo: 'bar', baz: 42 };\nObject.values(obj)\n// [\"bar\", 42]\n\nconst obj = { foo: 'bar', baz: 42 };\nObject.entries(obj)\n// [ [\"foo\", \"bar\"], [\"baz\", 42] ]\n```\n\n\n\n### HTML\n\n#### `<i>`和`<em>`的区别\n\n就表现而言`<em>`和`<i>`表现都一样，都是表示斜体。\n\n但是`<em>`标签是“含有语义”的标签，搜索引擎会了解这些语义。其在HTML中是特意被设定为表示“强调”的意思。当发现这些表示“强调”的标签时，一些屏幕阅读器可能使用不同的inflection，更利于SEO\n\n#### 时间精确到时分秒\n\n```html\n<span>{{ parseTime(scope.row.actBeginTime, '{y}-{m}-{d} {h}:{i}:{s}') }}</span>\n```\n\n### CSS\n\n","tags":["JavaScript"],"categories":["记录","JavaScript"]},{"title":"若依-权限","url":"/post/2e09b3e9.html","content":"\n### 权限\n\n权限系统是一个系统中非常重要的部分，不同的角色对于系统拥有着不同的操作权限或者操作界面或者其他。本文主要记录若依框架的权限使用。\n\n### 效果\n\n一个具体案例：假如我们给超级管理员一个`导出`的权限，普通角色则没有`导出`权限，即：\n\n![普通角色](https://i.loli.net/2021/06/02/VTUSg1fQ5ojJekz.png)\n\n![管理员界面](https://i.loli.net/2021/06/02/Nywa2IlkV8PUvit.png)\n\n### 具体实现\n\n#### 准备工作\n\n##### 定义角色\n\n进入`角色管理`，添加自己的角色，具体步骤略\n\n![角色](https://i.loli.net/2021/06/02/cKPUGklvHIihjSf.png)\n\n##### 添加用户\n\n进入`用户管理`，添加自己的用户，指定相应的角色，具体步骤略\n\n![用户](https://i.loli.net/2021/06/02/YBl2HuICkQG7amT.png)\n\n至此，使用权限的准备工作已经做好。同时，**确保你使用过`代码生成`模块中的`SQL`文件将相应的权限数据导入了数据库中**。就比如这里的`导出`功能，你可以进入`菜单管理`来查看或者直接查看数据库\n\n![导出功能](https://i.loli.net/2021/06/02/vz1TACeWplk3qoP.png)\n\n#### 代码实现\n\n##### 前端\n\n```html\n<el-button\n    v-hasPermi=\"['qljsystem:contract:export']\"\n    v-hasRole=\"['admin']\">导出\n</el-button>\n```\n\n**使用权限字符串 v-hasPermi**\n\n```html\n// 单个\n<el-button v-hasPermi=\"['system:user:add']\">存在权限字符串才能看到</el-button>\n// 多个\n<el-button v-hasPermi=\"['system:user:add', 'system:user:edit']\">包含权限字符串才能看到</el-button>\n```\n\n**使用角色字符串 v-hasRole**\n\n```html\n// 单个\n<el-button v-hasRole=\"['admin']\">管理员才能看到</el-button>\n// 多个\n<el-button v-hasRole=\"['role1', 'role2']\">包含角色才能看到</el-button>\n```\n\n##### 后端\n\n```java\n@PreAuthorize(\"@ss.hasPermi('qljsystem:contract:export')\")\n@Log(title = \"合同导出\", businessType = BusinessType.EXPORT)\n@GetMapping(\"/export\")\npublic AjaxResult export(QljContract qljContract)\n{\n    List<QljContract> list = qljContractService.selectQljContractList(qljContract);\n    ExcelUtil<QljContract> util = new ExcelUtil<QljContract>(QljContract.class);\n    return util.exportExcel(list, \"qljcontract\");\n}\n```\n\n**数据权限示例**\n\n```java\n// 符合system:user:list权限要求\n@PreAuthorize(\"@ss.hasPermi('system:user:list')\")\n\n// 不符合system:user:list权限要求\n@PreAuthorize(\"@ss.lacksPermi('system:user:list')\")\n\n// 符合system:user:add或system:user:edit权限要求即可\n@PreAuthorize(\"@ss.hasAnyPermi('system:user:add,system:user:edit')\")\n```\n\n**角色权限示例**\n\n```java\n// 属于user角色\n@PreAuthorize(\"@ss.hasRole('user')\")\n\n// 不属于user角色\n@PreAuthorize(\"@ss.lacksRole('user')\")\n\n// 属于user或者admin之一\n@PreAuthorize(\"@ss.hasAnyRoles('user,admin')\")\n```\n\n### 表格字段权限控制\n\n由于目前若依框架没有提供，因此使用`v-if`和全局判断函数来手动设置\n\n一、前端字段设置\n\n```html\n<!-- 角色权限 -->\n<el-table-column label=\"合同号\" prop=\"contractNum\" v-if=\"checkRole(['admin'])\"/>\n<!-- 数据权限 -->\n<el-table-column label=\"合同号\" prop=\"contractNum\" v-if=\"checkPermi(['system:user:add', 'system:user:edit'])\"/>\n```\n\n二、导入全局判断函数\n\n```javascript\nimport { checkPermi, checkRole } from \"@/utils/permission\";\n```\n\n三、设置函数\n\n```javascript\nexport default{\n   methods: {\n    checkPermi,\n    checkRole\n  }\n}\n```\n\n### 表格数据权限控制\n\n前一个表格字段权限控制控制的是`列`，本部分介绍下我是怎么实现`行`的权限控制\n\n#### 效果\n\n![管理员界面](https://i.loli.net/2021/06/03/zQXaMWtcIYNi7mw.png)\n\n![技术人员界面](https://i.loli.net/2021/06/03/Q7DyO1CarXURleW.png)\n\n#### 如何实现\n\n思路：获取当前登录用户，如果角色为技术人员，则筛选出权限内的数据\n\n##### 获取登录用户的角色\n\n```javascript\n/** 当前登录用户角色 */\nloginUserRoleIs(param) {\n  return this.$store.state.user.roles.indexOf(param) !== -1\n},\n```\n\n##### 筛选函数\n\n此段代码可以参考[本文](http://www.garfielder.com/post/f05fb1b7.html)\n\n```javascript\nfilterArray(aim, reg) {\n  return aim.filter(item => item.docType === reg)\n}\n```\n\n##### 筛选数据\n\n此段代码可以参考[本文](http://www.garfielder.com/post/f05fb1b7.html)\n\n```javascript\ngetContractDocList() {\n  getContractdoc(this.formData.id).then(response => {\n    this.docList = this.loginUserRoleIs('tech') ? this.filterArray(response.data, 2) : response.data;\n    this.total = this.docList.length;\n  })\n},\n```\n\n\n\n### 常见问题\n\n#### 提示您没有数据权限\n\n这种情况都属于权限标识配置不对，需要在`菜单管理`配置好权限标识（菜单&按钮）\n\n1. 确认此用户是否已经配置角色\n\n   ![确认此用户是否已经配置角色](https://i.loli.net/2021/06/02/BeZkuKcJIQSb63C.png)\n\n2. 确认此角色是否已经配置菜单权限\n\n   ![确认此角色是否已经配置菜单权限](https://i.loli.net/2021/06/02/P1CHaeXEDupdIRw.png)\n\n3. 确认此菜单权限标识是否和后台代码一致\n\n如参数管理\n后台配置`@PreAuthorize(\"@ss.hasPermi('system:config:query')\")`对应参数管理权限标识为`system:config:query`\n\n注：如需要角色权限，配置角色权限字符 使用`@PreAuthorize(\"@ss.hasRole('admin')\")`\n\n","tags":["ElementUI","若依","Vue"],"categories":["记录","框架","若依"]},{"title":"若依-数据字典","url":"/post/bce806cc.html","content":"\n### 创建数据字典\n\n略过，可以参考[说明书](http://www.garfielder.com/post/1bde0d35.html)第一部分\n\n### 调用数据字典（下拉框）\n\n#### 效果\n\n![下拉框](https://i.loli.net/2021/05/26/2aBkAbj1XRtYH9T.png)\n\n#### 添加选项\n\n```html\n<el-form-item label=\"合同类别\" prop=\"contractType\">\n  <el-select v-model=\"queryParams.contractType\" placeholder=\"请选择合同类别\" clearable size=\"small\">\n    <el-option\n      v-for=\"dict in contractTypeOptions\"\n      :key=\"dict.dictValue\"\n      :label=\"dict.dictLabel\"\n      :value=\"dict.dictValue\"\n    />\n  </el-select>\n</el-form-item>\n```\n\n#### 添加参数\n\n```javascript\ndata() {\n  return {\n    // 状态数据字典\n    contractTypeOptions: [],\n  }\n}\n```\n\n#### 添加初始化函数\n\n```javascript\ncreated() {\n  this.getDicts(\"qlj_contract_type\").then(response => {\n    this.contractTypeOptions = response.data;\n  });\n},\n```\n\n### 调用数据字典（表单）\n\n#### 效果\n\n![表单](https://i.loli.net/2021/05/26/z8pjsyiZvKRLYJB.png)\n\n#### 添加字典翻译函数\n\n```javascript\nmethods: {\n  // 字典状态字典翻译\n  contractTypeFormat(row, column) {\n    return this.selectDictLabel(this.contractTypeOptions, row.contractType);\n  },\n}\n```\n\n#### 添加翻译参数\n\n```html\n<el-table-column label=\"合同类别\" prop=\"contractType\" :formatter=\"contractTypeFormat\"/>\n```\n\n","tags":["ElementUI","若依","Vue"],"categories":["记录","框架","若依"]},{"title":"若依-PDF在线预览","url":"/post/1681b738.html","content":"\n### PDF在线预览\n\n这是一个非常常见的功能模块，在线预览可以很方便的查看文件。本文基于`pdf.js`，简单介绍若依框架实现PDF在线预览的功能。\n\n### 开始\n\n#### 效果\n\n![PDF在线预览](https://i.loli.net/2021/05/24/f8uWbZp4LerdEMA.gif)\n\n#### 具体步骤\n\n##### 下载pdf.js\n\n进入[下载地址](http://mozilla.github.io/pdf.js/getting_started/#download)，下载稳定版到本机\n\n![下载稳定版](https://i.loli.net/2021/05/24/bQGINJaumSRDq3M.png)\n\n##### 放入项目中\n\n解压文件后，将里面的文件拷贝到项目中的`public`目录下\n\n![路径](https://i.loli.net/2021/05/24/3ecs6k8wlIzrujh.png)\n\n##### 代码\n\n```javascript\nwindow.open('/pdf/web/viewer.html?file=' + path);    // path是文件的全路径地址\n```\n\n```javascript\n/** 附件预览实例 */\nhandleView(row) {\n    const id = row.id || this.ids\n    getContractDocById(id).then(response => {\n        window.open('/pdf/web/viewer.html?file=' + response.data.url)\n    });\n},\n```\n\n### 出现的问题\n\n#### file origin does not match viewer's\n\n##### 原因\n\n跨域\n\n##### 解决方案\n\n直接注释掉`web/viewer.js`中的这个部分，不去判断跨域即可\n\n```javascript\nif (origin !== viewerOrigin && protocol !== \"blob:\") {\n    throw new Error(\"file origin does not match viewer's\");\n}\n```\n\n\n\n","tags":["ElementUI","若依","Vue"],"categories":["记录","框架","若依"]},{"title":"Plotly中的Filled Area Plots","url":"/post/f0c1e91f.html","content":"\n### 填充区域图\n\n#### 效果图\n\n![Filled Area Plots](https://i.loli.net/2021/05/22/Hy48sx7hqJ2nTeu.png)\n\n#### 代码\n\n```python\nimport plotly.graph_objects as go\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=[1, 2, 3, 4], y=[0, 2, 3, 5], fill='tozeroy'))  # fill down to xaxis\nfig.add_trace(go.Scatter(x=[1, 2, 3, 4], y=[3, 5, 1, 7], fill='tonexty'))  # fill to trace0 y\n\nfig.show()\n\n```\n\n### 内部填充面积图\n\n#### 效果\n\n![In-Filling](https://i.loli.net/2021/05/22/3rzXQo9ulH6h8Ni.png)\n\n#### 代码\n\n```python\nimport plotly.graph_objects as go\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(\n    x=[1, 2, 3, 4], \n    y=[3, 4, 8, 3],                    \n    fill=None,\n    mode='lines',\n    line_color='indigo',))\nfig.add_trace(go.Scatter(\n    x=[1, 2, 3, 4],\n    y=[1, 6, 2, 6],\n    fill='tonexty',  # fill area between trace0 and trace1\n    mode='lines', line_color='indigo'))\n\nfig.show()\n\n```\n\n","tags":["知识","Dash"],"categories":["记录","Dash"]},{"title":"Plotly中的Bubble Charts","url":"/post/d0860a6c.html","content":"\n### 气泡图\n\n#### 效果\n\n![Bubble](https://i.loli.net/2021/05/22/3cqCSmQ6RhNTgWM.png)\n\n#### 代码\n\n```python\nimport plotly.express as px\n\ndf = px.data.gapminder()\n\nfig = px.scatter(df.query(\"year==2007\"), x=\"gdpPercap\", y=\"lifeExp\",\n                 size=\"pop\", color=\"continent\",\n                 hover_name=\"country\", log_x=True, size_max=60)\nfig.show()\n\n```\n\n使用`size`来定义气泡的大小\n\n### 设置大小和颜色\n\n#### 效果\n\n![size and color](https://i.loli.net/2021/05/22/YTBiwoh4dIOpkaV.png)\n\n#### 代码\n\n```python\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=[go.Scatter(\n    x=[1, 2, 3, 4], y=[10, 11, 12, 13],\n    mode='markers',\n    marker=dict(\n        color=['rgb(93, 164, 214)', 'rgb(255, 144, 14)',\n               'rgb(44, 160, 101)', 'rgb(255, 65, 54)'],\n        opacity=[1, 0.8, 0.6, 0.4],\n        size=[40, 60, 80, 100],\n    )\n)])\n\nfig.show()\n\n```\n\n### 设置色标\n\n#### 效果\n\n![colorscale](https://i.loli.net/2021/05/22/VoZfcHjTC9bJ6I4.png)\n\n#### 代码\n\n```python\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=[go.Scatter(\n    x=[1, 3.2, 5.4, 7.6, 9.8, 12.5],\n    y=[1, 3.2, 5.4, 7.6, 9.8, 12.5],\n    mode='markers',\n    marker=dict(\n        color=[120, 125, 130, 135, 140, 145],\n        size=[15, 30, 55, 70, 90, 110],\n        showscale=True\n    )\n)])\n\nfig.show()\n\n```\n\n[官方文档](https://plotly.com/python/bubble-charts/)\n\n","tags":["知识","Dash"],"categories":["记录","Dash"]},{"title":"Plotly中的Pie Charts","url":"/post/5c103b01.html","content":"\n### 饼图\n\n#### 效果\n\n![pie](https://i.loli.net/2021/05/22/qAOmZPjzo6hYBuE.png)\n\n#### 代码\n\n```python\nimport plotly.express as px\n\n# This dataframe has 244 lines, but 4 distinct values for `day`\ndf = px.data.tips()\nfig = px.pie(df, values='tip', names='day')\nfig.show()\n\n```\n\n这里会将values的值自动整合汇总\n\n### 饼图扇形颜色\n\n#### 效果\n\n![color](https://i.loli.net/2021/05/22/1Vr5jscMvWPuRkZ.png)\n\n#### 代码\n\n```python\nimport plotly.express as px\n\ndf = px.data.tips()\nfig = px.pie(df, values='tip', names='day', color_discrete_sequence=px.colors.sequential.RdBu)\nfig.show()\n\n```\n\n### 设置风格\n\n#### 效果\n\n![style](https://i.loli.net/2021/05/22/GZ8kAaguIwmVWhB.png)\n\n#### 代码\n\n```python\nimport plotly.graph_objects as go\n\ncolors = ['gold', 'mediumturquoise', 'darkorange', 'lightgreen']\n\nfig = go.Figure(data=[go.Pie(labels=['Oxygen', 'Hydrogen', 'Carbon_Dioxide', 'Nitrogen'],\n                             values=[4500, 2500, 1053, 500])])\nfig.update_traces(hoverinfo='label+percent', textinfo='value', textfont_size=20,\n                  marker=dict(colors=colors, line=dict(color='#000000', width=2)))\nfig.show()\n\n```\n\n### 圈图\n\n#### 效果\n\n![Donut](https://i.loli.net/2021/05/22/5LN3AeDTVnMuHbq.png)\n\n#### 代码\n\n```python\nimport plotly.graph_objects as go\n\nlabels = ['Oxygen', 'Hydrogen', 'Carbon_Dioxide', 'Nitrogen']\nvalues = [4500, 2500, 1053, 500]\n\n# Use `hole` to create a donut-like pie chart\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.3)])\nfig.show()\n\n```\n\n### 将扇区拉出\n\n#### 效果\n\n![pull](https://i.loli.net/2021/05/22/zP2veawsLSB13ck.png)\n\n#### 代码\n\n```python\nimport plotly.graph_objects as go\n\nlabels = ['Oxygen', 'Hydrogen', 'Carbon_Dioxide', 'Nitrogen']\nvalues = [4500, 2500, 1053, 500]\n\n# pull is given as a fraction of the pie radius\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, pull=[0, 0, 0.2, 0])])\nfig.show()\n\n```\n\n### 子图中的饼图\n\n#### 效果\n\n![pie in subplots](https://i.loli.net/2021/05/22/1DLnGrvOszJ2m5T.png)\n\n#### 代码\n\n```python\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nlabels = [\"US\", \"China\", \"European Union\", \"Russian Federation\", \"Brazil\", \"India\",\n          \"Rest of World\"]\n\n# Create subplots: use 'domain' type for Pie subplot\nfig = make_subplots(rows=1, cols=2, specs=[[{'type': 'domain'}, {'type': 'domain'}]])\nfig.add_trace(go.Pie(labels=labels, values=[16, 15, 12, 6, 5, 4, 42], name=\"GHG Emissions\"),\n              1, 1)\nfig.add_trace(go.Pie(labels=labels, values=[27, 11, 25, 8, 1, 3, 25], name=\"CO2 Emissions\"),\n              1, 2)\n\n# Use `hole` to create a donut-like pie chart\nfig.update_traces(hole=.4, hoverinfo=\"label+percent+name\")\n\nfig.update_layout(\n    title_text=\"Global Emissions 1990-2011\",\n    # Add annotations in the center of the donut pies.\n    annotations=[dict(text='GHG', x=0.21, y=0.5, font_size=20, showarrow=False),\n                 dict(text='CO2', x=0.79, y=0.5, font_size=20, showarrow=False)])\nfig.show()\n\n```\n\n### 面积与总计数成比例\n\n#### 效果\n\n![proportional](https://i.loli.net/2021/05/22/As57hripLw61Jfl.png)\n\n#### 代码\n\n```python\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nlabels = [\"Asia\", \"Europe\", \"Africa\", \"Americas\", \"Oceania\"]\n\nfig = make_subplots(1, 2, specs=[[{'type':'domain'}, {'type':'domain'}]],\n                    subplot_titles=['1980', '2007'])\nfig.add_trace(go.Pie(labels=labels, values=[4, 7, 1, 7, 0.5], scalegroup='one',\n                     name=\"World GDP 1980\"), 1, 1)\nfig.add_trace(go.Pie(labels=labels, values=[21, 15, 3, 19, 1], scalegroup='one',\n                     name=\"World GDP 2007\"), 1, 2)\n\nfig.update_layout(title_text='World GDP')\nfig.show()\n\n```\n\n`scalegroup='one'`即可\n\n### 朝阳图\n\n#### 效果\n\n![Sunburst](https://i.loli.net/2021/05/22/Oun7ji6xoSE8AJz.png)\n\n#### 代码\n\n```python\nimport plotly.graph_objects as go\n\nfig = go.Figure(go.Sunburst(\n    labels=[\"Eve\", \"Cain\", \"Seth\", \"Enos\", \"Noam\", \"Abel\", \"Awan\", \"Enoch\", \"Azura\"],\n    parents=[\"\", \"Eve\", \"Eve\", \"Seth\", \"Seth\", \"Eve\", \"Eve\", \"Awan\", \"Eve\"],\n    values=[10, 14, 12, 10, 2, 6, 6, 4, 4],\n))\nfig.update_layout(margin=dict(t=0, l=0, r=0, b=0))\n\nfig.show()\n\n```\n\n[官方文档](https://plotly.com/python/pie-charts/)\n\n\n\n","tags":["知识","Dash"],"categories":["记录","Dash"]},{"title":"Plotly中的Bar Charts","url":"/post/2525d526.html","content":"\n### 条形图\n\n#### 效果\n\n![Bar](https://i.loli.net/2021/05/22/STw2UJiGd9chXKR.png)\n\n#### 代码\n\n```python\nimport plotly.express as px\ndata_canada = px.data.gapminder().query(\"country == 'Canada'\")\nfig = px.bar(data_canada, x='year', y='pop')\nfig.show()\n\n```\n\n### 长格式数据\n\n#### 效果\n\n![Format](https://i.loli.net/2021/05/22/qGxABg6JtoynPIL.png)\n\n#### 代码\n\n```python\nimport plotly.express as px\n\nlong_df = px.data.medals_long()\n\nfig = px.bar(long_df, x=\"nation\", y=\"count\", color=\"medal\", title=\"Long-Form Input\")\nfig.show()\n\n```\n\n### 多面子图\n\n#### 效果\n\n![Facetted](https://i.loli.net/2021/05/22/PFxyzZHBoenErLp.png)\n\n#### 代码\n\n```python\nimport plotly.express as px\ndf = px.data.tips()\nfig = px.bar(df, x=\"sex\", y=\"total_bill\", color=\"smoker\", barmode=\"group\",\n             facet_row=\"time\", facet_col=\"day\",\n             category_orders={\"day\": [\"Thur\", \"Fri\", \"Sat\", \"Sun\"],\n                              \"time\": [\"Lunch\", \"Dinner\"]})\nfig.show()\n```\n\n其中，`barmode=\"group\"`防止堆叠，`category_orders`定义了行列\n\n### 自定义单个条形颜色\n\n#### 效果\n\n![Customizing](https://i.loli.net/2021/05/22/nOeo8dlAxHSwYq7.png)\n\n#### 代码\n\n```python\nimport plotly.graph_objects as go\n\ncolors = ['lightslategray',] * 5\ncolors[1] = 'crimson'\n\nfig = go.Figure(data=[go.Bar(\n    x=['Feature A', 'Feature B', 'Feature C',\n       'Feature D', 'Feature E'],\n    y=[20, 14, 23, 25, 22],\n    marker_color=colors # marker color can be a single color value or an iterable\n)])\nfig.update_layout(title_text='Least Used Feature')\nfig.show()\n\n```\n\n### 自定义宽度\n\n#### 效果\n\n![width](https://i.loli.net/2021/05/22/dSy6sp9LTRAtkI3.png)\n\n#### 代码\n\n```python\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=[go.Bar(\n    x=[1, 2, 3, 5.5, 10],\n    y=[10, 8, 6, 4, 2],\n    width=[0.8, 0.8, 0.8, 3.5, 4] # customize width here\n)])\n\nfig.show()\n\n```\n\n### 自定义基点\n\n#### 效果\n\n![base](https://i.loli.net/2021/05/22/PAOobhzdBFL6Xa9.png)\n\n#### 代码\n\n```python\nimport plotly.graph_objects as go\n\nyears = ['2016', '2017', '2018']\n\nfig = go.Figure()\nfig.add_trace(go.Bar(x=years, y=[500, 600, 700],\n                     base=[-500, -600, -700],\n                     marker_color='crimson',\n                     name='expenses'))\nfig.add_trace(go.Bar(x=years, y=[300, 400, 700],\n                     base=0,\n                     marker_color='lightslategrey',\n                     name='revenue'\n                     ))\n\nfig.show()\n\n```\n\n### 自定义间距\n\n#### 效果\n\n![Gaps](https://i.loli.net/2021/05/22/HYxdGnF4vaMKUPr.png)\n\n#### 代码\n\n```python\nimport plotly.graph_objects as go\n\nyears = [1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,\n         2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012]\n\nfig = go.Figure()\nfig.add_trace(go.Bar(x=years,\n                     y=[219, 146, 112, 127, 124, 180, 236, 207, 236, 263,\n                        350, 430, 474, 526, 488, 537, 500, 439],\n                     name='Rest of world',\n                     marker_color='rgb(55, 83, 109)'\n                     ))\nfig.add_trace(go.Bar(x=years,\n                     y=[16, 13, 10, 11, 28, 37, 43, 55, 56, 88, 105, 156, 270,\n                        299, 340, 403, 549, 499],\n                     name='China',\n                     marker_color='rgb(26, 118, 255)'\n                     ))\n\nfig.update_layout(\n    title='US Export of Plastic Scrap',\n    xaxis_tickfont_size=14,\n    yaxis=dict(\n        title='USD (millions)',\n        titlefont_size=16,\n        tickfont_size=14,\n    ),\n    legend=dict(\n        x=0,\n        y=1.0,\n        bgcolor='rgba(255, 255, 255, 0)',\n        bordercolor='rgba(255, 255, 255, 0)'\n    ),\n    barmode='group',\n    bargap=0.15,  # gap between bars of adjacent location coordinates.\n    bargroupgap=0.1  # gap between bars of the same location coordinate.\n)\nfig.show()\n\n```\n\n[官方文档](https://plotly.com/python/bar-charts/)\n\n","tags":["知识","Dash"],"categories":["记录","Dash"]},{"title":"若依-文件上传","url":"/post/4b456297.html","content":"\n### 文件上传\n\n文件上传是一个项目中非常常见的模块，本文简单介绍若依框架中`文件上传`模块（弹窗版）的代码流程（其实就是`element-UI`的文件上传部分）\n\n### 效果展示\n\n![文件上传](https://i.loli.net/2021/05/21/vAFWSYm73dNpt2a.gif)\n\n### 上代码\n\n#### 按钮及事件\n\n```html\n<el-button size=\"small\" type=\"primary\" @click=\"handleUpload\">点击上传</el-button>\n```\n\n#### 定义事件\n\n本例将实现一个弹窗版本，因此点击上传会弹出弹窗\n\n```javascript\n/** 上传操作 */\nhandleUpload() {\n    this.upload.title = \"上传文件\";\n    this.upload.open = true;\n},\n```\n\n#### 设计弹窗\n\n```html\n<!-- 文件上传对话框 -->\n<el-dialog :title=\"upload.title\" :visible.sync=\"upload.open\" width=\"400px\" append-to-body>\n  <el-upload\n    ref=\"upload\"\n    :limit=\"1\"\n    accept=\".pdf\"\n    :headers=\"upload.headers\"\n    :action=\"upload.url + '?updateSupport=' + upload.updateSupport\"\n    :disabled=\"upload.isUploading\"\n    :on-progress=\"handleFileUploadProgress\"\n    :on-success=\"handleFileSuccess\"\n    :auto-upload=\"false\"\n    drag\n  >\n    <i class=\"el-icon-upload\"></i>\n    <div class=\"el-upload__text\">将文件拖到此处，或<em>点击上传</em></div>\n    <div class=\"el-upload__tip\" style=\"color:red\" slot=\"tip\">仅允许导入“pdf”格式文件！</div>\n  </el-upload>\n  <div slot=\"footer\" class=\"dialog-footer\">\n    <el-button type=\"primary\" @click=\"submitFileForm\">确 定</el-button>\n    <el-button @click=\"upload.open = false\">取 消</el-button>\n  </div>\n</el-dialog>\n```\n\n这里使用到了[el-upload](https://element.eleme.cn/#/zh-CN/component/upload)模块，简单介绍下参数\n\n`ref`：标识整个el-upload便于后续绑定\n\n`:limit`：一次最多可以上传的文件数\n\n`accept`：允许上传的文件格式\n\n`:headers`：设置上传的请求头部\n\n`:action`：上传地址\n\n`:disabled`：是否弹出本地选择文件窗口\n\n`:on-progress`：上传过程中的处理\n\n`:on-success`：上传成功后的处理\n\n`:on-error`：上传失败后的处理\n\n`:auto-upload`：是否自动上传\n\n`drag`：允许拖入文件\n\n#### 定义upload参数\n\n```javascript\nupload: {\n    // 是否显示弹出层（用户导入）\n    open: false,\n    // 弹出层标题（用户导入）\n    title: \"\",\n    // 是否禁用上传\n    isUploading: false,\n    // 是否更新已经存在的用户数据\n    updateSupport: 0,\n    // 设置上传的请求头部\n    headers: { Authorization: \"Bearer \" + getToken() },\n    // 上传的地址\n    url: process.env.VUE_APP_BASE_API + \"/common/upload\"\n},\n```\n\n#### 定义处理函数\n\n```javascript\n// 文件上传中处理\nhandleFileUploadProgress(event, file, fileList) {\n    this.upload.isUploading = true;\n},\n// 文件上传成功处理\nhandleFileSuccess(response, file, fileList) {\n    console.log(file)\n    this.upload.open = false;\n    this.upload.isUploading = false;\n    this.$refs.upload.clearFiles();\n    this.$alert(response.msg, \"导入结果\", { dangerouslyUseHTMLString: true });\n},\n```\n\n#### 真正的上传函数\n\n至此，还剩一步，将文件真正的上传至服务器，我们定义上传函数如下：\n\n```javascript\n// 提交上传文件\nsubmitFileForm() {\n    this.$refs.upload.submit()\n},\n```\n\n需要注意我们一开始定义的`ref=\"upload\"`要和其他代码块中对应准确\n\n### 成功后的响应结果\n\n```json\n{\n    \"msg\":\"操作成功\",\n    \"fileName\":\"/profile/upload/2021/05/21/0e07395a-9062-4906-ac7b-7677c2081042.pdf\",\n    \"code\":200,\n    \"url\":\"http://localhost:8080/profile/upload/2021/05/21/0e07395a-9062-4906-ac7b-7677c2081042.pdf\"\n}\n```\n\n![响应结果](https://i.loli.net/2021/05/21/geUukyGXV2zHC17.png)\n\n### 修改上传文件大小\n\n在`ruoyi-admin/src/resources/application.yml`中，修改如下：\n\n![upload](https://i.loli.net/2021/05/24/TOzL6GWPYDnQHhr.png)\n\n在`ruoyi-common/src/main/java/com/ruoyi/common/utils/file/FileUploadUtils.java`中，修改如下：\n\n![max-size](https://i.loli.net/2021/05/24/a4uCklIHZoWQmXB.png)\n\n","tags":["ElementUI","若依","Vue"],"categories":["记录","框架","若依"]},{"title":"Navicat添加外键","url":"/post/9f08f44a.html","content":"\n### 外键\n\n如果公共关键字在一个关系中是主关键字，那么这个公共关键字被称为另一个关系的外键。\n\n### 过程\n\n打开`Navicat`，在一张表右键，点击`设计表`，点击`外键`\n\n![外键](https://i.loli.net/2021/05/17/A67uw1zDB9aGkJs.png)\n\n点击`添加外键`，按顺序选择即可，名可以不用填写，保存后会自动生成。","tags":["MySQL","Navicat"],"categories":["记录"]},{"title":"若依-关联查询","url":"/post/7447556d.html","content":"\n### 背景\n\n众所周知，一个合同可能包含多个产品，因此基于产品的查询并关联合同是一个多对一的查询。我们就以产品-合同这两者为例介绍MyBatis的代码写法及配置\n\n### 过程\n\n#### 代码生成\n\n参考若依[代码生成](http://www.garfielder.com/post/a24d1725.html)的步骤，生成`产品模块`和`合同模块`\n\n![代码生成](https://i.loli.net/2021/05/17/SGPaTZvbxMER7r3.png)\n\n注意，一般的代码生成流程需要先运行一下`.sql`文件，这里我们只需要运行`产品模块`的`.sql`文件，不需要运行`合同模块`的`.sql`文件。同时，这两模块的代码文件均需要放置到对应位置\n\n#### ~~数据库添加外键~~(无需此步骤)\n\n~~如果公共关键字在一个关系中是主关键字，那么这个公共关键字被称为另一个关系的外键(来自百度百科)。因此，我们需要为`qlj_product`产品表[添加外键](http://www.garfielder.com/post/9f08f44a.html)~~\n\n![外键](https://i.loli.net/2021/05/17/CV1bcXTeRlipIPj.png)\n\n#### domain文件添加字段\n\n在`产品`代码文件中添加\n\n```java\nprivate QljContract contract;\npublic QljContract getQljContract() { return contract; }\npublic void setQljContract(QljContract contract) { this.contract = contract; }\n\n// toString()函数中添加下面这一行\n.append(\"contract\", getQljContract())\n```\n\n在`合同`代码文件中添加\n\n```java\nprivate List<QljProduct> product;\npublic List<QljProduct> getProduct() { return product; }\npublic void setProduct(List<QljProduct> product) { this.product = product; }\n\n// toString()函数中添加下面这一行\n.append(\"product\", getProduct())\n```\n\n#### xml文件\n\n在`产品`模板中添加关联语句\n\n```xml\n<resultMap type=\"QljProduct\" id=\"QljProductResult\">\n    ...\n    <result property=\"createTime\"    column=\"create_time\"    />\n    <result property=\"changeUser\"    column=\"change_user\"    />\n    <result property=\"changeTime\"    column=\"change_time\"    />\n    <result property=\"deleteFlag\"    column=\"delete_flag\"    />\n\n    <association property=\"contract\" select=\"getContract\" column=\"contract_id\" javaType=\"QljContract\"/>  // 添加这一句\n\n</resultMap>\n```\n\n其中，`property`字段映射实体类的字段或属性，`select`字段根据对应`id`绑定相关语句，`column`字段是数据库的列名或者列标签别名，`javaType`字段是完整Java类名或别名\n\n同时，添加对应的查询语句\n\n```xml\n<select id=\"getContract\" parameterType=\"int\" resultMap=\"QljContractResult\">\n    select * from qlj_contract where id = #{contract_id}\n</select>\n```\n\n最后，再将`qljContractResult`对应的模板从合同文件中复制过来\n\n```xml\n<resultMap type=\"QljContract\" id=\"QljContractResult\">\n    ...\n    <result property=\"createUser\"    column=\"create_user\"    />\n    <result property=\"createTime\"    column=\"create_time\"    />\n    <result property=\"changeUser\"    column=\"change_user\"    />\n    <result property=\"changeTime\"    column=\"change_time\"    />\n    <result property=\"deleteFlag\"    column=\"delete_flag\"    />\n</resultMap>\n```\n\n#### 浏览器控制台查看结果\n\n启动项目，打开浏览器开发者工具，点击`Network`，如果可以关联到合同信息，说明成功\n\n![开发者](https://i.loli.net/2021/05/17/437Lqugwz9PahNW.png)\n\n之后只需要在前端界面修改字段属性即可对应的展示了，例如\n\n```vue\n<el-table-column label=\"用户\" align=\"center\" prop=\"qljContract.user\" />\n```\n\n![效果](https://i.loli.net/2021/05/17/JtNRYKW96dTqx7m.png)\n\n### 关联查询\n\n#### 背景\n\n![查询](https://i.loli.net/2021/06/09/9dzksUqelyWa1J5.png)\n\n那么要如何进行关联查询呢\n\n#### 关联查询（基于本例）\n\n##### 准备工作\n\n首先，请确保自己能够实现本文前半段的内容\n\n##### 自定义查询类\n\n`ruoyi-system/src/main/java/com/ruoyi/qljsystem/domain`目录下，添加一个查询类`ProductQueryParam.java`，代码如下：\n\n```java\npackage com.ruoyi.qljsystem.domain;\npublic class ProductQueryParam {\n\n    private String productModel; //产品型号\n    private String productType; //产品分类\n    private String productNumber; //产品编号\n    private String drawingNumber; //图号\n    private String contractNum; //合同号\n    private String projectName; //项目名称\n    private Long deleteFlag; //删除标识\n\n    public String getProductModel() { return productModel; }\n    public void setProductModel(String productModel) { this.productModel = productModel; }\n\n    public String getProductType() { return productType; }\n    public void setProductType(String productType) { this.productType = productType; }\n\n    public String getProductNumber() { return productNumber; }\n    public void setProductNumber(String productNumber) { this.productNumber = productNumber; }\n\n    public String getDrawingNumber() { return drawingNumber; }\n    public void setDrawingNumber(String drawingNumber) { this.drawingNumber = drawingNumber; }\n\n    public String getContractNum() { return contractNum; }\n    public void setContractNum(String contractNum) { this.contractNum = contractNum; }\n\n    public String getProjectName() { return projectName; }\n    public void setProjectName(String projectName) { this.projectName = projectName; }\n\n    public Long getDeleteFlag() { return deleteFlag; }\n    public void setDeleteFlag(Long deleteFlag) { this.deleteFlag = deleteFlag; }\n\n}\n\n```\n\n##### 新建接口\n\n在对应的`js`文件中，添加接口如下\n\n```javascript\n// 关联查询\nexport function list(query) {\n  return request({\n    url: 'yoururl',\n    method: 'get',\n    params: query\n  })\n}\n```\n\n##### 修改controller、mapper、service层的参数\n\n这里仅仅以controller为例，mapper和service同理\n\n```java\n/** 关联查询 */\n@PreAuthorize(\"@ss.hasPermi('qljsystem:qljproduct:list')\")\n@GetMapping(\"/listpc\")\npublic TableDataInfo list(ProductQueryParam productQueryParam) {\n    startPage();\n    List<QljProduct> list = qljProductService.selectProductList(productQueryParam);\n    return getDataTable(list);\n}\n```\n\n##### xml\n\n在对应的`xml`文件中添加查询如下\n\n```xml\n<select id=\"selectProductList\" parameterType=\"ProductQueryParam\" resultMap=\"QljProductResult\">\n    select p.*\n    from qlj_product p left join qlj_contract c on p.contract_id=c.id\n    where 1=1\n    <if test=\"productModel != null \">and p.product_model like concat('%',#{productModel},'%')</if>\n    <if test=\"productType != null \">and p.product_type like concat('%',#{productType},'%')</if>\n    <if test=\"productNumber != null \">and p.product_number like concat('%',#{productNumber},'%')</if>\n    <if test=\"drawingNumber != null \">and p.drawing_number like concat('%',#{drawingNumber},'%')</if>\n    <if test=\"contractNum != null \">and c.contract_num like concat('%',#{contractNum},'%')</if>\n    <if test=\"projectName != null \">and c.project_name like concat('%',#{projectName},'%')</if>\n    <if test=\"deleteFlag != null \">and p.delete_flag like concat('%',#{deleteFlag},'%')</if>\n</select>\n```\n\n注意，这里需要准备好`resultMap`对应的模板\n\n```xml\n<resultMap type=\"QljProduct\" id=\"QljProductResult\">\n    ...\n    <association property=\"contract\" select=\"getContract\" column=\"contract_id\" javaType=\"QljContract\"/>\n</resultMap>\n```\n\n##### 前端写好对应参数\n\n```html\n<el-form-item label=\"合同号\" prop=\"contractNum\">\n  <el-input\n    v-model=\"queryParams.contractNum\"\n    placeholder=\"请输入合同号\"\n    @keyup.enter.native=\"handleQuery\"\n  />\n</el-form-item>\n```\n\n```javascript\ndata() {\n  return {\n    queryParams: {\n      ...\n      contractNum: null,\n      projectName: null\n    },\n  }\n}\n```\n\n#### 三表关联\n\n##### 查询\n\n```mysql\n<select id=\"selectProductlistSupply\" parameterType=\"ProductQueryParam\" resultMap=\"QljProductResult\">\n        select p.*, c.*, qip.*\n        from qlj_product p left join qlj_contract c on p.contract_id=c.id left join qlj_implementation_plan qip on p.id\n        = qip.product_id\n        where 1=1\n        <if test=\"contractNum != null \">and c.contract_num like concat('%',#{contractNum},'%')</if>\n        <if test=\"productModel != null \">and p.product_model like concat('%',#{productModel},'%')</if>\n        <if test=\"buyer != null \">and c.buyer like concat('%',#{buyer},'%')</if>\n        <if test=\"drawingNumber != null \">and p.drawing_number like concat('%',#{drawingNumber},'%')</if>\n        and p.delete_flag=0 order by p.id\n    </select>\n```\n\n##### 更新\n\n```mysql\n<update id=\"updateQljProductContractIm\" parameterType=\"QljProduct\">\n    update qlj_product p left join qlj_contract cc\n        on p.contract_id = cc.id left join qlj_implementation_plan qip \n        on p.id = qip.product_id\n    set qip.project_importance      = #{qljImplementationPlan.projectImportance},\n        cc.contract_num             = #{qljContract.contractNum},\n        qip.project_type            = #{qljImplementationPlan.projectType},\n        qip.material_batch          = #{qljImplementationPlan.materialBatch},\n        p.product_number            = #{productNumber},\n        cc.buyer                    = #{qljContract.buyer},\n        cc.ultimate_user            = #{qljContract.ultimateUser},\n        cc.project_name             = #{qljContract.projectName},\n        cc.project_name             = #{qljContract.projectName},\n        p.product_model             = #{productModel},\n        p.drawing_number            = #{drawingNumber},\n        p.power                     = #{power},\n        p.product_type              = #{productType},\n        qip.contract_delivery_date  = #{qljImplementationPlan.contractDeliveryDate},\n        qip.user_required_date      = #{qljImplementationPlan.userRequiredDate},\n        qip.planning_product_date   = #{qljImplementationPlan.planningProductDate},\n        qip.change_statement        = #{qljImplementationPlan.changeStatement},\n        qip.project_leading         = #{qljImplementationPlan.projectLeading},\n        qip.product_manager         = #{qljImplementationPlan.productManager},\n        qip.project_manager         = #{qljImplementationPlan.projectManager},\n        cc.contract_signer          = #{qljContract.contractSigner},\n        cc.contract_sign_depart     = #{qljContract.contractSignDepart},\n        cc.internal_project_tracker = #{qljContract.internalProjectTracker}\n    where p.id = #{id}\n</update>\n```\n\n","tags":["若依","MyBatis"],"categories":["记录","框架"]},{"title":"Plotly中的Line Charts","url":"/post/f8d43806.html","content":"\n### 线图\n\n#### 效果\n\n![Line](https://i.loli.net/2021/05/22/JKtYergwUmy7d6O.png)\n\n#### 代码\n\n```python\nimport plotly.express as px\n\ndf = px.data.gapminder().query(\"country=='Canada'\")\nfig = px.line(df, x=\"year\", y=\"lifeExp\", title='Life expectancy in Canada')\nfig.show()\n\n```\n\n### 样式线图\n\n#### 效果\n\n![Style](https://i.loli.net/2021/05/22/lhb7UuSpxHjArEc.png)\n\n#### 代码\n\n```python\nimport plotly.graph_objects as go\n\n# Add data\nmonth = ['January', 'February', 'March', 'April', 'May', 'June', 'July',\n         'August', 'September', 'October', 'November', 'December']\nhigh_2000 = [32.5, 37.6, 49.9, 53.0, 69.1, 75.4, 76.5, 76.6, 70.7, 60.6, 45.1, 29.3]\nlow_2000 = [13.8, 22.3, 32.5, 37.2, 49.9, 56.1, 57.7, 58.3, 51.2, 42.8, 31.6, 15.9]\nhigh_2007 = [36.5, 26.6, 43.6, 52.3, 71.5, 81.4, 80.5, 82.2, 76.0, 67.3, 46.1, 35.0]\nlow_2007 = [23.6, 14.0, 27.0, 36.8, 47.6, 57.7, 58.9, 61.2, 53.3, 48.5, 31.0, 23.6]\nhigh_2014 = [28.8, 28.5, 37.0, 56.8, 69.7, 79.7, 78.5, 77.8, 74.1, 62.6, 45.3, 39.9]\nlow_2014 = [12.7, 14.3, 18.6, 35.5, 49.9, 58.0, 60.0, 58.6, 51.7, 45.2, 32.2, 29.1]\n\nfig = go.Figure()\n# Create and style traces\nfig.add_trace(go.Scatter(x=month, y=high_2014, name='High 2014',\n                         line=dict(color='firebrick', width=4)))\nfig.add_trace(go.Scatter(x=month, y=low_2014, name = 'Low 2014',\n                         line=dict(color='royalblue', width=4)))\nfig.add_trace(go.Scatter(x=month, y=high_2007, name='High 2007',\n                         line=dict(color='firebrick', width=4, dash='dash') \n                         # dash options include 'dash', 'dot', and 'dashdot'\n))\nfig.add_trace(go.Scatter(x=month, y=low_2007, name='Low 2007',\n                         line = dict(color='royalblue', width=4, dash='dash')))\nfig.add_trace(go.Scatter(x=month, y=high_2000, name='High 2000',\n                         line = dict(color='firebrick', width=4, dash='dot')))\nfig.add_trace(go.Scatter(x=month, y=low_2000, name='Low 2000',\n                         line=dict(color='royalblue', width=4, dash='dot')))\n\n# Edit the layout\nfig.update_layout(title='Average High and Low Temperatures in New York',\n                   xaxis_title='Month',\n                   yaxis_title='Temperature (degrees F)')\n\n\nfig.show()\n\n```\n\n### 连接数据缺口\n\n#### 效果\n\n![Gaps](https://i.loli.net/2021/05/22/uJdmAhT25rDOV3l.png)\n\n#### 代码\n\n```python\nimport plotly.graph_objects as go\n\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=x,\n    y=[10, 20, None, 15, 10, 5, 15, None, 20, 10, 10, 15, 25, 20, 10],\n    name = '<b>No</b> Gaps', # Style name/legend entry with html tags\n    connectgaps=True # override default to connect the gaps\n))\nfig.add_trace(go.Scatter(\n    x=x,\n    y=[5, 15, None, 10, 5, 0, 10, None, 15, 5, 5, 10, 20, 15, 5],\n    name='Gaps',\n))\n\nfig.show()\n\n```\n\n### 线图插值\n\n#### 效果\n\n![Interpolation ](https://i.loli.net/2021/05/22/ZhA7p1E4lqRPaLk.png)\n\n#### 代码\n\n```python\nimport plotly.graph_objects as go\nimport numpy as np\n\nx = np.array([1, 2, 3, 4, 5])\ny = np.array([1, 3, 2, 3, 1])\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=x, y=y, name=\"linear\",\n                    line_shape='linear'))\nfig.add_trace(go.Scatter(x=x, y=y + 5, name=\"spline\",\n                    text=[\"tweak line smoothness<br>with 'smoothing' in line object\"],\n                    hoverinfo='text+name',\n                    line_shape='spline'))\nfig.add_trace(go.Scatter(x=x, y=y + 10, name=\"vhv\",\n                    line_shape='vhv'))\nfig.add_trace(go.Scatter(x=x, y=y + 15, name=\"hvh\",\n                    line_shape='hvh'))\nfig.add_trace(go.Scatter(x=x, y=y + 20, name=\"vh\",\n                    line_shape='vh'))\nfig.add_trace(go.Scatter(x=x, y=y + 25, name=\"hv\",\n                    line_shape='hv'))\n\nfig.update_traces(hoverinfo='text+name', mode='lines+markers')\nfig.update_layout(legend=dict(y=0.5, traceorder='reversed', font_size=16))\n\nfig.show()\n\n```\n\n其中，h代表horizontal，水平；v代表vertical，垂直\n\n### 颜色填充\n\n#### 效果\n\n![Fill](https://i.loli.net/2021/05/22/ZQYTWaXJmD5lknR.png)\n\n#### 代码\n\n```python\nimport plotly.graph_objects as go\n\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nx_rev = x[::-1]\n\n# Line 1\ny1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny1_upper = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\ny1_lower = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\ny1_lower = y1_lower[::-1]\n\n# Line 2\ny2 = [5, 2.5, 5, 7.5, 5, 2.5, 7.5, 4.5, 5.5, 5]\ny2_upper = [5.5, 3, 5.5, 8, 6, 3, 8, 5, 6, 5.5]\ny2_lower = [4.5, 2, 4.4, 7, 4, 2, 7, 4, 5, 4.75]\ny2_lower = y2_lower[::-1]\n\n# Line 3\ny3 = [10, 8, 6, 4, 2, 0, 2, 4, 2, 0]\ny3_upper = [11, 9, 7, 5, 3, 1, 3, 5, 3, 1]\ny3_lower = [9, 7, 5, 3, 1, -.5, 1, 3, 1, -1]\ny3_lower = y3_lower[::-1]\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(\n    x=x + x_rev,\n    y=y1_upper + y1_lower,\n    fill='toself',\n    fillcolor='rgba(0,100,80,0.2)',\n    line_color='rgba(255,255,255,0)',\n    showlegend=False,\n    name='Fair',\n))\nfig.add_trace(go.Scatter(\n    x=x + x_rev,\n    y=y2_upper + y2_lower,\n    fill='toself',\n    fillcolor='rgba(0,176,246,0.2)',\n    line_color='rgba(255,255,255,0)',\n    name='Premium',\n    showlegend=False,\n))\nfig.add_trace(go.Scatter(\n    x=x + x_rev,\n    y=y3_upper + y3_lower,\n    fill='toself',\n    fillcolor='rgba(231,107,243,0.2)',\n    line_color='rgba(255,255,255,0)',\n    showlegend=False,\n    name='Ideal',\n))\nfig.add_trace(go.Scatter(\n    x=x, y=y1,\n    line_color='rgb(0,100,80)',\n    name='Fair',\n))\nfig.add_trace(go.Scatter(\n    x=x, y=y2,\n    line_color='rgb(0,176,246)',\n    name='Premium',\n))\nfig.add_trace(go.Scatter(\n    x=x, y=y3,\n    line_color='rgb(231,107,243)',\n    name='Ideal',\n))\n\nfig.update_traces(mode='lines')\nfig.show()\n\n```\n\n原理其实就是`go.Scatter`添加两条线，两条线之间填充颜色\n\n[官方文档](https://plotly.com/python/line-charts/)\n\n","tags":["知识","Dash"],"categories":["记录","Dash"]},{"title":"Plotly中的Scatter Plots","url":"/post/b397d43b.html","content":"\n### 散点图\n\n#### 效果\n\n![scatter](https://i.loli.net/2021/05/13/mIKeNa6DJwgBRy9.png)\n\n#### 代码\n\n```python\nimport plotly.express as px\nfig = px.scatter(x=[0, 1, 2, 3, 4], y=[0, 1, 4, 9, 16])\nfig.show()\n\n```\n\n### 使用列名设置大小和颜色\n\n#### 效果\n\n![col-set](https://i.loli.net/2021/05/13/8WuMNHsgjSraq3n.png)\n\n#### 代码\n\n```python\nimport plotly.express as px\ndf = px.data.iris()\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", color=\"species\",\n                 size='petal_length', hover_data=['petal_width'])\nfig.show()\n\n```\n\n### 用Plotly Express绘制线图\n\n#### 效果\n\n![line](https://i.loli.net/2021/05/13/2up8EFjkhGDxTaP.png)\n\n#### 代码\n\n```python\nimport plotly.express as px\nimport numpy as np\n\nt = np.linspace(0, 2*np.pi, 100)\n\nfig = px.line(x=t, y=np.cos(t), labels={'x':'t', 'y':'cos(t)'})\nfig.show()\n\n```\n\n### 线图和散点图\n\n#### 效果\n\n![l+m](https://i.loli.net/2021/05/13/SZHgDdVmPlOjRn2.png)\n\n#### 代码\n\n```python\nimport plotly.graph_objects as go\n\n# Create random data with numpy\nimport numpy as np\n\nnp.random.seed(1)\n\nN = 100\nrandom_x = np.linspace(0, 1, N)\nrandom_y0 = np.random.randn(N) + 5\nrandom_y1 = np.random.randn(N)\nrandom_y2 = np.random.randn(N) - 5\n\nfig = go.Figure()\n\n# Add traces\nfig.add_trace(go.Scatter(x=random_x, y=random_y0,\n                         mode='markers',\n                         name='markers'))\nfig.add_trace(go.Scatter(x=random_x, y=random_y1,\n                         mode='lines+markers',\n                         name='lines+markers'))\nfig.add_trace(go.Scatter(x=random_x, y=random_y2,\n                         mode='lines',\n                         name='lines'))\n\nfig.show()\n\n```\n\n### 悬停数据标签\n\n#### 效果\n\n![hover](https://i.loli.net/2021/05/13/q8WHoiyrFB94euR.png)\n\n#### 代码\n\n```python\nimport plotly.graph_objects as go\nimport pandas as pd\n\ndata = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/2014_usa_states.csv\")\n\nfig = go.Figure(data=go.Scatter(x=data['Postal'],\n                                y=data['Population'],\n                                mode='markers',\n                                marker_color=data['Population'],\n                                text=data['State']))  # hover text goes here\n\nfig.update_layout(title='Population of USA States')\nfig.show()\n\n```\n\n[官方文档](https://plotly.com/python/line-and-scatter/)\n\n","tags":["知识","Dash"],"categories":["记录","Dash"]},{"title":"Dash学习记录","url":"/post/decb945d.html","content":"\n### 添加子图\n\n#### 效果\n\n![subplot](https://i.loli.net/2021/05/12/EFGcgLlHIN6OTem.png)\n\n#### 代码\n\n```python\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nfig = make_subplots(rows=2, cols=2, start_cell=\"bottom-left\")\n\nfig.add_trace(go.Scatter(x=[1, 2, 3], y=[4, 5, 6]),\n              row=1, col=1)\n\nfig.add_trace(go.Scatter(x=[20, 30, 40], y=[50, 60, 70]),\n              row=1, col=2)\n\nfig.add_trace(go.Scatter(x=[300, 400, 500], y=[600, 700, 800]),\n              row=2, col=1)\n\nfig.add_trace(go.Scatter(x=[4000, 5000, 6000], y=[7000, 8000, 9000]),\n              row=2, col=2)\n\nfig.show()\n\n```\n\n### 定时刷新app\n\nDash app 的实时刷新功能主要依赖于 `dash_core_components.Interval`， 将`Interval`元素作为回调函数的输入，需要实时刷新的元素的相关属性值作为输出，通过监听`Interval`元素的 `n_intervals` 属性从而实现app的动态自动更新。`Interval`元素的`interval`属性可以控制刷新频率，该属性单位为毫秒，取整数值。例如需要app每分钟刷新一次，可以设置` interval = 60*1000`\n\n#### 代码\n\n```python\ndcc.Interval(\n         id='interval',\n         interval=second * 1000,\n         n_intervals=0\n     )\n```\n\n### 自定义子图\n\n#### 效果\n\n![custom subplot](https://i.loli.net/2021/05/12/17U5rWgjBazsQhE.png)\n\n#### 代码\n\n```python\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\nfig = make_subplots(\n    rows=5, cols=2,\n    specs=[[{}, {\"rowspan\": 2}],\n           [{}, None],\n           [{\"rowspan\": 2, \"colspan\": 2}, None],\n           [None, None],\n           [{}, {}]],\n    print_grid=True)\n\nfig.add_trace(go.Scatter(x=[1, 2], y=[1, 2], name=\"(1,1)\"), row=1, col=1)\nfig.add_trace(go.Scatter(x=[1, 2], y=[1, 2], name=\"(1,2)\"), row=1, col=2)\nfig.add_trace(go.Scatter(x=[1, 2], y=[1, 2], name=\"(2,1)\"), row=2, col=1)\nfig.add_trace(go.Scatter(x=[1, 2], y=[1, 2], name=\"(3,1)\"), row=3, col=1)\nfig.add_trace(go.Scatter(x=[1, 2], y=[1, 2], name=\"(5,1)\"), row=5, col=1)\nfig.add_trace(go.Scatter(x=[1, 2], y=[1, 2], name=\"(5,2)\"), row=5, col=2)\n\nfig.update_layout(height=600, width=600, title_text=\"specs examples\")\nfig.show()\n\n```\n\n### 多类型子图\n\n#### 效果\n\n![multi-types-subplot](https://i.loli.net/2021/05/12/3p2Wam8SLcFiDCA.png)\n\n#### 代码\n\n```python\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\nfig = make_subplots(\n    rows=2, cols=2,\n    specs=[[{\"type\": \"xy\"}, {\"type\": \"polar\"}],\n           [{\"type\": \"domain\"}, {\"type\": \"scene\"}]],\n)\n\nfig.add_trace(go.Bar(y=[2, 3, 1]),\n              row=1, col=1)\n\nfig.add_trace(go.Barpolar(theta=[0, 45, 90], r=[2, 3, 1]),\n              row=1, col=2)\n\nfig.add_trace(go.Pie(values=[2, 3, 1]),\n              row=2, col=1)\n\nfig.add_trace(go.Scatter3d(x=[2, 3, 1], y=[0, 0, 0],\n                           z=[0.5, 1, 2], mode=\"lines\"),\n              row=2, col=2)\n\nfig.update_layout(height=700, showlegend=False)\n\nfig.show()\n\n```\n\n### 共享x轴\n\n#### 效果\n\n![shared-x](https://i.loli.net/2021/05/12/8RJ9PeyY3mxwbgd.png)\n\n#### 代码\n\n```python\nimport plotly.graph_objects as go\n\ntrace1 = go.Scatter(\n    x=[0, 1, 2],\n    y=[10, 11, 12]\n)\ntrace2 = go.Scatter(\n    x=[2, 3, 4],\n    y=[100, 110, 120],\n    yaxis=\"y2\"\n)\ntrace3 = go.Scatter(\n    x=[3, 4, 5],\n    y=[1000, 1100, 1200],\n    yaxis=\"y3\"\n)\ndata = [trace1, trace2, trace3]\nlayout = go.Layout(\n    yaxis=dict(\n        domain=[0, 0.33]\n    ),\n    legend=dict(\n        traceorder=\"reversed\"\n    ),\n    yaxis2=dict(\n        domain=[0.33, 0.66]\n    ),\n    yaxis3=dict(\n        domain=[0.66, 1]\n    )\n)\nfig = go.Figure(data=data, layout=layout)\nfig.show()\n\n```\n\n### 按照指定字段划分出子图\n\n#### 效果\n\n鸢尾花数据集按照`species`字段划分出子图\n\n![subplot](https://i.loli.net/2021/05/13/XUf28vK4ePAztoR.png)\n\n#### 代码\n\n`facet_col = \"species\"`\n\n```python\nimport plotly.express as px\nimport plotly.graph_objects as go\n\ndf = px.data.iris()\n\nfig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", color=\"species\", facet_col=\"species\",\n                 title=\"Adding Traces To Subplots Within A Plotly Express Figure\")\n\nreference_line = go.Scatter(x=[2, 4],\n                            y=[4, 8],\n                            mode=\"lines\",\n                            line=go.scatter.Line(color=\"gray\"),\n                            showlegend=False)\n\nfig.add_trace(reference_line, row=1, col=1)\nfig.add_trace(reference_line, row=1, col=2)\nfig.add_trace(reference_line, row=1, col=3)\n\nfig.show()\n\n```\n\n### 指定颜色\n\n#### 效果\n\n![color](https://i.loli.net/2021/05/13/CEXvedwqRTkaZUj.png)\n\n#### 代码\n\n```python\nfrom plotly.subplots import make_subplots\n\nfig = make_subplots(rows=1, cols=2)\n\nfig.add_scatter(y=[4, 2, 3.5], mode=\"markers\",\n                marker=dict(size=20, color=\"LightSeaGreen\"),\n                name=\"a\", row=1, col=1)\n\nfig.add_bar(y=[2, 1, 3],\n            marker=dict(color=\"MediumPurple\"),\n            name=\"b\", row=1, col=1)\n\nfig.add_scatter(y=[2, 3.5, 4], mode=\"markers\",\n                marker=dict(size=20, color=\"MediumPurple\"),\n                name=\"c\", row=1, col=2)\n\nfig.add_bar(y=[1, 3, 2],\n            marker=dict(color=\"LightSeaGreen\"),\n            name=\"d\", row=1, col=2)\n\nfig.show()\n\n```\n\n### 不同风格的主题\n\n#### 效果\n\n![1](https://i.loli.net/2021/05/13/NrRw4LdfSXhWoI7.png)\n\n![2](https://i.loli.net/2021/05/13/5XCsYzJRjieoFa3.png)\n\n![3](https://i.loli.net/2021/05/13/QzjTRYMvdg3sn9B.png)\n\n![4](https://i.loli.net/2021/05/13/AmL5oD6s8bK3kur.png)\n\n![5](https://i.loli.net/2021/05/13/Qm1UOInFP5qBSVD.png)\n\n#### 代码\n\n```python\nimport plotly.express as px\n\ndf = px.data.gapminder()\ndf_2007 = df.query(\"year==2007\")\n\nfor template in [\"plotly\", \"plotly_white\", \"plotly_dark\", \"ggplot2\", \"seaborn\", \"simple_white\", \"none\"]:\n    fig = px.scatter(df_2007,\n                     x=\"gdpPercap\", y=\"lifeExp\", size=\"pop\", color=\"continent\",\n                     log_x=True, size_max=60,\n                     template=template, title=\"Gapminder 2007: '%s' theme\" % template)\n    fig.show()\n\n```\n\n### 注册自己的主题+混合主题\n\n#### 效果\n\n![theme](https://i.loli.net/2021/05/13/hO4F1AKTotBYUfb.png)\n\n#### 代码\n\n![theme](https://i.loli.net/2021/05/13/YiD4vNwSXnZck9Q.png)\n\n```python\nimport plotly.io as pio\nimport plotly.express as px\nimport plotly.graph_objects as go\n\npio.templates[\"draft\"] = go.layout.Template(\n    layout_annotations=[\n        dict(\n            name=\"draft watermark\",\n            text=\"DRAFT\",\n            textangle=-30,\n            opacity=0.1,\n            font=dict(color=\"black\", size=100),\n            xref=\"paper\",\n            yref=\"paper\",\n            x=0.5,\n            y=0.5,\n            showarrow=False,\n        )\n    ]\n)\npio.templates.default = \"seaborn+draft\"\n\ndf = px.data.gapminder()\ndf_2007 = df.query(\"year==2007\")\n\nfig = px.scatter(df_2007,\n                 x=\"gdpPercap\", y=\"lifeExp\", size=\"pop\", color=\"continent\",\n                 log_x=True, size_max=60,\n                 title=\"Gapminder 2007: current default theme\")\nfig.show()\n\n```\n\n### 另存为\n\n#### 效果\n\n支持很多格式\n\n![save-as](https://i.loli.net/2021/05/13/584BFVO6PSQYo7L.png)\n\n#### 代码\n\n```python\nfig.write_image(\"images/fig1.png\")\nfig.write_image(\"images/fig1.jpeg\")\nfig.write_image(\"images/fig1.webp\")\nfig.write_image(\"images/fig1.svg\")\nfig.write_image(\"images/fig1.pdf\")\n```\n\n### 保存为网页\n\n#### 代码\n\n```python\nplotly.offline.plot(fig, html_name)\n```\n\n","tags":["知识","Dash"],"categories":["记录","Dash"]},{"title":"Python中Dash库代码流程入门","url":"/post/3b9f3bbb.html","content":"\n\n\n### Dash简介\n\nDash 是一个用于构建基于 Web 的应用程序的 Python 库，无需 JavaScript \n\nDash 同时也是用于创建分析 Web 应用程序的用户界面库。那些使用 Python 进行数据分析、数据挖掘、可视化、建模、仪器控制和报告的人可以立即使用 Dash \n\nDash 建立在 Plotly.js、React 和 Flask 之上，将现代 UI 元素（如下拉列表、滑块和图形）与你的分析 Python 代码相结合\n\n### 直接上代码\n\n```python\nimport dash\nimport dash_core_components as dcc\nimport dash_html_components as html\nfrom dash.dependencies import Input, Output\nimport plotly.express as px\n\nimport pandas as pd\n\nexternal_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']\n\napp = dash.Dash(__name__, external_stylesheets=external_stylesheets)\n\ndf = pd.read_csv('https://plotly.github.io/datasets/country_indicators.csv')\n\navailable_indicators = df['Indicator Name'].unique()\n\napp.layout = html.Div([\n    html.Div([\n\n        html.Div([\n            dcc.Dropdown(\n                id='x_axis-column',\n                options=[{'label': i, 'value': i} for i in available_indicators],\n                value='Fertility rate, total (births per woman)'\n            ),\n            dcc.RadioItems(\n                id='x_axis-type',\n                options=[{'label': i, 'value': i} for i in ['Linear', 'Log']],\n                value='Linear',\n                labelStyle={'display': 'inline-block'}\n            )\n        ],\n            style={'width': '48%', 'display': 'inline-block'}),\n\n        html.Div([\n            dcc.Dropdown(\n                id='yaxis-column',\n                options=[{'label': i, 'value': i} for i in available_indicators],\n                value='Life expectancy at birth, total (years)'\n            ),\n            dcc.RadioItems(\n                id='yaxis-type',\n                options=[{'label': i, 'value': i} for i in ['Linear', 'Log']],\n                value='Linear',\n                labelStyle={'display': 'inline-block'}\n            )\n        ], style={'width': '48%', 'float': 'right', 'display': 'inline-block'})\n    ]),\n\n    dcc.Graph(id='indicator-graphic'),\n\n    dcc.Slider(\n        id='year--slider',\n        min=df['Year'].min(),\n        max=df['Year'].max(),\n        value=df['Year'].max(),\n        marks={str(year): str(year) for year in df['Year'].unique()},\n        step=None\n    )\n])\n\n\n@app.callback(\n    Output('indicator-graphic', 'figure'),\n    Input('x_axis-column', 'value'),\n    Input('yaxis-column', 'value'),\n    Input('x_axis-type', 'value'),\n    Input('yaxis-type', 'value'),\n    Input('year--slider', 'value'))\ndef update_graph(x_axis_column_name, yaxis_column_name,\n                 x_axis_type, yaxis_type,\n                 year_value):\n    dff = df[df['Year'] == year_value]\n\n    fig = px.scatter(x=dff[dff['Indicator Name'] == x_axis_column_name]['Value'],\n                     y=dff[dff['Indicator Name'] == yaxis_column_name]['Value'],\n                     hover_name=dff[dff['Indicator Name'] == yaxis_column_name]['Country Name'])\n\n    fig.update_layout(margin={'l': 40, 'b': 40, 't': 10, 'r': 0}, hovermode='closest')\n\n    fig.update_xaxes(title=x_axis_column_name,\n                     type='linear' if x_axis_type == 'Linear' else 'log')\n\n    fig.update_yaxes(title=yaxis_column_name,\n                     type='linear' if yaxis_type == 'Linear' else 'log')\n\n    return fig\n\n\nif __name__ == '__main__':\n    app.run_server(debug=True)\n\n```\n\n### 代码分析\n\n#### 导入\n\n![导入](https://i.loli.net/2021/05/11/8qnO35NbDFotBzW.png)\n\n这是最常见的导入模块，常常和`pandas`一起使用\n\ndash包：用来实例化app的包\n\npandas：用来读取数据\n\ndash_core_components：Dash自定义了一些前端框架，比如：下拉框，滑动条等一些交互组件\n\ndash_html_components：dash用来构建前端基础代码标签，比如：Div，H1，Tr等前端标签\n\nplotly：用来画图\n\n#### 实例化app\n\n```python\napp = dash.Dash(__name__, external_stylesheets=external_stylesheets)\n```\n\n#### 获取数据\n\n```python\ndf = pd.read_csv('https://plotly.github.io/datasets/country_indicators.csv')\n```\n\n#### 布局\n\n##### 交互布局\n\n```python\nhtml.Div([\n    dcc.Dropdown(\n        id='x_axis-column',\n        options=[{'label': i, 'value': i} for i in available_indicators],\n        value='Fertility rate, total (births per woman)'\n    ),\n    dcc.RadioItems(\n        id='x_axis-type',\n        options=[{'label': i, 'value': i} for i in ['Linear', 'Log']],\n        value='Linear',\n        labelStyle={'display': 'inline-block'}\n    )],\n    style={'width': '48%', 'display': 'inline-block'}\n),\nhtml.Div([\n    dcc.Dropdown(\n        id='yaxis-column',\n        options=[{'label': i, 'value': i} for i in available_indicators],\n        value='Life expectancy at birth, total (years)'\n    ),\n    dcc.RadioItems(\n        id='yaxis-type',\n        options=[{'label': i, 'value': i} for i in ['Linear', 'Log']],\n        value='Linear',\n        labelStyle={'display': 'inline-block'}\n    )], \n    style={'width': '48%', 'float': 'right', 'display': 'inline-block'}\n)\n```\n\n1、交互框位于dash_core_components包中\n\n2、支持MarkDown语法，调用dcc.Markdown方法\n\n3、有下拉框、单选框、复选框、输入框、文本框、滑动条等组件\n\n##### 图标布局\n\n1、图表标签位于dash_core_components包中\n\n```python\ndcc.Graph(id='indicator-graphic')\n```\n\n##### 页面布局\n\n1、布局与前端HTML代码类似的树形结构\n\n2、HTML标签的首字母大写\n\n3、每一个标签都有id，children，style属性\n\n4、将被嵌套的标签放到children中，如果有多个，就用放到list中\n\n```python\ndcc.Slider(\n        id='year--slider',\n        min=df['Year'].min(),\n        max=df['Year'].max(),\n        value=df['Year'].max(),\n        marks={str(year): str(year) for year in df['Year'].unique()},\n        step=None\n    )\n```\n\n#### 添加Callbacks\n\n```python\n@app.callback(\n    Output('indicator-graphic', 'figure'),\n    Input('x_axis-column', 'value'),\n    Input('yaxis-column', 'value'),\n    Input('x_axis-type', 'value'),\n    Input('yaxis-type', 'value'),\n    Input('year--slider', 'value'))\ndef update_graph(x_axis_column_name, yaxis_column_name,\n                 x_axis_type, yaxis_type,\n                 year_value):\n    dff = df[df['Year'] == year_value]\n\n    fig = px.scatter(x=dff[dff['Indicator Name'] == x_axis_column_name]['Value'],\n                     y=dff[dff['Indicator Name'] == yaxis_column_name]['Value'],\n                     hover_name=dff[dff['Indicator Name'] == yaxis_column_name]['Country Name'])\n\n    fig.update_layout(margin={'l': 40, 'b': 40, 't': 10, 'r': 0}, hovermode='closest')\n\n    fig.update_xaxes(title=x_axis_column_name,\n                     type='linear' if x_axis_type == 'Linear' else 'log')\n\n    fig.update_yaxes(title=yaxis_column_name,\n                     type='linear' if yaxis_type == 'Linear' else 'log')\n\n    return fig\n```\n\n1、此处为多输入单输出\n\n2、输入输出值注意和之前的`id`对应\n\n### 效果展示\n\n![静态展示](https://i.loli.net/2021/05/11/cnKVTBxl9iIMvob.png)\n\n![GIF展示](https://i.loli.net/2021/05/11/lPFeX8Gv4dsSfBo.gif)\n\n ","tags":["Dash","Python","数据可视化"],"categories":["Python","数据可视化"]},{"title":"Go语言中的全局变量和局部变量","url":"/post/a0462870.html","content":"\n\n\n### 全局变量和局部变量\n\n#### 全局变量\n\n定义在函数外部的变量称为全局变量\n\n全局变量在任何地方都可以进行使用\n\n#### 局部变量\n\n定义在{}里面的变量时局部变量，只能在{}里面有效\n\n执行到定义的那句话，开始分配内存空间，离开作用域自动进行释放\n\n作用域，就是变量作用的范围\n\n### 全局变量和局部变量可同名\n\n#### 示例代码\n\n```go\npackage main\n\nimport \"fmt\"\n\nvar a bool //全局变量\nfunc main() {\n   var a int //局部变量\n   //1、不同作用域，允许定义同名变量\n   //2、使用变量的原则，就近原则\n   fmt.Printf(\"1: %T\\n\", a) //int\n\n   {\n      var a float32\n      fmt.Printf(\"2: %T\\n\", a) //float32\n   }\n\n   test()\n}\nfunc test() {\n   fmt.Printf(\"3: %T\\n\", a) //bool\n}\n```\n\n#### 输出结果\n\n![image-20210428112917319](https://i.loli.net/2021/04/28/PjSHiKdIaoT93AN.png)\n\n#### 建议\n\n为了避免出现混淆，建议全局变量加上`g_`前缀，局部变量加上`m_`前缀以区分","tags":["Go"],"categories":["记录","Go"]},{"title":"不在sudoers文件中,此事将被报告","url":"/post/31abc792.html","content":"\n#### 现象\n\n当一个用户希望使用sudo命令执行一条只有root用户才能执行的命令，但是该用户却不在/etc/sudoers文件中，就会出现这个提示\n\n#### 解决\n\n1、以root用户登录系统，进入/etc目录，查看sudoers文件的权限\n\n![查看权限](https://i.loli.net/2021/04/26/2J4WLjAxXFnshmT.png)\n\n2、修改sudoers文件的权限使其不是只读\n\n```shell\nchmod 777 sudoers\n```\n\n3、编辑sudoers文件，添加用户为所有可执行权限\n\n![添加权限](https://i.loli.net/2021/04/26/PiDz1xSknmEwCyo.png)\n\n\n\n4、然后修改回sudoers文件权限为440\n\n```shell\nchmod 440 sudoers\n```\n\n\n\n\n\n","tags":["Linux"],"categories":["Linux"]},{"title":"CentOS目录结构详解","url":"/post/38d92910.html","content":"\n\n\n### 总体概述\n\nLinux与Windows的目录有别于：Windows可以分很多个盘，Linux只有一个根目录`/`，所有文件夹都在根目录下\n\n![结构图](https://i.loli.net/2021/04/22/UZFJM3A9gTjfsw8.png)\n\n![目录图](https://i.loli.net/2021/04/22/FOXQYLiURt7dnoI.png)\n\n### 详细介绍\n\n#### `/bin`文件夹\n\nBinary的缩写，这个目录存放着经常使用的命令；\n\n![bin](https://i.loli.net/2021/04/22/n4WSHdgOorwhvy6.png)\n\n#### `/boot`启动文件夹\n\n这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件；\n\n![boot](https://i.loli.net/2021/04/22/G9A8MYDUBjQ7g1F.png)\n\n#### `/dev`设备文件夹\n\n设备（device）的缩写，目录下存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的；\n\n![dev](https://i.loli.net/2021/04/22/1Xt57S49cCOpUkx.png)\n\n#### `/etc`配置文件夹\n\n用来存放所有的系统管理所需要的配置文件和子目录；\n\n![etc](https://i.loli.net/2021/04/22/VnUJ4joym5A678t.png)\n\n#### `/home`家目录\n\n用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的；\n\n![home](https://i.loli.net/2021/04/22/wrEZIJFnLpisKQm.png)\n\n#### `/lib`动态连接共享库\n\n这里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件，几乎所有的应用程序都需要用到这些共享库；\n\n![lib](https://i.loli.net/2021/04/22/mxAsNzo9ZyRM7OH.png)\n\n#### `/media`\n\nlinux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下；\n\n#### `/mnt`\n\n让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了；\n\n#### `/opt`\n\n这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的；\n\n#### `/proc`\n\n这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。这个目录的内容不在硬盘上而是在内存里；\n\n![proc](https://i.loli.net/2021/04/22/o4iXgOlrk17KGQW.png)\n\n#### `/root`系统管理员目录\n\n超级权限者的用户主目录\n\n#### `/run`临时文件系统目录\n\n存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 /var/run 目录，应该让它指向 run；\n\n#### `/sbin`\n\n存放的是系统管理员使用的系统管理程序\n\n![sbin](https://i.loli.net/2021/04/22/W4XYT29ZCpSdUFz.png)\n\n#### `/srv`\n\n存放一些服务启动之后需要提取的数据\n\n#### `/sys`\n\n该目录下安装了2.6内核中新出现的一个文件系统 sysfs；\n\nsysfs文件系统集成了下面3种文件系统的信息：针对进程信息的proc文件系统、针对设备的devfs文件系统以及针对伪终端的devpts文件系统。该文件系统是内核设备树的一个直观反映；\n\n当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建；\n\n![sys](https://i.loli.net/2021/04/22/UBdfhpjSm61ZTO5.png)\n\n#### `/tmp`\n\n存放临时文件\n\n#### `/usr`应用程序目录\n\n类似于windows下的program files目录\n\n#### `/var`\n\n这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。\n\n![var](https://i.loli.net/2021/04/22/VHiQB2PjLGZ7f4g.png)\n\n\n\n","tags":["Linux","CentOS"],"categories":["Linux"]},{"title":"JetBrains全家桶问题收集和解决","url":"/post/916ff986.html","content":"\n\n\n### PyCharm\n\n#### 新版PyCharm中Matplotlib图像不单独弹出\n\n##### 效果\n\n![效果](https://i.loli.net/2021/04/21/NrbLMyRAeDVsGvw.png)\n\n##### 解决方案\n\n`File->Settings->Tools->Python Scientific->Show plots in toolwindow`，取消勾选\n\n![设置](https://i.loli.net/2021/04/21/irfdPpYO4TsBjLK.png)\n\n##### 效果\n\n![效果](https://i.loli.net/2021/04/21/dqvU63pMaTLfEY5.png)\n\n### Idea\n\n#### 关闭SonarLint自动检查\n\n`File->Settings->Tools->SonarLint`，取消`Automatically trigger analiysis`\n\n![关闭自动检查](https://i.loli.net/2021/06/18/WOx59SYCNJ63Qcs.png)\n\n","tags":["IDE","JetBrains"],"categories":["记录"]},{"title":"this.$router.push、replace、go的区别","url":"/post/e6ae6978.html","content":"\n#### this.$router.push\n\n说明：跳转到指定URL，向history栈添加一个新的记录，点击后退会返回至上一个页面\n\n使用：\n\n```javascript\nthis.$router.push('/index')\nthis.$router.push({path: '/index'})\nthis.$router.push({path: '/index', query: {name: '124'}})\nthis.$router.push({name: 'index', params: {name: '123'}})\n```\n\n#### this.$router.replace\n\n说明：跳转到指定URL，替换history栈中最后一个记录，点击后退会返回至上上一个页面\n\n使用：同push\n\n#### this.$router.go(n)\n\n说明：类似window.history.go(n)，向前或向后跳转n个页面，n可正（先后跳转）可负（向前跳转）\n\n使用：\n\n```javascript\nthis.$router.go(1)\t\t //类似history.forward()\nthis.$router.go(-1)\t\t //类似history.back()\n```","tags":["Vue"],"categories":["记录"]},{"title":"Win10进程查询及关闭","url":"/post/3ac14690.html","content":"\n\n\n### 起因\n\n运行一个Java项目时，报错，发现8080端口被一个程序占用，但是我却找不到这个程序是哪个，于是有了这篇文章。\n\n### CMD查询进程\n\n#### 查看Windows所有端口进程\n\n打开命令提示符窗口，输入`netstat -ano`，回车，所有端口进程显示如下\n\n![进程](https://i.loli.net/2021/04/15/KBTkmSpjXlI1hs3.png)\n\n#### 查询某端口的程序\n\n以8080端口为例，输入`netstat -aon|findstr \"8080\"`，显示如下，最后一列是PID\n\n![程序](https://i.loli.net/2021/04/15/ze79fjYuydS81Ii.png)\n\n#### 根据PID查看占用程序\n\n输入`tasklist|findstr \"9472\"`，如下\n\n![PID](https://i.loli.net/2021/04/15/BiCvqVS8dNUl3QT.png)\n\n### 任务管理器关闭进程\n\n#### 开启任务管理器的PID显示\n\n打开任务管理器，在随便一列右键，勾选PID即可显示\n\n![任务管理器](https://i.loli.net/2021/04/15/3B7yO1AFmPoqLXr.png)\n\n#### 根据PID结束进程\n\n![结束进程](https://i.loli.net/2021/04/15/AQRtUWoJ8guhqeb.png)\n\n### 命令行杀进程\n\n如果要杀`nginx.exe`进程，命令如下\n\n```shell\ntaskkill /im nginx.exe /f\n```\n\n也可以使用`pid`杀：\n\n```shell\ntaskkill /f /pid {pid}\n```\n\n这里的`/f`意为强制结束进程\n","tags":["win10","cmd","端口"],"categories":["记录"]},{"title":"Typora+PicGo+SM.MS:打造写文章神器","url":"/post/253d98d2.html","content":"\n\n\n### 前言\n\n之前一直使用`Typora`写文章，但是有一个问题：上传图片的地址为本地地址，如果我的这篇文章换了电脑，所有的图片都无法加载了。因此，为了使文章无论迁移到哪里，图片都可以正常显示，决定将图片上传至云，因此，有了下面这样一个写文章神器。\n\n### 准备工作\n\n> Typora编辑器：https://typora.io/\n>\n> SM.MS图床：https://sm.ms/\n>\n> PicGo：https://github.com/Molunerfinn/PicGo\n>\n> PicGo的SM.MS插件\n\n### 开始\n\n#### 下载安装Typora\n\n`Typora`是一款优秀的跨平台MarkDown编辑器，这一步不难，直接下载安装即可，不过多介绍。\n\n#### 注册登录SM.MS图床\n\n之前一直选择`GitHub`图床，但是图片加载速度太慢，如果不使用加速器，国内访问几乎无法正常加载图片，因此最终选择`SM.MS`，虽然有上传空间限制，但是速度有保障了。\n\n进入`SM.MS`[官网](https://sm.ms/)，点击User->Login注册登录，然后同样的，点击`User`->`Dashboard`->`API Token`，复制自己的`Secret Token`等待使用。\n\n![token](https://i.loli.net/2021/04/09/qAYW4Ia2QHR3Kbf.png)\n\n#### 安装PicGo及对应插件\n\n进入`PicGo`的`GitHub`，下载对应版本，打开后，安装`SM.MS`插件。\n\n![picgo](https://i.loli.net/2021/04/09/8ecx2WDofuOBvdE.png)\n\n然后进入图床设置的SM.MS用户登录，将刚刚复制的Secret Token粘贴到这里。\n\n![auth](https://i.loli.net/2021/04/09/Fbli9WcAHqw7MRI.png)\n\n最后，打开`PicGo设置`->`设置Server`，将监听端口设置为36677。\n\n![server](https://i.loli.net/2021/04/09/uXIpQy2Ozb9rKAE.png)\n\n#### 配置Typora\n\n打开`Typora`->`文件`->`偏好设置`->`图像`，设置`上传图片`以及`上传规则`，然后设置`上传服务`和`PicGo 路径`，最后点击`验证图片上传选项`看是否成功(若不行，重启软件)。\n\n![typora](https://i.loli.net/2021/04/09/xGJO5XTzoN76rSk.png)\n\n至此，不出意外已经配置成功。\n\n### 效果展示\n\n![效果](https://i.loli.net/2021/04/09/WNaFgxQj3YfSL2T.gif)\n\n\n\n\n\n","tags":["Typora","PicGo","SM.MS"],"categories":["记录"]},{"title":"若依-定时任务","url":"/post/ce36139.html","content":"\n\n\n### 使用场景\n\n在实际项目开发中Web应用有一类不可缺少的，那就是定时任务。 定时任务的场景可以说非常广泛，比如某些视频网站，购买会员后，每天会给会员送成长值，每月会给会员送一些电影券； 比如在保证最终一致性的场景中，往往利用定时任务调度进行一些比对工作；比如一些定时需要生成的报表、邮件；比如一些需要定时清理数据的任务等。\n\n### 操作指南\n\n`系统监控`->`定时任务`->`新增`：\n\n![添加任务](https://i.loli.net/2021/04/06/UAb5aihP6jH4fNF.png)\n\n填写对应的信息，其中需要注意的图中高亮部分需要这么填写：\n\n![修改任务](https://i.loli.net/2021/04/06/URpG6gbZC3PKuOB.png)\n\n**调用方法**\n\n打开`ruoyi-quartz/src/main/java/com/ruoyi/quartz/task/RyTask.java`，按照代码输入对应的调用方法\n\n![调用方法](https://i.loli.net/2021/04/06/H7nAOzBgLKf8Tp9.png)\n\n**cron表达式**\n\n参考[官方文档](https://doc.ruoyi.vip/ruoyi/document/htsc.html#%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1)\n\n添加成功后，在`ruoyi-quartz/src/main/java/com/ruoyi/quartz/task/RyTask.java`中添加自己刚才定义的方法\n\n![cron表达式](https://i.loli.net/2021/04/06/1iLXtDSEaPM8Nls.png)\n\n重启项目，测试看看是否成功\n\n![重启测试](https://i.loli.net/2021/04/06/YhczMuWIXgQwmJ1.png)\n\n","tags":["若依"],"categories":["记录","框架","若依"]},{"title":"ps -ef 命令详解","url":"/post/822b6734.html","content":"\n\n\n`ps`命令将某个进程显示出来\n\n`ps -e` 显示所有程序\n\n`ps f ` 用ASCII字符显示树状结构，表达程序间的相互关系\n\n`grep`命令是查找\n\n中间的`|`是管道命令，是指ps命令与grep同时执行\n\nPS是LINUX下最常用的也是非常强大的进程查看命令\n\ngrep命令是查找，是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来\n\ngrep全称是Global Regular Expression Print，表示全局正则表达式版本，它的使用权限是所有用户\n\n以下这条命令是检查java 进程是否存在：`ps -ef | grep java`\n\n![进程](https://i.loli.net/2021/04/06/7nLg5ZMalYRKBwX.png)\n\n   UID        PID    PPID    C   STIME   TTY       TIME                   CMD\n\ngarfield   4472  3598    0   08:38   pts/0   00:00:00  grep --color=auto java\n\n> **UID   ：程序被该 UID 所拥有**\n>\n> **PID   ：这个程序的 ID** \n>\n> **PPID  ：是其上级父程序的ID**\n>\n> **C     ：CPU使用的资源百分比**\n>\n> **STIME ：系统启动时间**\n>\n> **TTY   ：登入者的终端机位置**\n>\n> **TIME  ：使用掉的CPU时间**\n>\n> **CMD  ：所下达的是什么指令**\n\n","tags":["Linux"],"categories":["Linux"]},{"title":"GET\\POST\\PUT\\DELETE","url":"/post/7ae04b57.html","content":"\n#### GET\n\nGET请求会向数据库发索取数据的请求，从而来获取信息，**该请求就像数据库的select操作一样**，只是用来查询一下数据，不会修改、增加数据，不会影响资源的内容，即该请求不会产生副作用。无论进行多少次操作，结果都是一样的\n\n#### PUT\n\nPUT请求是向服务器端发送数据的，从而改变信息，**该请求就像数据库的update操作一样**，用来修改数据的内容，但是不会增加数据的种类等，也就是说无论进行多少次PUT操作，其结果并没有不同\n\n#### POST\n\nPOST请求同PUT请求类似，都是向服务器端发送数据的，但是该请求会改变数据的种类等资源，**就像数据库的insert操作一样**，会创建新的内容。几乎目前所有的提交操作都是用POST请求的\n\n#### DELETE\n\nDELETE请求顾名思义，就是用来删除某一个资源的，**该请求就像数据库的delete操作**","tags":["HTTP"],"categories":["记录","网络"]},{"title":"若依-框架说明书","url":"/post/1bde0d35.html","content":"\n### 这是一篇记录\n\n记录各种可能碰到的操作，分为操作篇、说明篇和bug修复篇，操作篇主要记录步骤，说明篇更偏向于代码理解，bug修复篇记录下遇到的问题以及解决方案。\n\n### 操作篇\n\n#### 字典管理\n\n`系统管理`->`字典管理`->`新增`，输入信息\n\n![添加字典类型](https://i.loli.net/2021/03/30/92TSsciK1VpAXze.png)\n\n添加成功后，点击`字典类型`进行详细编辑\n\n![详细编辑](https://i.loli.net/2021/03/30/26xs3Gfy58QpABH.png)\n\n点击`新增`，输入数据字典的信息后保存。这里应该添加多条\n\n![输入信息](https://i.loli.net/2021/03/30/dERKhuC9jZNkDXL.png)\n\n![保存](https://i.loli.net/2021/03/30/KBrv9gUxEsLWIMa.png)\n\n#### 系统日志\n\n![系统日志](https://i.loli.net/2021/04/06/ZerWJ1TndUjmBua.png)\n\n如果想要定义自己的日志记录，执行下列步骤：\n\n##### 数据库添加数据\n\n在`sys_dict_data`中，添加一行这样的数据：\n\n```mysql\ninsert into sys_dict_data values (29, 10, '立刻执行', '10', 'sys_oper_type', '', 'primary', 'N', '0', 'admin', sysdate(), '', null, '执行操作');\n```\n\n##### 新增业务操作类型\n\n在`ruoyi-common/src/main/java/com/ruoyi/common/enums/BusinessType.java`中，添加：\n\n```java\n/**\n * 立刻执行\n */\nRUN,\n```\n\n##### 日志标题及类型\n\n在`ruoyi-quartz/src/main/java/com/ruoyi/quartz/controller/SysJobController.java`中，修改日志标题以及日志类型：\n\n```java\n@Log(title = \"定时任务\", businessType = BusinessType.RUN)\n```\n\n##### 添加注解\n\n在`RuoYi-Vue/ruoyi-system/src/main/java/com/ruoyi/system/domain/SysOperLog.java`中：\n\n```java\n@Excel(name = \"业务类型\", readConverterExp = \"0=其它,1=新增,2=修改,3=删除,4=授权,5=导出,6=导入,7=强退,8=生成代码,9=清空数据,10=立刻执行\")\n```\n\n#### 定时任务\n\n[定时任务](http://www.garfielder.com/post/ce36139.html)\n\n#### 从一个页面传参到另一个页面\n\n##### 效果\n\n我们点击`学生管理`，点击`修改`，会跳转到`学生详细`页面，同时将对应的数据带过去\n\n![学生管理](https://i.loli.net/2021/04/15/8dU6cJRjunOaerZ.png)\n\n![详细信息](https://i.loli.net/2021/04/15/kGKMIopH4TcSwxU.png)\n\n##### 如何实现\n\n一、修改index.vue中的`编辑`函数：\n\n![编辑函数](https://i.loli.net/2021/04/15/PICGrOLU7nKJotE.png)\n\n`this.$router.push`是跳转函数，path是跳转的目的路由地址，query是要传递的参数\n\n二、新建学生详细页面\n\n这里可以使用若以框架自带的`表单构建`功能生成一个新的页面，导出为.vue文件后放入项目中的具体位置，然后在`菜单管理`中添加菜单，注意`组件路径`的填写要和实际路径保持一致\n\n![生成页面](https://i.loli.net/2021/04/15/eSGaE3QLWVsnNP5.png)\n\n![位置](https://i.loli.net/2021/04/15/CxHhroRFNbYmZQX.png)\n\n![详细信息](https://i.loli.net/2021/04/15/6rmU5lzBv1xcPKH.png)\n\n三、修改`学生详细`页面的代码\n\n假设我们新建了一个`detail.vue`文件，这里我们修改这三部分代码\n\n![初始化代码](https://i.loli.net/2021/04/15/XEw6pUVxZl1un9h.png)\n\n第一处用于监听传来的数据，第二处是页面加载函数，第三处获取传来的参数\n\n注意：如果传来的参数需要字典回显，还需要修改以下部分的代码：\n\n![字典代码](https://i.loli.net/2021/04/15/r9X2vpJutF6eh5D.png)\n\n![字典代码](https://i.loli.net/2021/04/15/C5I9UcLrxHPvFjm.png)\n\n至此不出意外即可成功\n\n#### 点击刷新表单数据\n\n##### 效果\n\n![表单更新](https://i.loli.net/2021/04/15/xeHEXCb8LDMocpn.gif)\n\n##### 如何实现\n\n假如我们要实现这个功能：\n\n![筛选男性](https://i.loli.net/2021/04/15/DhHzLu5qx8nfcRv.png)\n\n一、编写`handleRefresh`方法\n\n![点击](https://i.loli.net/2021/04/15/KqLFgk6nJuXdEmZ.png)\n\n![函数](https://i.loli.net/2021/04/15/XPaK1k7ELGN2vWB.png)\n\n1. 打开遮罩层（即加载动画）\n2. 设置查询条件\n3. 调用查询函数\n4. 获取数据并更新\n5. 关闭遮罩层\n\n二、[后续代码实现](#1)\n\n#### 无弹窗跳转表格添加数据\n\n##### 效果\n\n![本页添加](https://i.loli.net/2021/05/20/qZSvMjizh61KRwH.gif)\n\n##### 如何实现\n\n一、表格的每一个字段设置类似如下：\n\n```html\n<el-table-column prop=\"contractDeliveryDate\" label=\"产品编号\">\n    <template slot-scope=\"scope\">\n        <el-input v-model=\"scope.row.productNum\" placeholder=\"请输入产品编号\" />\n    </template>\n</el-table-column>\n```\n\n注意将字段对应准确\n\n二、按钮设置添加函数\n\n```html\n<el-button type=\"primary\" icon=\"el-icon-plus\" size=\"mini\" @click=\"handleAddQljProduct\">添加</el-button>\n```\n\n```javascript\nhandleAddQljProduct() {\n    let obj = {};\n    obj.userInstallation = \"\";\n    obj.productNum = \"\";\n    obj.contractDeliveryDate = \"\";\n    obj.batchDeliveryDate = \"\";\n    obj.contractSignDate = \"\";\n    obj.plannedProductionPeriod = \"\";\n    obj.changeDescription = \"\";\n    obj.productModel = \"\";\n    obj.drawingNum = \"\";\n    obj.amount = \"\";\n    obj.measurementUnit = \"\";\n    obj.setType = \"\";\n    obj.executeStatus = \"\";\n    obj.productType = \"\";\n    obj.remark = \"\";\n    obj.installationMethod = \"\";\n    obj.trainContent = \"\";\n    obj.superviseRequirement = \"\";\n    obj.createUser = \"\";\n    obj.changeUser = \"\";\n    obj.changeTime = \"\";\n    obj.deleteFlag = \"\";\n    this.productList.push(obj);\n},\n```\n\n三、序号自动增加\n\n设置表头代码如下：\n\n```html\n<el-table \n    v-loading=\"loading\" \n    :data=\"productList\"\n    :row-class-name=\"rowQljProductIndex\" \n    @selection-change=\"handleSelectionChange\"\n>\n```\n\n其中，`:data`是数据来源，`:row-class-name`是序号自增函数，设置如下：\n\n```javascript\nrowQljProductIndex({ row, rowIndex }) {\n    row.id = rowIndex + 1;\n},\n```\n\n#### 无弹窗跳转表格删除数据\n\n##### 效果\n\n![无弹删除](https://i.loli.net/2021/05/20/jvC1F9r2JmnBkP5.gif)\n\n##### 如何实现\n\n```html\n<el-button type=\"text\" size=\"small\" @click=\"handleDeleteP(scope.row)\">删除</el-button>\n```\n\n```javascript\n/** 删除产品操作 */\nhandleDeleteP(row) {\n    const id = row.id || this.ids\n    this.productList.splice(id - 1, 1);\n},\n```\n\n注意，因为我们之前添加数据的时候是将一行行数据添加进了一个列表，所以删除的时候应该将列表中的数据删除，因此这里使用了[`splice`](https://www.w3school.com.cn/jsref/jsref_splice.asp)函数\n\n#### 文件上传\n\n[文件上传](http://www.garfielder.com/post/4b456297.html)\n\n#### 表单验证\n\n[表单参数验证](http://www.garfielder.com/post/9daccfd.html)\n\n#### 自定义自增序号\n\n##### 效果\n\n![自增序号](https://i.loli.net/2021/05/31/g2QnV8xpZYtKB6D.gif)\n\n##### 如何实现\n\n一、添加序号数组\n\n```javascript\nreturn {\n    // 选中数组(序号)\n    nos: [],\n}\n```\n\n二、修改`handleSelectionChange`函数\n\n```javascript\nhandleSelectionChange(selection) {\n    this.ids = selection.map(item => item.id)\n    this.nos = selection.map(item => item.No)\t\t// 添加这一行\n    this.single = selection.length !== 1\n    this.multiple = !selection.length\n},\n```\n\n三、添加序号函数\n\n```javascript\nmethod: {\n    rowIndex({row, rowIndex}) {\n        row.No = rowIndex + 1;\n    },\n}\n```\n\n四、在表单中修改相应代码\n\n```javascript\n<el-table \n  :data=\"productList\" \n  :row-class-name=\"rowIndex\" \n  @selection-change=\"handleSelectionChange\"\n>\n```\n\n```html\n<el-table-column prop=\"No\" label=\"序号\" width=\"50\"></el-table-column>\n```\n\n五、对应函数中修改如下代码\n\n```javascript\nhandleDeleteP(row) {\n    const ids = row.id || this.ids;\n    const nos = row.No || this.nos;\n    this.$confirm('是否确认删除序号为\"' + nos + '\"的产品吗?', \"警告\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n    }).then\n    ... ...\n}\n```\n\n#### 根据表单数据做计算\n\n##### 效果\n\n![求和计算](https://i.loli.net/2021/06/01/cE9fzPbOoZJ8Dmx.gif)\n\n##### 如何实现\n\n一、定义参数\n\n```javascript\nreturn {\n    // 实际到款金额\n    totalReceivedAmount: \"\",\n    // 累计到款比例\n    totalReceivedPaymentPercent: \"\",\n    // 累计欠款\n    totalArrears: \"\",\n}\n```\n\n二、定义求和函数\n\n```javascript\nsum() {\n    getActualPayByCid(this.formData.id).then(response => {\n        let received_amount = 0;\n        let received_payment_percent = 0;\n        for (const p in response.data) {\n            received_amount += response.data[p].receivedAmount\n            received_payment_percent += response.data[p].receivedPaymentPercent\n        }\n        this.totalReceivedAmount = received_amount;\n        this.totalReceivedPaymentPercent = (Math.round(received_payment_percent * 10000)) / 100 + '%';\n        if (response.data.length > 0) {\n            this.totalArrears = response.data[0].contractAmount - received_amount;\n        }\n    });\n}\n```\n\n思路：先使用`getActualPayByCid`获取表单数据(其实只是读取了数据库数据)，然后对返回结果提取数据来进行处理\n\n三、使用`v-model`绑定数据\n\n```html\n<el-input v-model=\"totalReceivedAmount\" placeholder=\"实际到款金额\"></el-input>\n```\n\n四、在表单更新时调用求和函数\n\n```javascript\n// 页面加载时\ncreated() {\n    ...\n    this.sum();\n    ...\n},\n```\n\n```javascript\n// 提交表单处\nsubmitForm() {\n\t...\n\taddActualpay(this.actualPayInfo).then(response => {\n        this.msgSuccess(\"添加付款成功\");\n        this.sum()\n        this.openActualPay = false;\n        this.getActualPay();\n     });\n     ...\n}\n```\n\n或许还可以在其他地方调用，看具体需求\n\n#### 表格数据筛选\n\n##### 效果\n\n![表单筛选](https://i.loli.net/2021/06/03/hG5pW2eYmCAOrxg.gif)\n\n##### 如何实现\n\n一、定义筛选数据\n\n```javascript\nexport default {\n  data() {\n    return {\n      docTypeFilter: [\n      {text: '合同', value: 1},\n      {text: '技术协议', value: 2},\n      ],\n    }\n  }\n}\n```\n\n二、定义筛选函数\n\n```javascript\nfilterHandler(value, row, column) {\n    const property = column['property'];\n        return row[property] === value\n}\n```\n\n三、表单添加筛选参数\n\n```html\n<el-table-column\n    prop=\"docType\"\n    label=\"文件类型\"\n    :filters=\"docTypeFilter\"\n    :filter-method=\"filterHandler\">\n</el-table-column>\n```\n\n四、设置筛选的默认值\n\n如果你想给你的筛选器加一个初始值，添加下面这一句代码\n\n```html\n<el-table-column\n    prop=\"docType\"\n    label=\"文件类型\"\n    :filters=\"docTypeFilter\"\n    :filtered-value=\"[1]\"\n    :filter-method=\"filterHandler\">\n</el-table-column>\n```\n\n#### 存在子菜单不允许删除\n\n##### 效果\n\n![子菜单删除](https://i.loli.net/2021/06/17/KJ9aCtXpPIMoZ7h.gif)\n\n##### 如何实现\n\n一、`controller`文件中修改代码如下\n\n```java\npublic AjaxResult remove(@PathVariable Long[] ids) {\n    for (Long id : ids) {\n        if (qljBusinessplanService.hasChildById(id)) {\n            return AjaxResult.error(\"存在子菜单,不允许删除\");\n        }\n    }\n    return toAjax(qljBusinessplanService.deleteQljBusinessplanByIds(ids));\n}\n```\n\n二、分别在`Mapper`、`Service`定义对应的方法/接口\n\nMapper\n\n```java\n/**\n* 是否存在菜单子节点\n*\n* @param id 菜单ID\n* @return 结果\n*/\npublic int hasChildById(Long id);\n```\n\nService\n\n```java\n/**\n* 是否存在菜单子节点\n*\n* @param id ID\n* @return 结果 true 存在 false 不存在\n*/\npublic boolean hasChildById(Long id);\n```\n\nService(`impl`)\n\n```java\n/**\n* 是否存在菜单子节点\n*\n* @param id ID\n* @return 结果\n*/\n@Override\npublic boolean hasChildById(Long id)\n{\n    int result = qljBusinessplanMapper.hasChildById(id);\n    return result > 0;\n}\n```\n\n三、定义数据库`xml`代码\n\n```xml\n<select id=\"hasChildById\" resultType=\"Integer\">\n    select count(1) from qlj_businessplan where parent_id = #{id} and delete_flag = 0\n</select>\n```\n\n#### 查询数据库字段信息\n\n##### 效果\n\n在数据库中我们为了更好的管理字段，会给字段加上便于理解的注释，如下：\n\n![注释](https://i.loli.net/2021/06/24/Rz5OJKtT917Cupo.png)\n\n在`Navicat`中，可以查询到这些数据，具体代码参考[本文](http://www.garfielder.com/post/d438e44c.html)\n\n![查询](https://i.loli.net/2021/06/24/CnLseqJcO2WIoTg.png)\n\n那么我们如何在代码中获得到这些字段信息呢\n\n##### 具体实现(基于若依)\n\n一、定义返回类\n\n在`domain`目录下新建字段信息类`ColumnInfo.java`，\n\n```java\npackage com.ruoyi.qljsystem.domain;\n\npublic class ColumnInfo {\n    private String columnName; //字段名\n    private String columnComment; //字段说明\n    private String columnType; //字段类型\n\n    public String getColumnName() { return columnName; }\n\n    public void setColumnName(String columnName) { this.columnName = columnName; }\n\n    public String getColumnComment() { return columnComment; }\n\n    public void setColumnComment(String columnComment) { this.columnComment = columnComment; }\n\n    public String getColumnType() { return columnType; }\n\n    public void setColumnType(String columnType) { this.columnType = columnType; }\n}\n\n```\n\n二、继续定义接口、controller、service、mapper，过程类似此处略过\n\n三、在`xml`文件中定义查询函数\n\n```xml\n<select id=\"selectColumnInfo\" resultMap=\"ColumnInfoResult\">\n    select column_name, column_comment, column_type\n    from information_schema.COLUMNS\n    where table_schema = 'app_vue'\n      and table_name in ('qlj_product', 'qlj_contract', 'qlj_implementation_plan');\n</select>\n```\n\n四、在这个文件中继续定义`ColumnInfoResult`对应的模板\n\n```xml\n<resultMap type=\"ColumnInfo\" id=\"ColumnInfoResult\">\n    <result property=\"columnName\" column=\"column_name\"/>\n    <result property=\"columnComment\" column=\"column_comment\"/>\n    <result property=\"columnType\" column=\"column_type\"/>\n</resultMap>\n```\n\n至此，我们可以成功查询到数据，但是仍然需要做一些处理和转换。因为，注意看，我们查出来的字段信息例如`change_log`，不是驼峰命名，而我们代码中得到的数据是`changeLog`，因此，需要将下划线转换成驼峰\n\n五、转换驼峰\n\n```javascript\nsplitOperation(stringObject, separator) {\n    const l = stringObject.split(separator);\n    for (let index = 0; index < l.length; index++) {\n        if (l.hasOwnProperty(index)) {\n            if (index !== 0) {\n                l[index] = l[index].replace(l[index][0], l[index][0].toUpperCase())\n            }\n        }\n    }\n    return l.join(\"\")\n}\n```\n\n#### dateRange的实现\n\n##### 效果\n\n![dateRange](https://i.loli.net/2021/09/24/rtuEiTCpJG4O9I5.gif)\n\n##### 实现\n\n一、定义控件\n\n```html\n<el-form-item label=\"到款日期\" prop=\"actualDate\">\n  <el-date-picker clearable size=\"small\"\n                  v-model=\"dateRange\"\n                  type=\"daterange\"\n                  range-separator=\"-\"\n                  start-placeholder=\"开始日期\"\n                  end-placeholder=\"结束日期\"\n                  style=\"width:209px\"\n                  value-format=\"yyyy-MM-dd\">\n  </el-date-picker>\n</el-form-item>\n```\n\n其中，`type=\"daterange\"`写法固定，即这条代码说明这是一个`dateRange`类型的日期控件，`v-model=\"dateRange\"`中的`dateRange`需要再单独定义\n\n```javascript\ndata() {\n  return {\n    // 日期范围\n    dateRange: [],\n  }\n}\n```\n\n二、调用若依自带的`addDateRange`方法\n\n```javascript\nlistQljProjectContractSale(this.addDateRange(this.queryParams, this.dateRange)).then(response => {\n  this.qljProductList = response.rows;\n  this.total = response.total;\n  this.loading = false;\n});\n```\n\n三、Mapper层代码\n\n```xml\n<select id=\"selectProductContractSaleList\" parameterType=\"ProductQueryParam\" resultMap=\"QljProductResult\">\n    select * from qlj_salepaymentactual a\n    where a.delete_flag = 0\n    <if test=\"params.beginTime != null and params.beginTime != ''\"><!-- 开始时间检索 -->\n        AND date_format(a.actual_date,'%y%m%d') &gt;= date_format(#{params.beginTime},'%y%m%d')\n    </if>\n    <if test=\"params.endTime != null and params.endTime != ''\"><!-- 结束时间检索 -->\n        AND date_format(a.actual_date,'%y%m%d') &lt;= date_format(#{params.endTime},'%y%m%d')\n    </if>\n    ${params.dataScope}\n</select>\n```\n\n我们注意到，参数中含有`params`，不是说我们就得去`domain`层添加`params`字段，因为这个参数是在`BaseEntity`中，具体到项目中的位置：`RuoYi-Vue/ruoyi-common/src/main/java/com/ruoyi/common/core/domain/BaseEntity.java`\n\n![BaseEntity](https://i.loli.net/2021/09/24/32xl5I9vXwG6M8P.png)\n\n我们只需要使用`Extend`继承就行，如下：\n\n![继承](https://i.loli.net/2021/09/24/mfcuEnHFtrXzLyD.png)\n\n至此，不出意外就可以查询成功了\n\n### 说明篇\n\n#### Excel导出时数据字典的值\n\n正常情况下，导出的时候会导出数据库的值，比如\n\n![数据库](https://i.loli.net/2021/03/30/63jkQU2DGM8bHmV.png)\n\n性别这一个字段会导出为0，但是当我们需要导出人类可读的信息，比如\n\n![显示](https://i.loli.net/2021/03/30/58H1JisUCoxGdtY.png)\n\n只需要在`ruoyi-system`下的对应模块的`domain`下的代码内，加上注解\n\n```java\n/** 性别 */\n@Excel(name = \"性别\", readConverterExp = \"0=男,1=女,2=未知\")\nprivate Integer gender;\n```\n\n这样就可以导出人类可读的信息比如：性别：男\n\n#### 用户管理\n\n##### 前端页面路径\n\n`ruoyi-ui/src/views/system/user/index.vue`\n\n##### 后端controller\n\n`ruoyi-admin/src/main/java/com/ruoyi/web/controller/system/SysUserController.java`\n\n##### 数据库操作xml\n\n`ruoyi-system/src/main/resources/mapper/system/SysUserMapper.xml`\n\n##### 建议的阅读代码的顺序\n\n![顺序](https://i.loli.net/2021/04/01/bh9GiYNotJSf1Ve.png)\n\n按照这个顺序阅读代码可以最好的理解代码\n\n#### 实现当没有选中数据时按钮无法点击\n\n效果如下：\n\n![效果](https://i.loli.net/2021/03/31/fLDzgJ91QXbVYFx.png)\n\n代码分析：\n\n`index.vue`\n\n![代码](https://i.loli.net/2021/03/31/GWZa4HQjEfpibqo.png)\n\n![代码](https://i.loli.net/2021/03/31/VLuTOlgQzpkNWyG.png)\n\n\n\n#### 弹窗开启/关闭\n\n```javascript\nthis.open = true;\t\t\t# 弹窗开启\nthis.open = false;\t\t\t# 弹窗关闭\n```\n\n这里的`open`要对应\n\n![代码](https://i.loli.net/2021/04/02/6lZqo9jvPLQIODF.png)\n\n\n\n#### 新增时包含修改时不包含\n\n效果如下：\n\n![添加用户](https://i.loli.net/2021/04/01/8vQ3ght1irHY6Go.png)\n\n具体代码：\n\n在`index.vue`中\n\n![代码](https://i.loli.net/2021/04/01/n5jLS3D9uimE8wP.png)\n\nv-if：条件，如果`userId`未定义，说明是新增，将显示整个`el-form-item`；反之，证明已经存在这个`userId`的数据，将隐藏整个`el-form-item`。\n\n\n\n#### :expand-on-click-node\n\n当`:expand-on-click-node=\"false\"`时，展开节点的同时无法触发节点事件，如下：\n\n![效果](https://i.loli.net/2021/04/01/td4A5e2kTREylib.gif)\n\n当`:expand-on-click-node=\"true\"`时，展开节点的同时触发节点事件，如下：\n\n![效果](https://i.loli.net/2021/04/01/eL5HqPyJV1U7QDB.gif)\n\n\n\n#### 数据包分析\n\n右键，打开浏览器的`检查`，切换到`Network`，刷新用户管理页面，选择`XHR`:\n\n![数据包](https://i.loli.net/2021/04/01/xK2U6AmOa5RVG3t.png)\n\n最下面的三个数据包名称对应于`ry20210210.sql`中的`dict_type`字段\n\n![数据库文件](https://i.loli.net/2021/04/01/do4LqOXxI83P9wn.png)\n\n然后在`index.vue`中获取到数据\n\n![代码](https://i.loli.net/2021/04/01/lTXUM7NQH6oVpZL.png)\n\n\n\n#### 表单解读\n\n`<el-form>`：代表这是一个表单\n`<el-form> -> ref`：表单被引用时的名称，标识\n`<el-form> -> rules`：表单验证规则\n`<el-form> -> model`：表单数据对象\n`<el-form> -> label-width`：表单域标签的宽度，作为 Form 直接子元素的 form-item 会继承该值\n`<el-form> -> <el-form-item>`：表单中的每一项子元素\n`<el-form-item> -> label`：标签文本\n`<el-form-item> -> prop`：表单域 model 字段，在使用 validate、resetFields 方法的情况下，该属性是必填的\n`<el-input>`：输入框\n`<el-input> -> v-model`：绑定的表单数据对象属性\n`<el-input> -> style`：行内样式\n`<el-input> -> maxlength`：最大字符长度限制\n\n\n\n#### 回车触发聚焦@keyup.enter.native\n\n顾名思义，按下回车键后触发的事件，给出代码示例：\n\n前端代码：\n\n```html\n<el-input\n    v-model=\"queryParams.roleName\"\n    placeholder=\"请输入角色名称\"\n    clearable\n    size=\"small\"\n    style=\"width: 240px\"\n    @keyup.enter.native=\"handleQuery\"\n/>\n```\n\n按下回车会触发`handleQuery`方法\n\n```javascript\nhandleQuery() {\n    this.queryParams.pageNum = 1;\n    this.getList();\n}\n```\n\n#### 分配数据权限代码解读\n\n![代码](https://i.loli.net/2021/04/02/uChaqEQpxV6XHyw.png)\n\n##### .then()方法\n\nthen()方法只有在[Promise对象](https://www.runoob.com/w3cnote/javascript-promise-object.html)中才有，异步执行，就是当.then()前的方法执行完后再执行then()内部的程序，这样就避免了，数据没获取到等的问题\n\n##### res => {}\n\n在`ES6`中被定义为箭头函数\n\n```javascript\nvar f = v => v;\n//等同于\nvar f = function(v) {\n    return v;\n}\n```\n\n```javascript\nvar f = () = 5\n//等同于\nvar f = function() {\n    return 5;\n}\n```\n\n##### $nextTick()\n\n在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM\n\n#### 定义数据包字段\n\n数据包字段的定义在对应的`.xml`文件中，以数据字典为例：\n\n![数据包字段](https://i.loli.net/2021/04/02/myBDM7fWQlpu4Gt.png)\n\n在`ruoyi-system/src/main/resources/mapper/system/SysDictDataMapper.xml`\n\n![数据库文件](https://i.loli.net/2021/04/02/7UnxX5Y8AD1orNj.png)\n\n<h4 id='1'>点击修改如何获取数据</h4>\n\n##### index.vue\n\n![获取数据](https://i.loli.net/2021/04/14/5iu16hpMGgHDSce.png)\n\n##### ->student.js\n\n![代码](https://i.loli.net/2021/04/14/97LGHBNckrj3FmY.png)\n\n##### ->StudentController.java\n\n![代码](https://i.loli.net/2021/04/14/IhmCeKfSu6TXZLn.png)\n\n##### ->IStudentService.java\n\n![代码](https://i.loli.net/2021/04/14/GHI2t1CsrlR3ULJ.png)\n\n复制函数名，全局搜索，进入`StudentMapper.xml`，找到：\n\n##### StudentMapper.xml\n\n![代码](https://i.loli.net/2021/04/14/VrtgSH61womeLnl.png)\n\n##### 在index.vue的el-dialog\n\n![代码](https://i.loli.net/2021/04/14/itfb6M1oXKaHkuP.png)\n\n要和第一步保持一致！！\n\n#### 关闭当前选项卡\n\n```javascript\nthis.$store.dispatch('tagsView/delView', this.$route)\n```\n\n#### 跳转至目标界面，指定目标界面刷新\n\n在目标界面添加：\n\n```javascript\nwatch: {\n  '$route': 'getList'\n},\n```\n\n其中`'$route'`对应的方法自己指定\n\n#### 提交功能的实现\n\n继续以学生模块为例，具体效果如下\n![效果](https://i.loli.net/2021/04/19/qyGSF5Tvbp3E8Vc.gif)\n\n##### 代码实现\n\n`ruoyi-ui/src/views/student/student/detail.vue`中添加代码：\n\n```javascript\nsubmitForm() {\n  this.$refs['elForm'].validate(valid => {\n    if (valid) {\n      updateStudent(this.formData).then(response => {\n        this.msgSuccess(\"修改成功\")\n        // 关闭当前选项卡\n        this.$store.dispatch('tagsView/delView', this.$route) \n        // 跳转至目标页面\n        this.$router.push({\n          path: '/tool/student',\n        })\n      })\n    }\n  })\n},\n```\n\n`ruoyi-ui/src/views/student/student/index.vue`中添加代码：\n\n```javascript\nwatch: {\n    '$route': 'getList'\n  },\t// 目标页面刷新\n```\n\n#### 动态隐藏元素\n\n例：隐藏`<el-col>`标签的内容，代码如下：\n\n```html\n<el-col :style=\"{ display: visibleParams.visible }\">\n```\n\n#### el-dialog宽度调整\n\n`el-dialog`增加一个custom-class，代码如下：\n\n```html\n<el-dialog :title=\"title\" :visible.sync=\"open\" custom-class=\"customWidth\">\n...\n<style>\n  .customWidth {\n    width: 60%;\n  }\n</style>\n```\n\n#### JavaScript获取字典长度\n\n```javascript\nlet length = Object.keys(data).length\n```\n\n#### 修改上传文件大小\n\n在`ruoyi-admin/src/resources/application.yml`中，修改如下：\n\n![upload](https://i.loli.net/2021/05/24/TOzL6GWPYDnQHhr.png)\n\n在`ruoyi-common/src/main/java/com/ruoyi/common/utils/file/FileUploadUtils.java`中，修改如下：\n\n![max-size](https://i.loli.net/2021/05/24/a4uCklIHZoWQmXB.png)\n\n#### el-input不可编辑\n\n```html\n<el-input v-model=\"docList.contractId\" placeholder=\"请输入合同id\" :disabled=\"true\"/>\n```\n\n#### 点击table单元格触发事件\n\n##### 效果\n\n![table事件](https://i.loli.net/2021/05/25/9WkQPY2m8i7IXxu.gif)\n\n##### 如何实现\n\n```html\n<el-table-column prop=\"urlname\" label=\"附件名称\">\n    <template slot-scope=\"scope\">\n        <el-button @click=\"handleView(scope.row)\" type=\"text\">{{ scope.row.urlname }}</el-button>\n    </template>\n</el-table-column>\n```\n\n注意，这里必须先使用`template`模板包裹起来，然后使用插槽slot-scope，同时，使用数据绑定\n\n#### el-table-column隐藏列\n\n```html\n<el-table-column prop=\"id\" label=\"序号\" v-if=\"show\"></el-table-column>\n```\n\n```javascript\n// 是否显示列\nshow: true,\n```\n\n#### 表单间距紧凑\n\n```html\n<el-table v-loading=\"loading\" :data=\"customerList\"\n    :header-cell-style=\"{\n        height:'30px',\n        padding:'2px'\n    }\"\n    :row-style=\"{height: '0'}\"\n    :cell-style=\"{padding: '0'}\"\n>\n```\n\n```html\n<el-form :model=\"queryParams\" :inline=\"true\"label-width=\"80px\" size=\"mini\" >\n```\n\n```html\n<el-form-item label=\"客户姓名\" prop=\"customerName\" style=\"margin-bottom:5px\">\n    <el-input\n        v-model=\"queryParams.customerName\"\n        placeholder=\"请输入客户姓名\"\n        clearable\n        size=\"small\"\n    />\n</el-form-item>\n```\n\n#### 时间搜索\n\n你可能会发现，直接使用代码生成的检索，当时间参数存在时，检索是失败的，这是因为在检索时间的时候没有统一时间格式，正确的做法如下：\n\n在对应的`xml`文件中，修改时间部分的代码：\n\n```xml\n<if test=\"actualReceivedDate != null \">\n    and date_format(actual_received_date,'%y%m%d')\n    =date_format(#{actualReceivedDate},'%y%m%d')\n</if>\n```\n\n即使用`date_format`函数来格式化日期进而进行比较\n\n#### 表单字体颜色\n\n##### 效果\n\n![字体颜色](https://i.loli.net/2021/06/01/37WoUy6Gd2PmpSu.png)\n\n##### 如何实现\n\n一、设置风格函数\n\n```javascript\ncellStyle({row, column, rowIndex, columnIndex}) {\n    // 状态列字体颜色\n    if (row.approvalStatus === '0' && columnIndex === 3) {\n        return 'color: #EA1B29; padding: 0;'\n    } else if (row.approvalStatus === '1' && columnIndex === 3) {\n    \treturn 'color: #FFA500; padding: 0;'\n    } else if (row.approvalStatus === '2' && columnIndex === 3){\n    \treturn 'color: #0CB618; padding: 0;'\n    }\n},\n```\n\n二、`el-table`中添加参数\n\n```html\n<el-table ... :cell-style=\"cellStyle\" ...>\n```\n\n#### 回到顶部\n\n```html\n<el-backtop></el-backtop>\n```\n\n#### 解决type=\"selection\"导致v-if失效的问题\n\n只需加入这段代码即可，原理未知，很玄学\n\n```html\n<el-table-column type=\"selection\" :key=\"Math.random()\" v-if=\"!edit\"/>\n```\n\n加入`:key=Math.random()`即可\n\n#### 获取上一级路由(不是父级)\n\n这个需求也就是获取上一个页面的路由地址，我们可以使用`vue-router`的`beforeRouterEnter`，也就是一个路由守卫，来实现这个需求\n\n##### 定义路由守卫方法\n\n```javascript\nbeforeRouteEnter(to, from, next) {\n    next(vm => {\n      vm.fromPath = from.path\n    })\n},\n```\n\n**注意：**路由守卫方法定义的位置和`created`方法同级\n\n因为这里vm约等于this，因此我们需要定义上级路由参数\n\n##### 定义参数\n\n```javascript\n// 上级路由\nfromPath: \"path\",\n```\n\n##### 同步调用\n\n由于`beforeRouteEnter`中的`next`方法无法在页面加载完成时立刻生效，我们需要在`mounted`方法中定义操作\n\n```javascript\nmounted() {\n    this.$nextTick(() => {\n        this.edit = this.fromPath !== \"/develop/qljcontract\"\n    })\n},\n```\n\n#### el-input添加后缀\n\n##### 效果\n\n![后缀](https://i.loli.net/2021/06/11/mE1skoWjeHr5vxO.png)\n\n##### 如何实现\n\n```html\n<el-form-item label=\"总价\" prop=\"totalPrice\">\n  <el-input v-model=\"formData.totalPrice\" placeholder=\"总价\" clearable>\n    <!-- 下面这句 -->\n    <i slot=\"suffix\" style=\"font-style:normal;margin-right: 10px;\">万元</i>\n  </el-input>\n</el-form-item>\n```\n\n其中，`slot=\"suffix\"`为后缀，`slot=\"prefix\"`为前缀\n\n#### 带有建议的输入\n\n##### 效果\n\n![带建议的输入](https://i.loli.net/2021/06/11/hLlaYucepqZXR5G.gif)\n\n##### 如何实现\n\n一、使用`el-autocomplete`组件\n\n```html\n<el-autocomplete\n  clearable \n  v-model=\"actualPayInfo.receivedPaymentPercent\" \n  placeholder=\"请输入到款比例\"\n  :fetch-suggestions=\"querySearch\" \n  :trigger-on-focus=\"false\">\n</el-autocomplete>\n```\n\n`:fetch-suggestions`是所有建议的内容\n\n`:trigger-on-focus`为`false`时，输入内容才会弹出建议；为`true`时，点击文本框就会弹出建议\n\n二、定义到款比例参数\n\n```javascript\ndata() {\n  return {\n    // 到款比例\n    receivedPercent: [],\n  }\n}\n```\n\n三、定义建议函数和过滤函数\n\n```javascript\nquerySearch(queryString, cb) {\n    const receivedPercent = this.receivedPercent;\n    const results = queryString ? receivedPercent.filter(this.createFilter(queryString)) : receivedPercent;\n    // 调用 callback 返回建议列表的数据\n    cb(results);\n},\ncreateFilter(queryString) {\n    return (receivedPercent) => {\n        return (receivedPercent.value.toLowerCase().indexOf(queryString.toLowerCase()) === 0);\n    };\n},\n```\n\n这两个函数只需要修改对应的参数即可，其他地方不需要做改变\n\n四、定义`loadAll()`函数\n\n```javascript\nloadAll() {\n    return [\n        {\"value\": '33'},\n        {\"value\": '60'},\n        {\"value\": '10'},\n        {\"value\": '34'}\n    ];\n},\n```\n\n将所有的建议内容放在这里\n\n五、调用\n\n```javascript\nmounted() {\n  this.receivedPercent = this.loadAll();\n},\n```\n\n#### Excel导入根据不同字段判断重复\n\n假如我们需要按照`序号`来判断导入是否重复，代码如下：\n\n我的项目代码地址 `ruoyi-system/src/main/java/com/ruoyi/qljsystem/service/impl/QljBusinessplanServiceImpl.java`\n\n![判断重复](https://i.loli.net/2021/07/29/sGXeFNUHhrWEPgQ.png)\n\n查看对应的`xml`代码\n\n```xml\n<select id=\"selectRealBusinessplanBySerialNum\" parameterType=\"Double\" resultMap=\"QljRealBusinessPlanResult\">\n    <include refid=\"selectQljBusinessplanVo\"/>\n        where serial_number = #{serialNumber} and delete_flag=0\n</select>\n```\n\n#### 正确对应附件上传地址\n\n在`ruoyi-admin/src/main/resources/application.yml`中，修改这个地方：\n\n<img src=\"https://i.loli.net/2021/07/29/vwi7OWVBlR4XApx.png\" alt=\"image-20210729093202728\" style=\"zoom:80%;\" />\n\n这个地址不仅仅是附件保存的地址，还是头像储存的地方\n\n#### el-input输入框事件\n\n参考[本文](http://www.garfielder.com/post/be91e8e2.html)\n\n#### el-table行点击事件\n\n点击`el-table`的某一行触发的事件，代码如下\n\n```html\n<el-table @row-click=\"testMsg\" @selection-change=\"handleSelectionChange\">\n```\n\n即使用`@row-click`\n\n#### el-table点击行高亮\n\n##### 效果\n\n![行高亮](https://i.loli.net/2021/08/27/RU3aHJYlE6s7Byu.png)\n\n##### 解决方案\n\n```html\n<el-table @row-click=\"click\" highlight-current-row>\n```\n\n#### el-table表头弹出框\n\n##### 效果\n\n![效果](https://i.loli.net/2021/10/26/4ub6QWs5t8pDPeV.png)\n\n##### 实现\n\n一、表格列添加`render-header`\n\n```html\n<el-table-column label=\"欠款金额\" prop=\"debtAmount\" :render-header=\"renderHeader\"/>\n```\n\n二、定义`renderHeader`方法\n\n```js\nrenderHeader(h, {column, $index}) {\n  return [\n    column.label,\n    h(\n      'el-tooltip',\n      {\n        props: {\n          placement: 'top',\n          effect: \"light\",\n          //content:\"提示框内容\",//如果提示内容短不需要换行，直接使用这个提示内容\n        },\n      },\n      [\n        h('div',\n          {\n            slot: \"content\",\n          },\n          [this.renderData[$index]]\n        ),\n        h('span', {//问号模块\n          class: {\n            'el-icon-question': true\n          }\n        }),\n      ],\n    )\n  ]\n},\n```\n\n### bug修复篇\n\n#### 树表多选的异步问题\n\n##### bug复现及描述\n\n![异步之前](https://i.loli.net/2021/06/16/D3PByvo1xilrTVe.gif)\n\n可以看到，此场景的需求是：勾选父节点，子节点自动被选中，但是，表面上看子节点已经被选中，但是需要执行操作的时候（例如删除），却发现只能操作**鼠标点击**的父节点；然后，通过父节点取消选择后，发现依然可以执行删除操作，而且删除的数据正是刚刚的所有子节点数据。因此分析，一定是Dom的异步渲染造成的问题。\n\n##### bug修正\n\n一切原因出在`@select`参数上，原本`@select`参数所对应的函数如下：\n\n```javascript\n// bug代码\ntoggleSelection(rows, flag) {\n  if (rows) {\n    rows.forEach(row => {\n        this.$refs.tableBusiness.toggleRowSelection(row, flag);\n    });\n  } else {\n    this.$refs.tableBusiness.clearSelection();\n  }\n},\n```\n\n修改如下：\n\n```javascript\n// 无bug代码\ntoggleSelection(rows, flag) {\n  if (rows) {\n    this.$nextTick(() => {\n      rows.forEach(row => {\n        this.$refs.tableBusiness.toggleRowSelection(row, flag);\n      });\n    })\n  } else {\n    this.$nextTick(() => {\n      this.$refs.tableBusiness.clearSelection();\n    })\n  }\n},\n```\n\n`$nextTick`是在下次DOM更新循环结束之后执行延迟回调，在修改数据之后使用`$nextTick`，则可以在回调中获取更新后的DOM\n\n##### 修正后效果\n\n![异步之后](https://i.loli.net/2021/06/16/KdosviuIUM5hyH2.gif)\n\n#### 退出登录时总是404\n\n##### bug修正\n\n修改这个文件`ruoyi-ui/src/layout/components/Navbar.vue`的这个地方\n\n<img src=\"https://i.loli.net/2021/07/29/NMdc9RlhrnJpqk5.png\" alt=\"href\" style=\"zoom:80%;\" />\n\n","tags":["若依","Vue","SpringBoot"],"categories":["记录","框架","若依"]},{"title":"CentOS7离线安装mysql5.7","url":"/post/a62133b2.html","content":"\n### 环境准备\n\nCentOS7  + MySQL5.7\n\n### 下载离线安装包\n\nMySQL5.7 Linux安装包[官网下载](https://dev.mysql.com/downloads/mysql)地址\n\n注意选择版本\n\n![下载](https://i.loli.net/2021/03/30/qvpCUmXLhjld3nb.png)\n\n### 解压安装包\n\n进入/home目录，使用`mkdir mysql`命令新建一个名为`mysql`的目录，将下载的包复制到`mysql`目录下，打开终端解压之\n\n```shell\ntar -xf mysql-5.7.27-1.el7.x86_64.rpm-bundle.tar\n```\n\n### 查询并卸载系统自带的Mariadb\n\n```shell\nrpm -qa | grep mariadb\nrpm -e --nodeps 文件名\n```\n\n### 查询并卸载老旧版本MySQL\n\n```shell\nrpm -qa | grep mysql\nrpm -e --nodeps 文件名\n```\n\n### 安装\n\n#### 使用rpm安装\n\n```shell\nrpm -ivh mysql-community-common-5.7.27-1.el7.x86_64.rpm\n\nrpm -ivh mysql-community-libs-5.7.27-1.el7.x86_64.rpm\n\nrpm -ivh mysql-community-devel-5.7.27-1.el7.x86_64.rpm\n\nrpm -ivh mysql-community-libs-compat-5.7.27-1.el7.x86_64.rpm\n\nrpm -ivh mysql-community-client-5.7.27-1.el7.x86_64.rpm\n\nrpm -ivh mysql-community-server-5.7.27-1.el7.x86_64.rpm\n```\n\n#### 启用MySQL服务\n\n查看MySQL服务是否启动 `service mysqld status`\n\n启动服务 `systemctl start mysqld`\n\n#### 重置root密码\n\nMySQL5.7会在安装后为root用户生成一个随机密码，而不是像以往版本的空密码。 可以安全模式修改root登录密码或者用随机密码登录修改密码。下面用随机密码方式\nMySQL为root用户生成的随机密码通过`mysqld.log`文件可以查找到：\n\n![查看密码](https://i.loli.net/2021/03/30/CsOvAeqrb8ih2ck.png)\n\n```mysql\nmysql -u root -p\nmysql> Enter password: （输入刚才查询到的随机密码）\nmysql> SET PASSWORD FOR 'root'@'localhost'= \"yourpwd\";\nmysql> exit\n```\n\nMySQL的密码策略比较复杂，要大小写，过于简单的密码会被拒绝\n\n#### 上述方法无法修改的备用方案\n\n关闭服务，修改mysql配置文件:\n\n```shell\nsystemctl stop mysqld.service\nvi /etc/my.cnf\n```\n\nmysqld下面添加`skip-grant-tables`保存退出启动服务(如图)\n\n![添加语句](https://i.loli.net/2021/03/30/mWK75aMlucIJBoe.png)\n\n```shell\nsystemctl start mysqld.service\n```\n\n修改root密码\n\n```mysql\nmysql -u root  # 刚才添加了skip，这种情况下不需要密码直接回车\nuse mysql   # 指定库\n\nupdate user set authentication_string=password('yourpwd') where user='root' and host='localhost';\nflush privileges; # 清空权限表缓存\nexit;\n```\n\n`vi /etc/my.cnf` ，把 `skip-grant-tables` 这句删除保存退出重启mysql服务，恢复密码登录\n\n```shell\nsystemctl restart mysqld.service\n```\n\n#### 自定义密码登录\n\n```mysql\nmysql -u root –p\nyourpwd\n```\n\n#### 开放外部网段访问3306端口\n\n```mysql\nmysql>GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'yourpwd' WITH GRANT OPTION;\n\nmysql>FLUSH PRIVILEGES;\n\nmysql>exit;\n```\n\n\n\n\n\n","tags":["知识","Linux","MySQL"],"categories":["Linux","MySQL"]},{"title":"若依-代码生成","url":"/post/a24d1725.html","content":"\n### 创建数据表\n\n```mysql\nDROP TABLE if EXISTS student;\nCREATE TABLE student(\n\tid int NOT NULL auto_increment COMMENT 'id',\n\tname varchar(20) NOT NULL      COMMENT '姓名',\n\tage\tint COMMENT '年龄',\n\tgender int COMMENT '性别',\n\tcreator VARCHAR(20) COMMENT '创建者',\n\tcreate_time datetime COMMENT '创建时间',\n\tstatus VARCHAR(2) COMMENT '数据状态',\n\tdel_flag VARCHAR(2) COMMENT '删除标志',\n\tPRIMARY key(id)\n)ENGINE=INNODB COMMENT '学生表';\n```\n\n### 生成代码\n\n#### 导入表\n\n系统工具->代码生成->导入->选中需要导入的表->确定\n\n![导入表](https://i.loli.net/2021/03/29/p51RmcgnYawJ82b.png)\n\n#### 修改生成配置\n\n![修改生成配置](https://i.loli.net/2021/03/29/nUwdMRtY9fAs3gJ.png)\n\n#### 生成代码\n\n![生成代码](https://i.loli.net/2021/03/29/GWp9UQKkmDqyTJZ.png)\n\n### 导入代码到项目中\n\n#### 生成菜单\n\n生成代码中有个`studentMenu.sql`文件，在数据库中运行一遍文件中，将新模块加入到项目的菜单中\n\n#### 文件导入\n\n将`StudentController.java`放入`ruoyi-admin`模块的`controller`目录下的`student`包内\n\n![位置](https://i.loli.net/2021/03/29/m4LWPi1oKSCgshd.png)\n\n将`domain`、`mapper`、`service`包放入`ruoyi-system`模块的`student`(需要手动新建)包内\n\n![位置](https://i.loli.net/2021/03/29/53dWBpLhnqjbDvf.png)\n\n将`StudentMapper.xml`放入`ruoyi-system`模块的`resource\\mapper\\student`包内\n\n![位置](https://i.loli.net/2021/03/29/HJbWxASBki1whrX.png)\n\n将`api`下的包放入`ruoyi-ui`模块的`src\\api`包内\n\n![位置](https://i.loli.net/2021/03/29/7tG14Wj2ykrVb5i.png)\n\n将`views`下的包放入`ruoyi-ui`模块的`src\\views`包内\n\n![位置](https://i.loli.net/2021/03/29/bLlv8hyMGe1WmXt.png)\n\n### Biuld Project\n\n完成上面的工作之后build一下项目或者重启一下项目即可\n\n![重启测试](https://i.loli.net/2021/03/29/65n7UQYScKm2TLp.png)\n\n","tags":["若依","Vue","SpringBoot"],"categories":["记录","框架","若依"]},{"title":"置顶文章","url":"/post/7f67377d.html","content":"\n### 文章\n\n[若依框架说明书](http://www.garfielder.com/post/1bde0d35.html)\n\n[有用命令](http://www.garfielder.com/post/a92f9037.html)\n\n[字体下载](http://www.xiazaiziti.com/)\n\n[磁盘挂载](https://blog.csdn.net/xianjuke008/article/details/88354466)\n\n### 网站\n\n[Element-UI](https://element.eleme.cn/#/zh-CN)\n\n[若依分离版](https://gitee.com/y_project/RuoYi-Vue)\n\n[若依官方文档](http://doc.ruoyi.vip/ruoyi-vue/)\n\n\n\n\n\n\n\n","categories":["记录"]},{"title":"若依-本地环境部署","url":"/post/9e3bff48.html","content":"\n\n\n### 安装运行环境\n\n> 若依平台基于Vue，因此要先安装node和vue@cli脚手架\n>\n> 若依基于Maven管理项目的构建，因此需要安装好Maven\n>\n> 安装redis服务\n>\n> 克隆或下载项目源码到本地：https://gitee.com/y_project/RuoYi-Vue\n>\n> 准备好一个IDE比如IntelliJ Idea\n\n### 环境部署\n\n使用Idea导入项目，这里有几项必要的配置：\n\n`RuoYi-Vue`=>`ruoyi-admin`=>`src`=>`main`=>`resources`=>`application-druid.yml`:\n\n```yaml\n# 数据源配置\nspring:\n    datasource:\n        type: com.alibaba.druid.pool.DruidDataSource\n        driverClassName: com.mysql.cj.jdbc.Driver\n        druid:\n            # 主库数据源\n            master:\n                url: yoururl\t\t\t\t# 这里\n                username: yourusername\t\t# 这里\n                password: yourpassword\t\t# 这里\n```\n\n`RuoYi-Vue`=>`ruoyi-admin`=>`src`=>`main`=>`resources`=>`application.yml`:\n\n```yaml\n# 项目相关配置\nruoyi:\n  # 名称\n  name: RuoYi\n  # 版本\n  version: 3.3.0\n  # 版权年份\n  copyrightYear: 2021\n  # 实例演示开关\n  demoEnabled: true\n  \n  profile: yourprofile\t\t\t# 这里\n  # 获取ip地址开关\n  addressEnabled: false\n  # 验证码类型 math 数组计算 char 字符验证\n  captchaType: math\n```\n\n配置好之后，进入安装好的redis目录下，打开cmd命令行，输入`redis-server.exe redis.windows.conf`，回车，成功启动redis服务，如图：\n\n![redis](https://i.loli.net/2021/03/24/f1F2kIMmzbXJGTu.png)\n\n然后进入主程序启动后端服务：`RuoYi-Vue`=>`ruoyi-admin`=>`src`=>`main`=>`java`=>`com.ruoyi`=>`RuoYiApplication`，如图：\n\n![spring](https://i.loli.net/2021/03/24/tjeFIDQl9Yf7Ly4.png)\n\n同时，进入`ruoyi-ui`的目录下，打开cmd命令行，输入`npm run dev`，开启前端界面，如图：\n\n![npm](https://i.loli.net/2021/03/24/q5HtRgyzhMFPkKu.png)\n\n此时，浏览器输入`localhost:82`（也可能不用输入，会自动打开），可以成功看到启动界面：\n\n![界面](https://i.loli.net/2021/03/24/Ahk5WeUrTuPsq2D.png)\n\n### 问题记录\n\n#### 项目启动的时候，提示Handler dispatch failed\n\n##### 问题描述\n\n![问题](https://i.loli.net/2021/03/24/iGNXq2TwAL1WKZH.jpg)\n\n##### 解决办法\n\n手动加入依赖包：\n\n`RuoYi-Vue`=>`ruoyi-admin`=>`pom.xml`: \n\n```xml\n<dependency>\n\t<groupId>javax.xml.bind</groupId>\n\t<artifactId>jaxb-api</artifactId>\n\t<version>2.3.0</version>\n</dependency>\n<dependency>\n\t<groupId>com.sun.xml.bind</groupId>\n\t<artifactId>jaxb-impl</artifactId>\n\t<version>2.3.0</version>\n</dependency>\n<dependency>\n\t<groupId>com.sun.xml.bind</groupId>\n\t<artifactId>jaxb-core</artifactId>\n\t<version>2.3.0</version>\n</dependency>\n<dependency>\n\t<groupId>javax.activation</groupId>\n\t<artifactId>activation</artifactId>\n\t<version>1.1.1</version>\n</dependency>\n```\n\n#### Error creating bean with name 'sysConfigServiceImpl':\n\n##### 问题描述\n\n![问题描述](https://i.loli.net/2021/03/24/VQD15mENIsoMgP6.png)\n\n##### 解决方案\n\n没有启动redis，启动即可\n\n#### 不再支持源选项 5。请使用 6 或更高版本。\n\n##### 解决方案\n\n`File`=>`Settings`=>`Build,Execution,Deployment`=>`Build Tools`=>`Maven`:\n\n![设置](https://i.loli.net/2021/03/25/LDT4sjq3CYw7zJl.png)\n\nFile=>Project Structure=>Project\n\n![设置](https://i.loli.net/2021/03/25/XmefLVtjqOihxNa.png)\n\nFile=>Project Structure=>Modules\n\n![设置](https://i.loli.net/2021/03/25/wl3QdhkGKXPWRmS.png)\n\n在`pom.xml`中添加：\n\n```xml\n<maven.compiler.encoding>UTF-8</maven.compiler.encoding>\n<java.version>8</java.version>\n<maven.compiler.source>8</maven.compiler.source>\n<maven.compiler.target>8</maven.compiler.target>\n```\n\n重新编译即可。\n\n#### 'vue-cli-service' 不是内部或外部命令，也不是可运行的程序或批处理文件\n\n##### 问题描述\n\n![问题描述](https://i.loli.net/2021/03/29/yrupOb3tQKmenBg.png)\n\n##### 解决方案\n\n进入到`ruoyi-ui`目录下，打开命令行输入`npm install`即可\n\n#### Unknown html tag\n\n##### 问题描述\n\n![问题描述](https://i.loli.net/2021/04/07/b68SIMLEmUv23TJ.png)\n\n##### 解决方案\n\n打开`package.json`，在`\"dependencies\"`添加`\"element-ui\": \"2.15.0\"`(版本号自行更改)，然后运行`npm install`即可\n\n![解决方案](https://i.loli.net/2021/04/07/M7isEBrKZOeUyFL.png)\n\n\n\n","tags":["若依","Vue","SpringBoot"],"categories":["记录","框架","若依"]},{"title":"Vim使用指南","url":"/post/32630e53.html","content":"\n\n\n### 何为Vim\n\nVim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。\n\n### 三种模式\n\n基本上vi/vim共分为三种模式，分别是\n\n> 命令模式（Command mode）\n>\n> 输入模式（Insert mode）\n>\n> 底线命令模式（Last line mode）\n\n#### 命令模式（Command mode）\n\n用户刚刚启动 vi/vim，便进入了命令模式。\n\n此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。\n\n以下是常用的几个命令：\n\n```\ni 切换到输入模式，以输入字符。\nx 删除当前光标所在处的字符。\n: 切换到底线命令模式，以在最底一行输入命令。\n```\n\n若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。\n\n命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。\n\n#### 输入模式（Insert mode）\n\n在命令模式下按下i就进入了输入模式。\n\n在输入模式中，可以使用以下按键：\n\n```\n字符按键以及Shift组合，输入字符\nENTER，回车键，换行\nBACK SPACE，退格键，删除光标前一个字符\nDEL，删除键，删除光标后一个字符\n方向键，在文本中移动光标\nHOME/END，移动光标到行首/行尾\nPage Up/Page Down，上/下翻页\nInsert，切换光标为输入/替换模式，光标将变成竖线/下划线\nESC，退出输入模式，切换到命令模式\n```\n\n#### 底线命令模式（Last line mode）\n\n在命令模式下按下:（英文冒号）就进入了底线命令模式。\n\n底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。\n\n在底线命令模式中，基本的命令有（已经省略了冒号）：\n\n```\nq 退出程序\nw 保存文件\n```\n\n### 基础命令\n\n接下来简单介绍一些基础命令。\n\n#### 打开、保存、关闭文件\n\nvi命令模式下使用\n\n```\nvi filename           //打开filename文件\n:w                    //保存文件\n:w vpser.net          //保存至vpser.net文件\n:q                    //退出编辑器，如果文件已修改请使用下面的命令\n:q!                   //退出编辑器，且不保存\n:wq                   //退出编辑器，且保存文件\n```\n\n#### 插入文本或行\n\nvi命令模式下使用，执行下面命令后将进入插入模式，按`ESC`键可退出插入模式\n\n```\na       //在当前光标位置的右边添加文本\ni       //在当前光标位置的左边添加文本\nA       //在当前行的末尾位置添加文本\nI       //在当前行的开始处添加文本(非空字符的行首)\nO       //在当前行的上面新建一行\no       //在当前行的下面新建一行\nR       //替换(覆盖)当前光标位置及后面的若干文本\nJ       //合并光标所在行及下一行为一行(依然在命令模式)\n```\n\n#### 移动光标\n\nvi命令模式下使用\n\n1. 使用上下左右方向键\n2. 命令模式下：h 向左、j 向下 、k 向上、l 向右\n3. 空格键 向右、Backspace 向左、Enter 移动到下一行首、- 移动到上一行首\n\n#### 删除、恢复字符或行\n\nvi命令模式下使用\n\n```\nx         //删除当前字符\nnx        //删除从光标开始的n个字符\ndd        //删除当前行\nndd       //向下删除当前行在内的n行\nu         //撤销上一步操作\nU         //撤销对当前行的所有操作\n```\n\n#### 搜索\n\nvi命令模式下使用\n\n```\n/vpser      //向光标下搜索vpser字符串\n?vpser      //向光标上搜索vpser字符串\nn           //向下搜索前一个搜素动作\nN           //向上搜索前一个搜索动作\n```\n\n#### 跳至指定行\n\nvi命令模式下使用\n\n```\nn+          //向下跳n行\nn-          //向上跳n行\nnG          //跳到行号为n的行\nG           //跳至文件的底部\n```\n\n#### 设置行号\n\nvi命令模式下使用\n\n```\n:set  nu     //显示行号\n:set nonu    //取消显示行号\n```\n\n#### 复制、粘贴\n\nvi命令模式下使用\n\n```\nyy      //将当前行复制到缓存区，也可以用 \"ayy 复制，\"a 为缓冲区，a也可以替换为a到z的任意字母，可以完成多个复制任务。\nnyy     //将当前行向下n行复制到缓冲区，也可以用 \"anyy 复制，\"a 为缓冲区，a也可以替换为a到z的任意字母，可以完成多个复制任务。\nyw      //复制从光标开始到词尾的字符。\nnyw     //复制从光标开始的n个单词。\ny^      //复制从光标到行首的内容。\ny$      //复制从光标到行尾的内容。\np       //粘贴剪切板里的内容在光标后，如果使用了前面的自定义缓冲区，建议使用\"ap 进行粘贴。\nP       //粘贴剪切板里的内容在光标前，如果使用了前面的自定义缓冲区，建议使用\"aP 进行粘贴。\n```\n\n#### 替换\n\nvi命令模式下使用\n\n```\n:s/old/new           //用new替换行中首次出现的old\n:s/old/new/g         //用new替换行中所有的old\n:n,m s/old/new/g     //用new替换从n到m行里所有的old\n:%s/old/new/g        //用new替换当前文件里所有的old\n```\n\n#### 编辑其他文件\n\n```\n:e otherfilename     //编辑文件名为otherfilename的文件。\n```\n\n#### 修改文件格式\n\n```\n:set fileformat=unix   //将文件修改为unix格式，如win下面的文本文件在linux下会出现^M。\n```","tags":["Vim"],"categories":["Vim"]},{"title":"CentOS必备配置","url":"/post/127d43b1.html","content":"\n\n\n#### 安装VMware Tools\n\n安装后可以自适应屏幕、共享剪贴板等，强烈推荐安装。\n\n启动虚拟机，然后点击菜单栏的`虚拟机`下的`安装VMware Tools`，然后，会在CentOS桌面上生成一个名字为`VMware Tools`的光驱文件。\n\n双击这个光驱文件，会看到一个后缀为`.tar.gz`的压缩文件。将压缩文件复制到home目录下，home目录即左侧的主目录文件夹。\n\n![主文件夹](https://i.loli.net/2021/03/19/r49LphGIFQfnTbx.png)\n\n在这个目录下打开终端，解压缩`tar -zxvf VMwareTools-10.3.21-14772444.tar.gz`，(名字换成你自己的)，解压完后，会生成一个`vmware-tools-distrib`文件夹。\n\n进入这个文件夹，执行`cd vmware-tools-distrib`，切换成超级用户，执行`su`，输入密码，执行`sudo ./vmware-install.pl`，输入密码即可开始安装。\n\n一路回车或者输入`yes`即可。安装完成后会有下列字样：\n\n![一路回车](https://i.loli.net/2021/03/19/O9vNfhFwrcXYnim.png)\n\n\n\n#### 访问ntfs类型的U盘\n\n```shell\nsudo wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo\nsudo yum update\nsudo yum install ntfs-3g\n```\n\n\n\n#### 添加截图快捷键\n\n进入设置\n\n![设置](https://i.loli.net/2021/03/19/yLMDa94jxgIK8Z7.png)\n\n选择`设备->Keyboard`，拉到下面点`➕`，\n\n![定义快捷键](https://i.loli.net/2021/03/19/ayle6GqstjgZfmr.png)\n\n设置好之后点击`添加`即可。\n\n\n\n#### 添加中文输入法\n\n进入设置，选择`Region & Language`，点击`➕`，选择`汉语->汉语(Intelligent Pinyin)`，点击`添加`即可。\n\n![语言](https://i.loli.net/2021/03/19/5YfuZPEVnSBxhsg.png)\n\n\n\n#### ~~安装百度网盘Linux版（暂时无效）~~\n\n~~进入[官网](http://pan.baidu.com/download)，下载`rpm格式`，下载好之后打开终端，输入`rpm -ivh`，然后将下载的包拖进来，回车即可开始下载。~~\n\n\n\n#### 配置Java环境\n\n进入[下载页面](https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html)，选择`linux-x64.tar.gz`后缀的文件，下载。这里需要登录Oracle账号。嫌麻烦直接百度网盘之：\n\n> 链接：https://pan.baidu.com/s/1Z4jq1OqxP_3R-Ej24hn7mw \n> 提取码：mtow \n\n创建一个Java目录\n\n```shell\nmkdir /usr/local/java\ncd /usr/local/java\n```\n\n把下载好的Java包放入此目录，解压，解压前先切换至超级用户\n\n```shell\nsu          # 回车后输入密码进入超级用户模式\ntar -zxvf jdk-8u281-linux-x64.tar.gz     # 文件名换成你自己的\n```\n\n配置环境变量\n\n```shell\nvi /etc/profile\n```\n\n添加如下内容\n\n```shell\n#set java environment\nJAVA_HOME=/usr/local/java/jdk1.8.0_281\t\t\t# 文件名换成自己的\nJRE_HOME=/usr/local/java/jdk1.8.0_281/jre\t\t# 文件名换成自己的\nCLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib\nPATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin\nexport JAVA_HOME JRE_HOME CLASS_PATH PATH\n```\n\n**重要！！**保存成功后输入下面的命令让修改生效！\n\n```shell\nsource /etc/profile\n```\n\n输入`java -version`可以查看是否配置成功。\n\n![查看是否成功](https://i.loli.net/2021/03/19/9oHTBKGmunFiQl5.png)\n\n","tags":["Linux","CentOS"],"categories":["Linux"]},{"title":"Linux入门必会命令","url":"/post/6240db98.html","content":"\n\n\n### 基本命令\n\n#### 关机和重启\n\n```shell\nshutdown -h now        立刻关机\nshutdown -h 5          5分钟后关机\npoweroff               立刻关机\nshutdown -r now        立刻重启\nshutdown -r 5          5分钟后重启\nreboot                 立刻重启\n```\n\n#### 帮助命令\n\n```shell\nman命令(命令说明书)\nman shutdown\t\t   打开shutdown命令说明书，按键q退出\n```\n\n### 目录操作命令\n\n#### 目录切换 cd\n\n```shell\n命令：cd 目录\n\ncd /           切换到根目录\ncd /usr        切换到根目录下的usr目录\ncd ../         切换到上一级目录 或者  cd ..\ncd ~           切换到home目录\ncd -           切换到上次访问的目录\n```\n\n#### 目录查看 ls [al]\n\n```shell\n命令：ls [-al]\n\nls                查看当前目录下的所有目录和文件\nls -a             查看当前目录下的所有目录和文件（包括隐藏的文件）\nls -l 或 ll       列表查看当前目录下的所有目录和文件（列表查看，显示更多信息）\nls /dir           查看指定目录下的所有目录和文件   如：ls /usr\n```\n\n白色：表示普通文件\n蓝色：表示目录\n绿色：表示可执行文件\n红色：表示压缩文件\n浅蓝色：链接文件\n红色闪烁：表示链接的文件有问题\n×××：表示设备文件\n灰色：表示其他文件\n\n#### 目录操作【增、删、改、查】\n\n##### 创建目录 mkdir\n\n```shell\n命令：mkdir 目录\n\nmkdir    aaa            在当前目录下创建一个名为aaa的目录\nmkdir    /usr/aaa       在指定目录下创建一个名为aaa的目录\n```\n\n##### 删除目录或文件 rm\n\n```shell\n命令：rm [-rf] 目录\n\n删除文件：\nrm 文件         删除当前目录下的文件\nrm -f 文件      删除当前目录的文件（不询问）\n\n删除目录：\nrm -r aaa      递归删除当前目录下的aaa目录\nrm -rf aaa     递归删除当前目录下的aaa目录（不询问）\n\n全部删除：\nrm -rf *       将当前目录下的所有目录和文件全部删除\nrm -rf /*     【自杀命令！慎用！慎用！慎用！】将根目录下的所有文件全部删除\n\n```\n\n注意：rm不仅可以删除目录，也可以删除其他文件或压缩包，为了方便大家的记忆，无论删除任何目录或文件，都直接使用 `rm -rf 目录/文件/压缩包`\n\n##### 目录修改【改】mv 和 cp\n\n1. 重命名目录\n\n   ```shell\n   命令：mv 当前目录  新目录\n   mv aaa bbb      将目录aaa改为bbb\n   ```\n\n   注意：mv的语法不仅可以对目录进行重命名而且也可以对各种文件，压缩包等进行   重命名的操作\n\n2. 剪切目录\n\n   ```shell\n   命令：mv 目录名称 目录的新位置\n   mv /usr/tmp/aaa /usr       将/usr/tmp目录下的aaa目录剪切到 /usr目录下面     \n   ```\n\n   注意：mv语法不仅可以对目录进行剪切操作，对文件和压缩包等都可执行剪切操作\n\n3. 拷贝目录\n\n   ```shell\n   命令：cp -r 目录名称 目录拷贝的目标位置   -r代表递归\n   cp /usr/tmp/aaa  /usr      将/usr/tmp目录下的aaa目录复制到 /usr目录下面\n   ```\n\n   注意：cp命令不仅可以拷贝目录还可以拷贝文件，压缩包等，拷贝文件和压缩包时不用写-r递归\n\n##### 搜索目录【查】 find\n\n```shell\n命令：find 目录 参数 文件名称\nfind /usr/tmp -name 'a*'    查找/usr/tmp目录下的所有以a开头的目录或文件\n```\n\n### 文件操作命令\n\n#### 文件操作【增、删、改、查】\n\n##### 新建文件【增】 touch\n\n```shell\n命令：touch 文件名\ntouch  aa.txt                在当前目录创建一个名为aa.txt的文件\n```\n\n##### 删除文件【删】 rm\n\n```shell\nrm -rf 文件名\n```\n\n##### 修改文件【改】 vi或vim\n\n**vi编辑器的3种模式**\n\n基本上[vi](http://www.garfielder.com/post/32630e53.html)可以分为三种状态，分别是命令模式（command mode）、插入模式（Insert mode）和底行模式（last line mode），各模式的功能区分如下：\n\n1. 命令行模式（command mode）\n\n   控制屏幕光标的移动，字符、字或行的删除，查找，移动复制某区段及进入Insert mode下，或者到 last line mode。\n\n   命令行模式下的常用命令：\n\n   * 控制光标移动：↑，↓，j\n   * 删除当前行：dd \n   * 查找：/字符\n   * 进入编辑模式：i o a\n   * 进入底行模式：:\n\n2. 编辑模式（Insert mode）\n\n   只有在Insert mode下，才可以做文字输入，按`ESC`键可回到命令行模式。\n\n   编辑模式下常用命令：\n\n   * `ESC`退出编辑模式到命令行模式；\n\n3. 底行模式（last line mode）\n\n   将文件保存或退出vi，也可以设置编辑环境，如寻找字符串、列出行号……等。\n\n   底行模式下常用命令：\n\n   * 退出编辑：  :q\n   * 强制退出：  :q!\n   * 保存并退出：  :wq\n\n**编辑文件**\n\n使用vi编辑器打开文件后点击按键：i，a或者o即可进入编辑模式。\n\ni:在光标所在字符前开始插入\na:在光标所在字符后开始插入\no:在光标所在行的下面另起一新行插入\n\n**保存或者取消编辑**\n\n保存文件：\n\n第一步：`ESC ` 进入命令行模式\n第二步：`:` 进入底行模式\n第三步：`wq`  保存并退出编辑\n\n取消编辑：\n\n第一步：`ESC` 进入命令行模式\n第二步：`:` 进入底行模式\n第三步：`q!`  撤销本次修改并退出编辑\n\n##### 文件的查看【查】\n\n文件查看命令：`cat`/`more`/`less`/`tail`\n\n**cat：看最后一屏**\n\n```shell\n示例：使用cat查看/etc/sudo.conf文件，只能显示最后一屏内容\ncat sudo.conf\n```\n\n**more：百分比显示**\n\n```shell\n示例：使用more查看/etc/sudo.conf文件，可以显示百分比，回车可以向下一行，空格可以向下一页，q可以退出查看\nmore sudo.conf\n```\n\n**less：翻页查看**\n\n```shell\n示例：使用less查看/etc/sudo.conf文件，可以使用键盘上的PgUp和PgDn向上    和向下翻页，q结束查看\nless sudo.conf\n```\n\n**tail：指定行数或动态查看**\n\n```shell\n示例：使用tail -10 查看/etc/sudo.conf文件的后10行，Ctrl+C结束  \ntail -10 sudo.conf\n```\n\n#### 权限修改\n\nrwx：r代表可读，w代表可写，x代表该文件是一个可执行文件，如果rwx任意位置变为-则代表不可读或不可写或不可执行文件。\n\n示例：给aaa.txt文件权限改为可执行文件权限，aaa.txt文件的权限是-rw-------\n\n第一位：-就代表是文件，d代表是文件夹\n第一段（3位）：代表拥有者的权限\n第二段（3位）：代表拥有者所在的组，组员的权限\n第三段（最后3位）：代表的是其他用户的权限\n\n```shell\nchmod +x aaa.txt\n或者采用8421法\nchmod 100 aaa.txt\n```\n\n### 压缩文件操作\n\n#### 打包和压缩\n\nWindows的压缩文件的扩展名  .zip/.rar\nLinux中的打包文件：aa.tar\nLinux中的压缩文件：bb.gz\nLinux中打包并压缩的文件：.tar.gz\n\nLinux中的打包文件一般是以.tar结尾的，压缩的命令一般是以.gz结尾的。\n而一般情况下打包和压缩是一起进行的，打包并压缩后的文件的后缀名一般.tar.gz。\n\n命令：tar -zcvf 打包压缩后的文件名 要打包的文件\n其中：\n\n* z：调用gzip压缩命令进行压缩\n\n* c：打包文件\n* v：显示运行过程\n* f：指定文件名\n\n```shell\n示例：打包并压缩/usr/tmp 下的所有文件 压缩后的压缩包指定名称为xxx.tar\ntar -zcvf ab.tar aa.txt bb.txt \ntar -zcvf ab.tar  *\n```\n\n#### 解压\n\n命令：tar [-zxvf] 压缩文件，其中x代表解压\n\n```shell\n示例：将/usr/tmp 下的ab.tar解压到当前目录下\ntar -zxvf ab.tar\n示例：将/usr/tmp 下的ab.tar解压到根目录/usr下\ntar -xvf ab.tar -C /usr         C代表指定解压的位置\n```\n\n### 查找命令\n\n#### grep\n\ngrep命令是一种强大的文本搜索工具\n\n使用实例：\n\n```shell\nps -ef | grep sshd  查找指定ssh服务进程 \nps -ef | grep sshd | grep -v grep 查找指定服务进程，排除gerp身 \nps -ef | grep sshd -c 查找指定进程个数 \n```\n\n#### find\n\nfind命令在目录结构中搜索文件，并对搜索结果执行指定的操作。 \n\nfind 默认搜索当前目录及其子目录，并且不过滤任何结果（也就是返回所有文件），将它们全都显示在屏幕上。 \n\n使用实例：\n\n```shell\nfind . -name \"*.log\" -ls        在当前目录查找以.log结尾的文件，并显示详细信息。 \nfind /root/ -perm 600           查找/root/目录下权限为600的文件 \nfind . -type f -name \"*.log\"    查找当目录，以.log结尾的普通文件 \nfind . -type d | sort           查找当前所有目录并排序 \nfind . -size +100M              查找当前目录大于100M的文件\n```\n\n#### locate\n\nlocate 让使用者可以很快速的搜寻某个路径。默认每天自动更新一次，所以使用locate 命令查不到最新变动过的文件。为了避免这种情况，可以在使用locate之前，先使用updatedb命令，手动更新数据库。\n\n使用实例：\n\n```shell\nupdatedb\nlocate /etc/sh         搜索etc目录下所有以sh开头的文件 \nlocate pwd             查找和pwd相关的所有文件\n```\n\n#### whereis\n\nwhereis命令是定位可执行文件、源代码文件、帮助文件在文件系统中的位置。这些文件的属性应属于原始代码，二进制文件，或是帮助文件。\n\n使用实例：\n\n```shell\nwhereis ls        将和ls文件相关的文件都查找出来\n```\n\n#### which\n\nwhich命令的作用是在PATH变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果。\n\n使用实例：\n\n```shell\nwhich pwd        查找pwd命令所在路径 \nwhich java       查找path中java的路径 \n```\n\n### su、sudo\n\n#### su\n\nsu用于用户之间的切换。但是切换前的用户依然保持登录状态。如果是root 向普通或虚拟用户切换不需要密码，反之普通用户切换到其它任何用户都需要密码验证。\n\n```shell\nsu test :              切换到test用户，但是路径还是/root目录\nsu - test :            切换到test用户，路径变成了/home/test\nsu :                   切换到root用户，但是路径还是原来的路径\nsu - :                 切换到root用户，并且路径是/root\n```\n\nsu不足：如果某个用户需要使用root权限、则必须要把root密码告诉此用户。\n\n退出返回之前的用户：exit\n\n#### sudo\n\nsudo是为所有想使用root权限的普通用户设计的。可以让普通用户具有临时使用root权限的权利。只需输入自己账户的密码即可。\n\n### 系统服务\n\n```shell\nservice iptables status              查看iptables服务的状态\nservice iptables start               开启iptables服务\nservice iptables stop                停止iptables服务\nservice iptables restart             重启iptables服务\n \nchkconfig iptables off               关闭iptables服务的开机自启动\nchkconfig iptables on                开启iptables服务的开机自启动\n```\n\n### 其他命令\n\n```shell\npwd                                  查看当前目录路径\nps -ef                               查看所有正在运行的进程\nkill pid                             杀死进程(pid：进程号)\nchkconfig iptables off               关闭防火墙\n```\n\n","tags":["Linux"],"categories":["Linux"]},{"title":"CentOS在VMWare上的安装简易教程","url":"/post/833438b6.html","content":"\n\n\n让我们直接开始\n\n### CentOS镜像下载\n\n这是[下载地址](https://www.centos.org/download/)\n\n进入后有多个版本可供选择：\n\n1. DVD ISO：标准安装版，一般下载此版本即可；\n2. Everything ISO：对完整版安装盘的软件进行补充，集成所有软件；\n3. Minimal ISO：一个非常基本的CentOS 系统，只需要最少的软件包即可拥有一个功能系统；\n4. LiveGNOME ISO：GNOME桌面版；\n5. LiveKde ISO：KDE桌面版；\n6. NetInstall ISO：网络安装镜像。\n\n本教程选择的版本为：**CentOS-7-x86_64-DVD-2003.iso**\n\n### 创建虚拟机\n\n![创建虚拟机](https://i.loli.net/2021/03/17/prkzBywqx7cFCYa.jpg)\n\n选择自定义配置，点击下一步\n\n![自定义配置](https://i.loli.net/2021/03/17/efn3OiTVvQcqxKy.jpg)\n\n这里直接默认下一步\n\n![虚拟机向导](https://i.loli.net/2021/03/17/luj6b5UDMg4PpSN.jpg)\n\n选择稍后安装操作系统，点击下一步\n\n![虚拟机向导](https://i.loli.net/2021/03/17/IiNwjk2a5GqeCpd.jpg)\n\n客户机操作系统选择Linux，版本选择CentOS 7 64位，点击下一步\n\n![选择操作系统](https://i.loli.net/2021/03/17/GR3f1HkVbT8txla.jpg)\n\n虚拟机名称可以自定义，这里建议以见名知意为原则，位置尽量放在C盘外的其他盘符\n\n![储存路径](https://i.loli.net/2021/03/17/I2MZp58T7HxbJOo.jpg)\n\n处理器数量和每个处理器的内核数可根据自己电脑配置进行选择，这里默认都选择1\n\n![处理器数量](https://i.loli.net/2021/03/17/hqfS3luXZtW69BO.jpg)\n\n同样的，虚拟机内存也依据自己电脑配置进行选择\n\n![内存](https://i.loli.net/2021/03/17/XfyKGOFiuRmWUpn.jpg)\n\n网络连接选择NAT\n\n![网络](https://i.loli.net/2021/03/17/untbRAsePxFOdgE.jpg)\n\n后两项默认推荐，点击下一步\n\n![IO类型](https://i.loli.net/2021/03/17/JwoMtIy4aOjV6Fp.jpg)\n\n![磁盘类型](https://i.loli.net/2021/03/17/9C4uyHGOwYDVZiA.jpg)\n\n点击创建新虚拟磁盘\n\n![虚拟磁盘](https://i.loli.net/2021/03/17/HfVTxlOQRX7hrEL.jpg)\n\n最大磁盘大小按需分配，选择将虚拟磁盘拆分成多个文件\n\n![磁盘容量](https://i.loli.net/2021/03/17/xHYAvJoaNbQtTj6.jpg)\n\n默认点击下一步\n\n![磁盘文件](https://i.loli.net/2021/03/17/bvpDRd8lfoPSkyg.jpg)\n\n可以看到CentOS已经添加进去了\n\n![启动](https://i.loli.net/2021/03/17/6R4rX1DK8jgsJpM.jpg)\n\n点击 CD/DVD，使用ISO映像文件，选择之前下载的文件即可\n\n![选择ISO文件](https://i.loli.net/2021/03/17/JpBqb4kzUVPFit7.jpg)\n\n开启虚拟机，见到如下界面，选择Install CentOS 7，直接Enter\n\n![启动界面](https://i.loli.net/2021/03/17/SwYUIVvex18BlzN.jpg)\n\n滚动右侧滚动条选择中文->简体中文，也可以选择你喜欢的语言\n\n![语言](https://i.loli.net/2021/03/17/xhu2LNaVe4BR3MS.jpg)\n\n接下来配置一些基本信息\n\n1. 点击安装源，进入之后直接选择done，警告符号随即消失\n2. 软件选择：GNOME桌面，一个友好的图形化界面\n3. 根据需要禁用Kdump\n4. 自动分区，一般划分四个分区，如图所示\n5. 点击网路和主机名，连接以太网\n6. 点击开始安装\n\n![设置](https://i.loli.net/2021/03/17/5upHzYVUIROnTkK.jpg)\n\n安装过程中会弹出用户设置页面，填好并记住密码\n\n![密码](https://i.loli.net/2021/03/17/DYMWvfROIG4zn6q.jpg)\n\n![密码确认](https://i.loli.net/2021/03/17/U1NrLJH5ytjbhEs.jpg)\n\n安装完成后点击重启，看到如下界面\n\n![许可](https://i.loli.net/2021/03/17/gdQiResHYrPFhJx.jpg)\n\n点击接受许可\n\n![完成配置](https://i.loli.net/2021/03/17/zXikvJRcayd4w8N.jpg)\n\n点击完成配置，现在，可以使用之前创建的用户进行登录了\n\n![登录](https://i.loli.net/2021/03/17/jgVcPL1hMFzbHxi.jpg)\n\n下图是登录成功后的图形化界面\n\n![界面](https://i.loli.net/2021/03/17/GPU5CHgst3YuNVh.jpg)\n\n至此，CenoOS在VMWare上的安装教程到此结束。\n\n附：[VMware激活密钥](http://www.mlwei.com/2328.html)\n\n","tags":["Linux","CentOS","VMWare"],"categories":["Linux"]},{"title":"Linux基础知识","url":"/post/df41aea9.html","content":"\n\n\n## Linux基础教程\n\n### 一、常用命令使用\n\n#### 1.1 常用命令使用\n\n##### 1.1.1 登录和退出Linux系统\n\n**1. 启动和登陆系统**\n\n超级用户的用户名为root，密码在安装系统时已设定，系统启动成功后屏幕显示下面的提示：\n\n```shell\nlocalhost login:\n```\n\n这时输入超级用户名”root“，然后键入回车键，此时用户会在屏幕上看到输入口令的提示：\n\n```shell\nlocalhost login:root\nPassword:\n```\n\n这时需要输入口令，输入口令时，口令不会在屏幕上显示出来，如果用户输入了错误的口令，就会在屏幕上看到下列信息：\n\n```shell\nlogin incorrect.\n```\n\n这时需要重新输入，当用户正确地输入用户名和口令后，就能合法地进入系统，屏幕显示 。\n\n```shell\n[root@localhost/root] #\n```\n\n此时说明用户已经登录到系统中，可以进行操作了，这里\"#\"是超级用户的系统提示符，普通用户在建立了普通用户帐号以后就可以进行登录了 。\n\n**2. 重新启动系统**\n\n以root用户登录Linux操作系统后执行reboot命令可以重新启动linux系统。\n\n```shell\n[root@localhost/root] # reboot\n```\n\n**3. 关闭系统**\n\nshutdown 命令可以安全地关闭或重启 Linux 系统，它在系统关闭之前给系统上的所有登录用户提示一条警告信息 ，该命令还允许用户指定一个时间参数可以是一个精确的时间，也可以是从现在开始的一个时间段，精确时间的格式是 hh:mm 表示小时和分钟，时间段由 + 和分钟数表示，系统执行该命令后会自动进行数据同步的工作，该命令的一般格式 ：\n\nshutdown [选项] [时间] [警告信息]\n\n命令中各选项的含义为：\n\n-k 并不真正关机而只是发出警告信息给所有用户\n\n-r 关机后立即重新启动\n\n-h 关机后不重新启动\n\n-f 快速关机重启动时跳过 fsck\n\n-n 快速关机不经过 init 程序\n\n-c 取消一个已经运行的 shutdown \n\n例 1 ：系统在十分钟后关机并且马上重新启动。\n\n```shell\n# shutdown -r +10\n```\n\n例 2 ：系统马上关机并且不重新启动。\n\n```shell\n# shutdown -h now\n```\n\n##### 1.1.2 文件和目录操作命令\n\n**1. ls命令**\n\n这个命令就相当于 dos 下的 dir 命令一样，也是 Linux 控制台命令中最为重要几个命令之一。ls 最常用的参数有三个：-a、-l 和 –F 。\n\n```shell\nls -a\n```\n\nLinux 系统上的文件以.开头的文件被系统视为隐藏文件，仅用 ls 命令是看不到他们的，而用 ls –a 除了显示一般文件名外，连隐藏文件也会显示出来。\n\n```shell\nls -l\n```\n\n这个命令可以使用长格式显示文件内容。如果需要察看更详细的文件资料就要用到 ls -l 这个指令 。\n\n```shell\nls -F\n```\n\n在列出的文件（目录）名称后加一符号，例如可执行文件加 \"*\"，目录则加 \"/\"。\n\n**2. cd命令**\n\ncd 这个命令是用来进出目录的，它的使用方法和在 dos 下没什么两样，但和dos 不同的是 Linux 的目录对大小写是敏感的，如果大小写拼写有误，你的 cd操作是成功不了的。另外，cd 如果直接输入，cd 后面不加任何东西会回到使用者自己的 Home 目录。假设如果是 root 那就是回到/root，这个功能同 cd ~是一样的 。\n\n**3. mkdir、rmdir**\n\nmkdir命令用来建立新的目录，如输入如下命令：\n\n```shell\nmkdir work\n```\n\n将在当前目录下新建一个work目录。\n\nrmdir用来删除已建立的目录，如输入如下命令：\n\n```shell\nrmdir work\n```\n\n将删除已存在的空目录work。\n\n**4. cp**\n\ncp 这个命令相当于 dos 下面的 copy 命令，具体用法是：\n\ncp –r 源文件(source) 目的文件(target)\n\n参数 r 是指连同源文件中的子目录一同拷贝。\n\n**5. rm**\n\nrm 这个命令是用来删除文件的，rm 命令常用的参数有三个-i、-r、-f\n比如我现在要删除一个名字为 text 的一个文件，输入如下命令：\n\n```shell\nrm -i test\n```\n\n系统会询问我们是否要删除 test 文件，敲了 “y/n” 确认是否要删除 test 文件。\n\nrm – r 目录名：这个操作可以连同这个目录下面的子目录都删除，功能比上面讲到的 rmdir 更强大，不仅可能删除指定的目录，而且可以删除该目录下所有文件和子目录 。\n\nrm – f 文件名：这个操作可以不经确认强制删除文件。\n\n**6. mv**\n\nmv 这个命令的功能是移动目录或文件，引申的功能是给目录或文件重命名，比如：\n\n```shell\nmv /tmp/xxx.tar /root\n```\n\n该命令将/tmp 目录下的 xxx.tar 文件移动到/root 目录下。\n\n而：\n\n```shell\nmv aaa.tar bbb.tar\n```\n\n则是将当前目录下的文件 aaa.tar 更名为 bbb.tar 。\n\n**7. cat**\n\ncat 这个命令是 linux 中非常重要的一个命令，它的功能是显示或连结一般的ascii 文本文件。它的用法如下 ：\n\n```shell\ncat text\n```\n\n该命令显示 text 这个文件的内容 。\n\n```shell\ncat file1 file2\n```\n\n该命令依顺序显示 file1,file2 的内容 。\n\n```shell\ncat file1 file2>file3\n```\n\n该命令把 file1，file2 的内容结合起来再重定向>到 file3 文件中 。\n\n**8. more**\n\nmore 是显示一般文本文件的指令，如果一个文本文件太长了超过一个屏幕的画面，用 cat 来看实在是不理想，就可以试试 more。用法如下 ：\n\n```shell\nmore file1\n```\n\n**9. pwd**\n\npwd 这个命令的作用是显示用户当前的工作路径，直接输入 pwd 即可 。\n\n##### 1.1.3 用户及用户组管理命令\n\n**1. useradd**\n\nuseradd 命令可以创建一个新的用户帐号，其最基本用法为 ：\n\nuseradd  用户名\n\n如输入以下命令：\n\n```shell\nuseradd newuser\n```\n\n系统将创建一个新用户，newuser 该用户的 Home 目录为/home/newuser \n\nuseradd 命令的参数较多，常用的组合为 ：\n\nuseradd 用户名 -g 组名 –G 组名 -d Home 目录名 -p 密码 \n\n其中：\n\n-g 指定该用户的首要组\n\n-G 指定该用户的次要组\n\n-d 指定该用户的 Home 目录\n\n-p 指定该用户的密码 \n\n如输入以下命令：\n\n```shell\nuseradd oracle –g oinstall –G dba –d /home/oracle –p ora123\n```\n\n系统将创建一个用户 oracle，oracle 用户的首要组为 oinstall，次要组为 dba，Home 目录为/home/oracle，密码为 ora123。\n\n**2. userdel**\n\nuserdel 命令用于删除一个已存在的帐号，其用法为 ：\n\nuserdel  用户名\n\n**3. groupadd**\n\ngroupadd 命令可以创建一个新的用户组，其最基本用法为 ：\n\ngroupadd  组名\n\n如输入以下命令：\n\n```shell\ngroupadd newgroup\n```\n\n系统将创建一个新的用户组 newgroup 。\n\n**4. groupdel**\n\ngroupdel 命令用于删除一个已存在的用户组，其用法为 ：\n\ngroupdel  组名\n\n**5. passwd**\n\n出于系统安全考虑，Linux 系统中的每一个用户除了有其用户名外还有其对应的用户口令，用户可以随时用 passwd 命令改变自己的口令。该命令的一般格式为 ：\n\n```shell\npasswd\n```\n\n输入该命令后，按系统提示依次输入密码和密码确认后，即可完成用户密码的修改 。\n\n此外，超级用户还可以修改其他用户的口令，命令如下 ：\n\npasswd  用户名\n\n**6. su**\n\nsu 命令这个命令非常重要，它可以让一个普通用户拥有超级用户或其他用户的权限，也可以让超级用户以普通用户的身份做一些事情。普通用户使用这个命令时必须有超级用户或其他用户的口令。如要离开当前用户的身份，可以键入 exit 命令。su 命令的一般形式为：\n\nsu -用户名\n\n**7. chmod**\n\nchmod 命令是非常重要的，用于改变文件或目录的访问权限。该命令有两种用法：一种是包含字母和操作符表达式的文字设定法，另一种是包含数字的数字设定法 。\n\n由于数字设定法不太直观，本文不做介绍，文字设定法的用法如下 ：\n\nchmod [who] [+ | - | =] [mode] 文件名 \n\n命令中各选项的含义为 ：\n\n1. 操作对象 who 可以是下述字母中的任一个或者它们的组合 ：\n\n   u 表示用户(user) ，即文件或目录的所有者 \n\n   g 表示同组(group)用户 ，即与文件属主有相同组 ID 的所有用户 \n\n   o 表示其他(others)用户 \n\n   a 表示所有(all)用户，它是系统默认值 \n\n2. 操作符号可以是：\n\n   +添加某个权限\n\n   -取消某个权限\n\n   =赋予给定权限，并取消其他所有权限\n\n3. mode 表示权限，常用的参数有 ：\n\n   r 可读\n\n   w 可写\n\n   x 可执行\n\n举例：\n\n1. 将文件 script 的权限设为可执行。命令如下 ：\n\n   ```shell\n   chmod =rx text\n   ```\n\n   执行成功后，用 ls -l script 命令查看文件属性的结果如下 ：\n\n   -r-xr-xr-x   1  user  group  0 Feb 10 09:42 script\n\n2. 将文件 text 的权限设为：文件属主可读、可写、可执行，与文件属主同组的用户可读，其他用户不可读。命令如下 ：\n\n   ```shell\n   chmod u=rwx,g=r,o= text\n   ```\n\n   执行成功后，用 ls –l text 命令查看文件属性的结果如下 ：\n\n   -rwxr-----   1  user  group  0 Feb 10 09:42 text\n\n**8. chown**\n\nchown 用于更改某个文件或目录的属主和属组，这个命令也很常用。例如root 用户把自己的一个文件拷贝给用户 oracle，为了让用户 oracle 能够存取这个文件，root 用户应该把这个文件的属主设为 oracle，否则用户 oracle无法存取这个文件。chown 的基本用法为 ：\n\nchown [用户:组] 文件 \n\n举例：\n\n```shell\nchown oracle:dba text\n```\n\n该命令将 text 文件的属主和属组分别改为 oracle 和 dba 。\n\n##### 1.1.4 进程及任务管理命令\n\nLinux 系统上所有运行的东西都可以称之为一个进程。每个用户任务、每个系统管理守护进程都可以称之为进程。Linux 用分时管理方法使所有的任务共同分享系统资源。以下将介绍一些常用的查看和控制进程的命令。\n\n**1. ps**\n\nps 命令是最基本同时也是非常强大的进程查看命令。使用该命令可以查看有哪些进程正在运行以及运行的状态，进程是否结束，进程有没有僵死，哪些进程占用了过多的资源等等 。\n\n该命令的基本用法如下：\n\nps [选项] \n\n其中常用的选项有：\n\n-e 显示所有进程 \n\n-f 全格式 \n\n-l 长格式 \n\n**2. top**\n\ntop 命令和 ps 命令的基本作用是相同的，显示系统当前的进程和其他状况。但是 top 是一个动态显示过程，即可以通过用户按交互来不断刷新当前状态。top 的命令参数并不重要，简单的输入 top 命令即可查看系统运行状态。\n\ntop 命令执行过程中可以使用交互命令。从使用角度来看，熟练的掌握这些命令比掌握选项还重要一些。这些命令都是单字母的，常用的命令有 ：\n\n<空格> 立即刷新显示\n\nh 或者? 显示帮助画面给出一些简短的命令总结说明\n\nm 切换显示内存信息\n\nt 切换显示进程和 CPU状态信息\n\nc 切换显示命令名称和完整命令行\n\nM 根据驻留内存大小进行排序\n\nP 根据 CPU使用百分比大小进行排序\n\nq 退出 \n\n**3. kill**\n\nkill 命令可以用于终止后台进程。kill 命令是通过向进程发送指定的信号来结束进程的。kill 命令的语法格式很简单，大致有以下两种方式 ：\n\n1. kill [-s 信号] 进程号 \n\n   其中，发出的信号既可以是信号名也可以对应数字 。\n\n   如 kill -9 1234 命令，将终止 PID(进程号)为 1234 的进程 。\n\n2. kill -l \n\n   该命令显示信号列表 \n\n**4. cron**\n\ncron 命令用来实现定时任务的完成，如每日执行一次的任务（进程）。cron 命令是不应该手工启动的。一般情况下，cron 命令在系统启动时就由一个 shell 脚本自动启动。启动后，cron 命令会搜索/var/spool/cron 目录，寻找以/etc/passwd 文件中的用户名命名的 crontab 文件，被找到的这种文件将载入内存。例如一个用户名为 user 的用户它所对应的 crontab 文件就应该是/var/spool/cron/user。也就是说，以该用户命名的 crontab文件存放在/var/spool/cron 目录下面。cron 命令还将搜索/etc/crontab 文件，这个文件是用不同的格式写成的。cron 启动以后它将首先检查是否有用户设置了 crontab文件，如果没有就转入休眠状态，释放系统资源。它每分钟醒过来一次查看当前是否有需要运行的命令 。\n\n可以使用 crontab –l 命令查看目前已经存在的 cron 任务 。\n\n##### 1.1.5 磁盘及文件系统管理命令\n\n管理文件系统其实是相当复杂的工作，本文将只介绍日常维护需要的一些管理命令，主要内容有：挂装和卸载硬盘分区等 。\n\n**1. df**\n\ndf命令可以显示目前磁盘剩余的磁盘空间，常用的参数为-k，如：\n\n```shell\ndf -k\n```\n\n该语句将显示各分区的磁盘空间使用情况 。\n\n**2. mount和umount**\n\nmount 命令有很多参数，其中大多数都不会在日常工作中用到。mount 命令最常见的用法如下所示 ：\n\nmount [选项] 设备 目录 \n\n其中 最常用的选项是 ：\n\n-a 把/etc/fstab 文件中列出的文件系统都挂装上。\n\n挂装软驱和光驱的命令比较简单，直接输入以下命令即可 ：\n\n```shell\nmount /mnt/cdrom\nmount /mnt/floppy\n```\n\numount 命令用于卸载一个文件系统，命令的格式如下：\n\numount [ -f ] directory\n\n其中，directory 是准备卸载的目录名。\n\numount 命令有一个不足之处：如果文件系统正在使用中（也就是说有人在那个分区上打开了文件），就无法把这个文件系统卸载下来，这时可以使用和-f参数强制执行卸载操作，当然，这种操作可能会造成用户数据的丢失。如： \n\n```shell\numount -f /mnt/cdrom\n```\n\n该命令将强制卸载挂装在/mnt/cdrom 目录下的文件系统 。\n\n##### 1.1.6 软件安装命令\n\n**1. tar**\n\ntar 命令用于把多个文件合并于一个档案文件中，并提供分解的合并后的档案文件的功能。它独立于压缩工具，因此可以选择在合并前是否压缩。tar 命令的基本用法为 ：\n\ntar [选项] 文件名\n\n常用的选项包括：\n\n-c 创建一个新的档案文件\n\n-t 查看档案文件的内容\n\n-x 分解档案文件的内容\n\n-f 指定档案文件的名称\n\n-v 显示过程信息\n\n-z 采用压缩方式 \n\n举例：\n\n1. tar -czf oracle.tar.gz /u01/app/oracle /etc/oratab /home/oracle \n\n   该命令将/u01/app/oracle 目录下的所有文件、 /etc/oratab 文件和/home/oracle 目录下的所有文件合并到 oracle.tar 文件中，并采用压缩方式 。\n\n2. tar -tzf oracle.tar.gz \n\n   该命令列出归档文件 oracle.tar 中的所有文件列表 。\n\n3. tar –xzvf oracle.tar.gz \n\n   该命令将归档文件分解并解压缩到原有文件的路径中 。\n\n**2. rpm**\n\nrpm 命令的功能有很多，在这里我们只介绍如何利用 rpm 安装和查询已安装的软件 。\n\n1. 安装\n\n   rpm 安装软件包的基本语法如下 ：\n\n   rpm -i rpm 包名 \n\n   例如：\n\n   ```shell\n   rpm -i tomcat4.rpm\n   ```\n\n   该命令将安装 Tomcat 软件并进行相关系统配置 。\n\n2. 升级\n\n   rpm 升级软件包的基本语法如下 ：\n\n   rpm -U rpm 包名 \n\n   例如：\n\n   ```shell\n   rpm -U tomcat4.rpm\n   ```\n\n   该命令将升级 Tomcat 软件并进行相关系统配置 。\n\n3. 查看已安装的软件\n\n   有的时候，了解系统中都已经安装了哪些软件包以及它们的用途是很有用的，RPM 的查询参数就可以做到这一点 。\n\n   要想列出已经安装的全部软件包，可以通过以下命令 ：\n\n   ```shell\n   rpm -qa\n   ```\n\n   可以使用 grep 命令指定软件包的名称（或者部分名称），如下所示：\n\n   ```shell\n   rpm -qa | grep 'tomcat'\n   ```\n\n   该命令将列出包名中包含 tomcat 的软件包 。\n\n   此外：要想找出某个特定的文件到底是属于哪个软件包的，可以输入 ：\n\n   ```shell\n   rpm -qf filename\n   ```\n\n   其中 filename 是准备要查找其归属的文件名称 。\n\n   要想查出某个已经安装的软件包的功能，可以用如下命令 ：\n\n   ```shell\n   rpm -qi packagename\n   ```\n\n   其中，packagename 是要查找其用途的软件包名称 。\n\n4. 删除已安装的软件\n\n   使用 RPM 删除软件包就像安装它们一样简单。大多数情况下，用户只需要输入命令 ：\n\n   ```shell\n   rpm -e packagename\n   ```\n\n   其中，packagename是要查删除的软件包名称。\n\n### 二、文件查看/编辑方法介绍\n\n#### 2.1 cat命令介绍\n\ncat 命令的原含义为连接 （concatenate）， 用于连接多个文件内容并输出到标准输出流中（标准输出流默认为屏幕）。实际运用过程中，我们常使用它来显示文件内容。如果您熟悉 MS-DOS 下的 type 命令，相信不难掌握 cat 命令。该命令的常用示例如下 ：\n\ncat file1.txt                              显示 file1.txt 文件的内容 ；\n\ncat file1.txt file2.txt               显示 file1.txt 和 file2.txt 文件的内容 ；\n\ncat -n file1.txt                         显示 file1.txt 文件的内容 同时显示行号 ；\n\n#### 2.2 vi命令\n\nvi 是 “Visual Interface” 的简称，它在 Linux 上的地位就仿佛 Edit 程序在 DOS上一样。它可以执行输出、删除、查找、替换、块操作等众多文本操作，而且用户可以根据自己的需要对其进行定制，这是其他编辑程序所没有的。\n\nvi 不是一个排版程序，它不像 Word 或 WPS 那样可以对字体、格式、段落等其他属性进行编排，它只是一个文本编辑程序。\n\nvi 没有菜单，只有命令，且命令繁多，限于篇幅，本文只介绍常用的命令。\n\nvi 有三种基本工作模式：命令行模式，文本输入模式和末行模式 。\n\n命令行模式：\n\n任何时候 不管用户处于何种模式，只要按一下“ESC”键，即可使 vi 进入命令行模式；当在 shell 环境下输入 vi 命令启动 vi 编辑器时，也是处于该模式下 。\n\n在该模式下，用户可以输入各种合法的 vi 命令，用于管理自己的文档。此时从键盘上输入的任何字符都被当作编辑命令来解释，若输入的字符是合法的 vi 命令，则 vi 在接受用户命令之后完成相应的动作（但需注意的是，所输入的命令并不在屏幕上显示出来）。若输入的字符不是 vi 的合法命令，vi 会响铃报警 。\n\n文本输入模式：\n\n在命令模式下输入插入命令 i、附加命令 a、打开命令 o、修改命令 c、取代命令 r 或替换命令 s 都可以进入文本输入模式。在该模式下，用户输入的任何字符都被 vi 当做文件内容保存起来，并将其显示在屏幕上。在文本输入过程中，若想回到命令模式下，按“ESC”键即可。\n\n末行模式：\n\n 在命令模式下用户按 “:” 键即可进入末行模式下，此时 Vi 会在显示窗口的最后一行（通常也是屏幕的最后一行）显示一个 “:” 作为末行模式的提示符，等待用户输入命令。多数文件管理命令都是在此模式下执行的（如把编辑缓冲区的内容写到文件中等）。末行命令执行完后，vi 自动回到命令模式。\n\n若在末行模式下输入命令过程中改变了主意，可按 “ESC” 键，或用退格键将输入的命令全部删除之后，再按一下退格键，即可使 vi 回到命令模式下 。\n\n##### 2.2.1 vi的进入与退出\n\n在 shell 模式下，键入 vi 及需要编辑的文件名，即可进入 vi。例如 ：\n\n```shell\nvi example.txt\n```\n\n即可编辑 example.txt 文件。如果该文件存在，则编辑界面中会显示该文件的内容，并将光标定位在文件的第一行；如果文件不存在，则编辑界面中无任何内容。如果需要在进入 vi 编辑界面后，将光标置于文件的第 n 行，则在 vi命令后面加上 “+n” 参数即可。例如需要从 example.txt 文件的第 5 行开始显示，则使用如下命令：\n\n```shell\nvi +5 example.txt\n```\n\n退出 vi 时，需要在末行模式中输入退出命令 “q”。如果在文本输入模式下，首先按 “ESC” 键进入命令模式，然后输入 “:” 进入末行模式。在末行模式下，可使用如下退出命令：\n\n:q -- 直接退出。如果在文本输入模式下修改了文档内容，则不能退出。\n\n:wq -- 保存后退出。\n\n:x -- 同“wq”。\n\n:q! -- 不保存内容，强制退出。\n\n##### 2.2.2 vi中显示行号\n\n在末行模式下，输入如下命令：\n\n```shell\nset number\n```\n\n可使 vi 在编辑界面中显示行号。\n\n此外，在末行模式下，可使用如下 “nu” 命令（number）的简写 来显示光标所在行的行号及该行的内容 。\n\n##### 2.2.3 光标移动操作\n\n全屏幕文本编辑器中，光标的移动操作无疑是最经常使用的操作了。用户只有熟练地使用移动光标的这些命令，才能迅速准确地到达所期望的位置处进行编辑。\n\nvi 中的光标移动既可以在命令模式下，也可以在文本输入模式下，但操作的方法不尽相同。\n\n在文本输入模式下，可直接使用键盘上的四个方向键移动光标；在命令模式下，有很多移动光标的方法。不但可以使用四个方向键来移动光标，还可以用 h、j、k、l 这四个键代替四个方向键来移动光标，这样可以避免由于不同机器上的不同键盘定义所带来的矛盾，而且使用熟练后可以手不离开字母键盘位置就能完成所有操作，从而提高工作效率。\n\n以下命令均在命令行模式下完成光标移动 ：\n\nh -- 光标左移，如果在按 h 命令前输入数字 n，则光标左移 n 个字符；\n\nl -- 光标右移，如果在按 l 命令前输入数字 n，则光标右移 n 个字符；\n\nj -- 光标上移，如果在按 j 命令前输入数字 n，则光标上移 n 个字符；\n\nk -- 光标下移，如果在按 k 命令前输入数字 n，则光标 xia 移 n 个字符；\n\n0 -- 零 光标移到行首；\n\n$ -- 光标移到行尾；\n\nH -- 光标移到屏幕上显示的第一行（并不一定是文件头）；\n\nL -- 光标移到屏幕上显示的最后一行（并不一定是文件尾）；\n\nM -- 光标移到屏幕的中间一行；\n\nnG -- 光标移到第 n 行；\n\nw或 W -- 将光标右移至下一个单词的词首；\n\ne 或 E -- 如果光标起始位置处于单词内（即非单词尾处），则该命令将把光标移到本单词词尾；如果光标起始位置处于单词尾，则该命令将把光标移动到下一个单词的词尾；\n\nb 或 B -- 如果光标处于所在单词内（即非单词首）则该命令将把光标移至本单词词首；如果光标处于所在单词的词首，则该命令将把光标移到上一个单词的词首；\n\nCtrl+G -- 状态命令，显示当前编辑文档的状态。包括正在编辑的文件名、是否修改过、当前行号、文件的行数以及光标之前的行占整个文件的百分比。此外，也可以通过以下末行模式下的命令完成光标在整个文件中的移动操作；\n\n:n -- 光标移到文件的第 n 行；\n\n:$ -- 光标移到文件的最后一行； \n\n##### 2.2.4 文本插入操作\n\n在命令模式下，用户输入的任何字符都被 vi 当作命令加以解释执行，如果用户要将输入的字符当作是文本内容时，则首先应将 vi 的工作模式从命令模式切换到文本输入模式。切换的方式是使用下面的命令：\n\n**1. 插入（Insert）命令**\n\nvi提供了两个插入命令：i和I。\n\n1. i 命令 -- 插入文本从光标所在位置前开始，并且插入过程中可以使用 Backspace 键删除错误的输入。此时 vi 处于插入状态 屏幕最下行显示 “--INSERT--” （插入）字样。\n2. I 命令 -- 该命令是将光标移到当前行的行首，然后在其前插入文本。\n\n**2. 附加（append）命令**\n\nvi提供了两个附加插入命令：a和A。\n\n1. a 命令 -- 该命令用于在光标当前所在位置之后追加新文本，新输入的文本放在光标之后，在光标后的原文本将相应地向后移动，光标可在一行的任何位置 。\n2. A 命令 -- 该命令与 a 命令不同的是，A 命令将把光标挪到所在行的行尾，从那里开始插入新文本。当输入 A 命令后，光标自动移到该行的行尾。\n\na和A命令是把文本插入到行尾的唯一方法。\n\n**3. 打开（open）命令**\n\n不论是 Insert 命令也好，还是 append 命令也好，所插入的内容都是从当前行中的某个位置开始的。若我们希望在某行之前或某行之后插入一些新行，则应使用 open 命令。\n\nvi提供了两个打开命令：o和O。\n\n1. o 命令 -- 该命令将在光标所在行的下面新开一行，并将光标置于该行的行首，等待输入文本。要注意当使用 Backspace 删除字符时只能删除从插入模式开始的位置以后的字符，对于以前的字符不起作用。\n2. O 命令 和 o 命令相反，O 命令是在光标所在行的上面插入一行，并将光标置于该行的行首，等待输入文本。\n\n##### 2.2.5 文本修改操作\n\n在命令模式下可以使用 vi 提供的各种有关命令对文本进行修改，包括对文本内容的删除、复制、取代和替换等。\n\n**1. 文本删除/移动**\n\n在编辑文本时，经常需要删除一些不需要的文本，我们可以用 Backspace 键将输错或不需要的文本删除，但此时有一个限制就是当删到行头之后，再想删上面那行的内容是不可能的。\n\n在命令模式下，vi 提供了许多删除命令。这些命令大多是以 d 开头的。常用的有 ：\n\n1. 删除单个字符\n\n   x -- 删除光标处的字符。若在 x 之前加上一个数字 n，则删除从光标所在位置开始向右的 n 个字符。\n\n   X -- 删除光标前面的那个字符。若在 X之前加上一个数字 n，则删除从光标前面那个字符开始向左的 n 个字符。\n\n   显然这两个命令是删除少量字符的快捷方法。\n\n2. 删除多个字符\n\n   dd -- 删除光标所在的整行。在dd钱可加上一个数字n，表示删除当前行及其后n-1行的内容。\n\n   D或d$ -- 两命令功能一样，都是删除从光标所在处开始到行尾的内容 。\n\n   d0 -- 删除从光标前一个字符开始到行首的内容 。\n\n   dw -- 删除一个单词。若光标处在某个词的中间，则从光标所在位置开始删至词尾。同 dd 命令一样，可在 dw 之前加一个数字 n。表示删除 n 个指定的单词。\n\n   如果用户不小心进行了误删除操作，也不要紧，vi 提供了恢复误操作的命令，并且可以将恢复的内容移动，放在文本的任何地方。恢复命令用 “np\"， 其中 n 为需要恢复的次数。例如使用 dd 命令删除了一行内容，然后使用 ”2p“命令，则被删除的内容会被重新插入两遍。\n\n   通过 dd 命令及 p 命令的结合使用，可以很方便的实现文本行的移动操作 。\n\n**2. 文本复制命令**\n\nyy -- 复制光标所在的整行。在yy前可加上一个数字n，表示复制当前行及其后n-1行的内容。\n\n文本行复制后，通过使用上面介绍的”p“命令，可以将文本行粘贴到任何地方。\n\ndd、yy及p命令在vi中的作用，类似于Windows中图形编辑程序的”剪切“、”复制“及”粘贴“命令。\n\n**3. 取消上一命令**\n\n取消上一命令（Undo），也称复原命令，是非常有用的命令，它可以取消前一次的误操作或不合适的操作对文件造成的影响，使之回复到这种误操作或不合适操作被执行之前的状态。\n\n 取消上一命令有两种形式，在命令模式下键入字符 u 和 U。它们的功能都是取消刚才输入的命令，恢复到原来的情况。小写 u 和大写 U 在具体细节上有所不同，二者的区别在于，大写 U命令的功能是恢复到误操作命令前的情况，即如果插入命令后使用 U 命令，就删除刚刚插入的内容；如果删除命令后使用 U 命令，就相当于在光标处又插入刚刚删除的内容。这里把所有修改文本的命令都视为插入命令。也就是说，U 命令只能取消前一步操作，如果用 U命令撤消了前一步操作，当再按 U 键时，并不是撤消再前一步的操作，而是撤消了刚才 U命令执行的操作，也就是又恢复到第一次使用 U 命令之前的状态，结果是什么都没做。而小写 u 命令的功能是把当前行恢复成被编辑前的状态，而不管此行被编辑了多少次。\n\n**4. 重复命令**\n\n 重复命令也是一个非常常用的命令。在文本编辑中经常会碰到需要机械地重复一些操作，这时就需要用到重复命令。它可以让用户方便地再执行一次前面刚完成的某个复杂的命令。\n\n重复命令只能在命令模式下工作，在该模式下按 ”.“  键既可。执行一个重复命令时，其结果是依赖于光标当前位置的。\n\n##### 2.2.6 文本搜索与替换操作\n\n在进行文本编辑的时候，您可以需要搜索或定位特定的单词或单词的一部分。vi 编辑器有向前或向后搜索指定模式的功能。\n\n”/“ 是 vi 编辑器的模式搜索命令。键入 ”/“ 后，屏幕的底部会出现一行，同时一个斜扛会出现在底行的行首上，且光标被放置在斜扛之后。此时，您可以在光标位置键入你需要搜索的模式。输入完成并按下 ENTER 键后，编辑器将开始从光标所在的位置起向文件尾部搜索你键入的模式。如果输入的模式被找到，光标将停留在找到的模式上。在找到一个匹配的模式后，如果您还需要搜索下一个匹配的模式。使用命令 “n” 即可；如果需要找到上一个匹配的模式，则使用 “N” 命令即可。\n\n此外，“?”  命令也是模式搜索命令。与 “/” 的区别在于： “/” 是从光标当前所在位置向文件尾部搜索，而 “?” 命令则是由光标当前所在位置向文件头部搜索。\n\n文本替换操作需要使用末行模式进行操作，即所有文本替换操作命令均以“：”开头。\n\n文本替换命令的格式为：\n\n:s/text1/text2 -- 用于将光标所在段落搜索到的第一个 “text1” 替换为 “text2”；\n\n:s/text1/text2/g -- 用于将光标所在段落的所有 “text1” 替换为 “text2”；\n\n:m,ns/text1/text2/g -- 用于将从 m 行开始至 n 行结束的所有搜索到的 “text1”替换为 “text2”。 其中可以使用$表示末行，即 “1,$” 表示替换文档中的所有符合条件的字符。\n\n#### 2.3 head及tail命令介绍\n\n当需要查看一个文本文件的头部或尾部时，head 命令及 tail 命令可以非常方便的完成该操作。head 命令用于查看一个文本文件的开头部分；而 tail 命令则用于显示文本文件的末尾几行。这两个命令举例如下：\n\nhead example.txt  显示文件 example.txt 的前十行内容 ；\n\nhead -n 20 example.txt  显示文件 example.txt 的前二十行内容 ；\n\ntail example.txt  显示文件 example.txt 的后十行内容 ；\n\ntail -n 20 example.txt  显示文件 example.txt 的后二十行内容 ；\n\ntail -f example.txt  显示文件 example.txt 的后十行内容，并在文件内容增加后，自动显示新增的文件内容。\n\n### 三、网络配置及操作\n\n#### 3.1 网络配置命令\n\nLinux 系统中最常用的网络配置命令包括 ifconfig、route，其中 ifconfig 用来查看和配置网络接口（通常是网卡）信息，包括网络接口设备的 IP 地址、掩码等；route 用来管理 Linux 系统内核中的路由表 它最大的用途就是用来设定静态的路由表项，通常是在系统用 ifconfig 配置网络接口后，用它来设定主机或者一网段的 IP 地址应该通过什么接口发送等。\n\n##### 3.1.1 ifconfig\n\nifconfig的语法为：\n\nifconfig [-a] [-V] [-s] interface [[AF] address] \n\n[[-]broadcast [address]] \n\n[netmask address] \n\n[up|down]\n\n其中 interface 为网卡名，address 为 IP 地址，broadcast 表示设置广播地址，其后的 address 为广播地址的 IP，netmask 表示设置子网掩码，其后的 address 为子网掩码的 IP。up、down 设置当前网卡的状态，up表示启用当前网卡 down 表示关闭当前网卡。\n\nifconfig的常用参数说明如下：\n\n-a 查看所有网卡状态\n\n-V 查看ifconfig命令的版本信息\n\n-s 查看统计信息\n\n示例：\n\n1. 将第一块网卡的IP设置为192.168.0.1；\n\n   ```shell\n   ifconfig eth0 192.168.0.1\n   ```\n\n2. 暂时关闭或启用网卡：\n\n   ```shell\n   关闭第一块网卡：ifconfig eht0 down\n   启用第一块网卡：ifconfig eth0 up\n   ```\n\n3. 将第一块网卡的子网掩码设置为255.255.255.0；\n\n   ```shell\n   ifconfig eth0 netmask 255.255.255.0\n   ```\n\n   我们也可以同时设置IP地址和子网掩码：\n\n   ```shell\n   ifconfig eth0 192.168.0.1 netmask 255.255.255.0\n   ```\n\n4. 查看第一块网卡的状态：\n\n   ```shell\n   ifconfig eth0\n   ```\n\n如果要查看所有的网卡状态，则直接使用不带参数的 ifconfig 命令即可。\n\nifconfig 输出的状态信息是十分有用的，下面我们就简单说明一下：\n\n有几个状态比较重要：\n\nUP/DOWN：网卡是否启动了，如果是 DOWN的话，那肯定无法用的；\n\nRX packets 中的 errors 包的数量如果过大说明网卡在接收时有问题；\n\nTX packets 中的 errors 包的数量如果过大说明网卡在发送时有问题；\n\n##### 3.1.2 route\n\nroute命令的语法为：\nroute [-CFvnee] \n\nroute [-v] [-A family] add [-net|-host] target [netmask Nm] [gw Gw] [metric N] [mod] [reinstate] [[dev] If]\n\nroute [-v] [-A family] del [-net|-host] target [gw Gw] [netmask Nm] [metricN] [[dev] If] \n\nroute [-V] [--version] [-h] [--help] \n\nroute的常用参数说明如下：\n\n-v                                使用冗余输出模式。\n\n-A family                   指定特定的地址族（例如\"inet\"、\"inet6“）\n\n-n                               使用数字显示的地址（例如 202.38.75.75）而不是去解释域名。\n\n-e                               使用与 netstat 相同的输出格式。\n\n-ee                             参数会产生很长的输出，包括内核路由表的几乎所有信息。\n\n-net                           目标（target）是一个网段。\n\n-host                         目标（target）是一个单独的主机。\n\n-F                               显示内核 FIB 路由表。结果可能被-e 和-ee 参数改变。\n\n-C                              显示内核中路由缓存信息。\n\ndel                             删除一个路由表项。\n\nadd                           增加一个路由表项。\n\nTarget                       配置的目的网段或者主机。可以是 IP，或者是网络或主机名。\n\nnetmask Nm           用来指明要添加的路由表项的网络掩码。\n\ngw Gw                      任何通往目的（target）的 IP 分组都要通过这个网关。\n\nmetric M                  设置路由表中该项的尺度域（metric field）为M。\n\n示例：\n\n1. 添加一条路由表项，网段192.168.0.x 应该从接口”eth0“走\n\n   ```shell\n   route add -net 192.168.0.0 netmask 255.255.255.0 dev eth0\n   ```\n\n2. 添加一条缺省路由\n\n   ```shell\n   route add 0.0.0.0 gw 网关地址\n   ```\n\n3. 删除缺省路由\n\n   ```shell\n   route del 0.0.0.0 gw 网关地址\n   ```\n\n4. route命令的输出结果示例说明\n\n   输出的格式有以下几栏：\n\n   Destination                  目标网段或主机\n\n   Gateway                       网关地址，如果没有设置，则是”*“表示\n\n   Genmask                      网络掩码\n\n   Flags 一些可能的标记如下：\n\n   U（路由是活动的）\n\n   H（目标是一个主机）\n\n   G（使用网关 gateway）\n\n   R（reinstate route 动态路由产生的表象）\n\n   D（dynamically installed by daemon or redirect）\n\n   M（modified from routing daemon or redirect）\n\n   ！（reject route）\n\n   Metric                             路由距离。\n\n   Ref                                  路由项引用次数。（Linux内核中没有使用）\n\n   Use                                 查找路由项的次数。\n\n   Iface                               该路由表项对应的输出接口。\n\n#### 3.2 网络操作命令\n\nLinux 系统常用的网络操作命令包括 netstat、nslookup、host、finger 和 ping。netstat 命令的功能是显示网络连接、路由表和网络接口信息，可以让用户得知目前都有哪些网络连接正在运作。nslookup 命令的功能是查询一台机器的 IP地址和其对应的域名。它通常需要一台域名服务器来提供域名服务。如果用户已经设置好域名服务器，就可以用这个命令查看不同主机的 IP 地址对应的域名。host 命令可根据主机名查询主机的 IP 地址或根据主机 IP 地址查询主机名；finger 命令的功能是查询用户的信息，通常会显示系统中某个用户的用户名、主目录、停滞时间、登录时间、登录 shell 等信息。ping 命令用于查看网络上的主机是否在工作。\n\n##### 3.2.1 netstat\n\nnetstat命令的语法为：\n\nnetstat [选项]\n\nnetstat的常用参数说明如下：\n\n-a   显示所有 socket 包括正在监听的 \n\n-c   每隔 1 秒就重新显示一遍直到用户中断它 \n\n-i    显示所有网络接口的信息格式同”ifconfig –e”\n\n-n   以网络 IP 地址代替名称显示出网络连接情形 \n\n-r    显示核心路由表格式同 “route –e”\n\n-t    显示 TCP 协议的连接情况 \n\n-u   显示 UDP 协议的连接情况 \n\n-v   显示正在进行的工作 \n\n##### 3.2.2 nslookup\n\nnslookup 命令的功能是查询一台机器的 IP 地址和其对应的域名。它通常需要一台域名服务器来提供域名服务。如果用户已经设置好域名服务器，就可以用这个命令查看不同主机的 IP 地址对应的域名。命令的语法为：\n\nnslookup [IP地址/域名]\n\n示例：\n\n在本机致性nslookup命令\n\n```shell\nDefault Server: name.tlc.com.cn\nAddress: 192.168.1.99\n>\n```\n\n在符号 “>” 后面输入要查询的IP地址或域名并回车即可。如果要退出该命令，输入exit并回车即可。\n\n##### 3.2.3 host\n\nhost命令的功能基本与nslookup相同。命令的语法为：\n\nhost [选项] [IP地址/域名/主机名]\n\nhost的常用参数如下：\n\n-a   显示所查域名或IP地址、域名或主机名的相关信息。\n\n##### 3.2.4 finger\n\nfinger 命令的功能是查询用户的信息，通常会显示系统中某个用户的用户名、主目录、停滞时间、登录时间、登录 shell 等信息。如果要查询远程机上的用户信息。需要在用户名后面接 “@主机名” 。采用[用户名@主机名]的格式，不过要查询的网络主机需要运行 finger 守护进程。该命令的一般格式为：\n\nfinger [选项] [使用者] [用户@主机]\n\nfinger的常用参数如下：\n\n-s   显示用户的注册名、实际姓名、终端名称、写状态、停滞时间、登录时间等信息。\n\n-l    除了用-s 选项显示的信息外，还显示用户主目录、登录 shel、邮件状态等信息，以及用户主目录下的.plan、.project 和.forward 文件的内容 \n\n-p   除了不显示.plan文件和.project文件以外与-l选项相同\n\n##### 3.2.5 Ping命令\n\nping 命令用于查看网络上的主机是否在工作，它向该主机发送 ICMP ECHO_REQUEST 包。有时我们想从网络上的某台主机上下载文件，可是又不知道那台主机是否开着，就需要使用 ping 命令查看。该命令的一般格式为：\n\nping [选项] [主机名/IP地址]\n\nping的常用参数如下：\n\n-c    数目 在发送指定数目的包后停止 \n\n-d   设定 SO_DEBUG 的选项 \n\n-f    大量且快速地送网络封包给一台机器看它的回应 \n\n-I    秒数 设定间隔几秒送一个网络封包给一台机器预设值是一秒送一次 \n\n-l    次数 在指定次数内以最快的方式送封包数据到指定机器 （只有超级用户可以使用此选项）\n\n-q   不显示任何传送封包的信息只显示最后的结果 \n\n-r   不经由网关而直接送封包到一台机器，通常是查看本机的网络接口是否有问题\n\n-s   字节数 指定发送的数据字节数，预设值是 56，加上 8 字节的 ICMP头，一共是 64ICMP 数据字节\n\n#### 3.3 常用网络配置文件介绍\n\n在 Linux 系统中，TCP/IP 网络是通过若干个文本文件进行配置的，需要编辑这些文件来完成联网工作。系统中重要的有关网络配置文件为：\n\n/etc/sysconfig/network\n\n/etc/hosts\n\n/etc/services\n\n/etc/host.conf\n\n/etc/nsswitch.conf\n\n/etc/resolv.conf \n\n/etc/xinetd.conf\n\n/etc/modules.conf\n\n/etc/sysconfig/network-scripts/ifcfg-ethN \n\n接下来我们将对这些文件逐一讲述，这些文件都可以在系统运行时进行修改，不用启动或者停止任何守护程序，更改会立刻生效（除了/etc/sysconfig/network）。 另外，这些文件都支持由\"#\"开头的注释，每一个文件都有在 UNIX手册页中的第 5 部分中有一项，可以用 man 命令来获取它们。\n\n##### 3.3.1 /etc/sysconfig/network 网络设置 \n\n该文件用来指定服务器上的网络配置信息，包含了控制和网络有关的文件和守护程序的行为的参数。下面是一个例子文件：\n\n```shell\nNETWORKING=yes\nHOSTNAME=machinel\nGATEWAY=210.34.6.2\nFORWARD_IPV4=yes\nGATEWAYDEV=\n```\n\n其中，NETWORK=yes/no 表示网络是否被配置 ；\n\nHOSTNAME=hostname hostname 表示服务器的主机名；\n\nGATEWAY=gw-ip gw-ip 表示网络网关的 IP 地址；\n\nFORWARD_IPV4=yes/no 是否开启 IP 转发功能；\n\nGAREWAYDEV=gw-dev gw-dw 表示网关的设备名 如 eth0 等；\n\n##### 3.2.2 /etc/hosts IP 地址和主机名的映射 \n\n/etc/hosts 中包含了 IP 地址和主机名之间的映射，还包括主机名的别名，IP地址的设计使计算机容易识别，但对于人却很难记住它们，为了解决这个问题，创建了/etc/hosts 这个文件。下面是一个例子文件：\n\n```shell\n127.0.0.1 machinel localhost.localdomain localhost\n192.168.1.100 machine7\n192.168.1.101 otherpc otheralias\n```\n\n在这个例子中，本机名是 machine1，otherpc 还有别名 otheralias，它可以指向 otheralias。一旦配置完机器的网络配置文件，应该重新启动网络以使修改生效，使用下面的命令来重新启动网络：\n\n```shell\nservice network restart\n```\n\n/etc/hosts 文件通常含有主机名、localhost 和系统管理员经常使用的系统别名，有时候 telnet 到 Linux 机器要等待很长时间，可以通过在\"/etc/hosts\"加入客户的机器的 IP 地址和主机名的匹配项，就可以减少登录等待时间。在没有域名服务器情况下，系统上的所有网络程序都通过查询该文件来解析对应于某个主机名的 IP 地址，否则，其他的主机名通常使用 DNS 来解决，DNS 客户部分的配置在文件/etc/resolv.conf 中。\n\n##### 3.3.3 /etc/services\n\n/etc/services 中包含了服务名和端口号之间的映射，不少的系统程序要使用这个文件。\n\n##### 3.3.4 /etc/host.conf 配置名字解析器 \n\n有两个文件声明系统到哪里寻找名字信息来配置 UNIX名字解析器的库。文件/etc/host.conf 由版本 5 的 libc 库所使用，而/etc/nsswitch.conf 由版本 6 使用(glibc )。问题在于一些程序使用其中一个，而一些使用另一个，所以将两个文件都配置正确是必要的。\n\n/etc/host.conf 文件指定如何解析主机名，Linux 通过解析器库来获得主机名对应的 IP 地址 。\n\n\"order \" 指定主机名查询顺序，其参数为用逗号隔开的查找方法，支持的查找方法为 bind、hosts、和 nis，分别代表 DNS、/etc/hosts 和 NIS，这里规定先查询\"/etc/hosts\"文件然后再使用 DNS 来解析域名。\n\n\"trim\" 表明当通过 DNS 进行地址到主机名的转换时，域名将从主机名中被裁剪掉，trim 可以被多个域包含多次，对/etc/hosts 和 NIS 查询方法不起作用，注意在/etc/hosts 和 NIS 表中主机名是被适当地（有或没有全域名）列出的。\n\n\"multi\" 指定是否\"/etc/hosts\"文件中指定的主机可以有多个地址，值为 on 表示允许，拥有多个 IP 地址的主机一般称为具有多个网络界面。\n\n\"nospoof \" 指是否允许对该服务器进行 IP 地址欺骗，值为 on 表示不允许，IP欺骗是一种攻击系统安全的手段，通过把 IP 地址伪装成别的计算机，来取得其它计算机的信任。\n\n\"alert\" 当 nospoof 指令为 on 时，alert 控制欺骗的企图是否用 syslog 工具进行记录，值为 on 表示使用，缺省值为 off。\n\n“rccorder\" 如果被设置为 on，所有的查询将被重新排序，所以在同一子网中的主机将首选被返回。缺省值为 off。\n\n##### 3.3.5 /etc/nsswitch.conf 配置名字解析器 \n\n/etc/nsswitch.conf 文件是由 Sun 公司开发并用于管理系统中多个配置文件查找的顺序，它比/etc/host.conf 文件提供了更多的功能。/etc/nsswitch.conf 中的每一行或者是注释(以#号开头)或者是一个关键字后跟冒号和一系列要试用的有顺序的方法。每一个关键字是在/etc/目录可以被/etc/nsswitch.conf 控制的/etc 文件的名字。下面是可以被包含的关键字：\n\naliases           邮件别名\n\npasswd         系统用户\n\ngroup            用户组\n\nshadow         隐蔽口令\n\nhosts             主机名和 I P 地址\n\nnetworks      网络名和号\n\nprotocols      网络协议\n\nservices        端口号和服务名称\n\nethers           以太网号\n\nrpc                 远程进程调用的名称和号\n\nnetgroup      网内组\n\n##### 3.3.6 /etc/resolv.conf 配置 DNS 客户 \n\n文件/etc/resolv.conf 配置 DNS 客户，它包含了主机的域名搜索顺序和 DNS服务器的地址，每一行应包含一个关键字和一个或多个的由空格隔开的参数。下面是一个例子文件：\n\n```shell\nnameserver 192.168.0.36\nnameserver 192.168.0.37\n```\n\n合法的参数及其意义如下：\n\nnameserver 表明 DNS 服务器的 IP 地址。可以有很多行的 nameserver，每一个带一个 IP 地址。在查询时就按 nameserver 在本文件中的顺序进行，且只有当第一个 nameserver 没有反应时才查询下面的 nameserver。\n\ndomain 声明主机的域名。很多程序用到它，如邮件系统；当为没有域名的主机进行 DNS 查询时，也要用到。如果没有域名，主机名将被使用，删除所有在第一个点( . )前面的内容。\n\nsearch 它的多个参数指明域名查询顺序。当要查询没有域名的主机，主机将在由 search 声明的域中分别查找。domain 和 search 不能共存；如果同时存在 后面出现的将会被使用。\n\nsortlist 允许将得到域名结果进行特定的排序。它的参数为网络/掩码对，允许任意的排列顺序。Red Hat 中没有提供缺省的/etc/resolv.conf文件，它的内容是根据在安装时给出的选项动态创建的。\n\n##### 3.3.7 /etc/xinetd.conf\n\nredhat 7.1 及以后版本计和以往的版本有一个明显的区别，就是用 xinetd.conf代替原来的 inetd.conf，并且直接使用了 firewall 服务。 xinetd(eXtendedInterNET services daemon)对 inetd 功能进行了扩展，xinetd 的默认配置文件是/etc/xinetd.conf，它看起来尽管和老版本的/etc/inetd.conf 完全不同，其实只是以一个脚本的形式将 inetd 中每一行指定的服务扩展为一个/etc/xinetd.d/下的配置文件。其格式为：\n\n```shell\nservice service-name\n{\n    disabled = yes/no; //是否禁用\n    socket_type = xxx; //TCP/IP socket type, such as stream, dgram, raw,...\n    protocol = xxx; //服务使用的协议\n    server = xxx; //服务daemon的完整路径\n    server_args = xxx; //服务的参数\n    port = xxx; //指定服务的端口号\n    wait = xxx; //是否阻塞服务，即单线程或多线程\n    user = xxx; //服务进程的uid\n    group = xxx; //gid\n    REUSE = xxx; //可重用标值\n    ... ...\n}\n```\n\n##### 3.3.8 /etc/modules.conf 文件 \n\n该配置文件定义了各种需要在启动时加载的模块的参数信息，文件格式如下：\n\n```shell\nalias eth0 tg3\nalias eth1 3c905\n```\n\n##### 3.3.9 /etc/sysconfig/network-scripts/ifcfg-ethN 文件 \n\n系统网络设备的配置文件保存在 “/etc/sysconfig/network-scripts” 目录下，ifcfg-eth0 包含第一块网卡的配置信息，ifcfg-eth1包含第二块网卡的配置信息。\n\n下面是“/etc/sysconfig/network-scripts/ifcfg-eth0”文件的示例：\n\n```shell\nDEVICE=eth0\nONBOOT=yes\nBOOTPROTO=static\nIPADDR=192.168.0.66\nNETMASK=255.255.255.0\nGATEWAY=192.168.0.65\n```\n\n若希望手工修改网络地址或在新的接口上增加新的网络界面，可以通过修改对应的文件（ifcfg-ethN）或创建新的文件来实现。\n\n#### 3.4常用网络操作方法\n\nLinux提供了一组强有力的网络命令来为用户服务，这些工具能够帮助用户登录到远程计算机上、传输文件和执行远程命令等。本节介绍下列几个常用的有关网络操作的命令：\n\nftp            传输文件\n\ntelnet       登录到远程计算机上\n\nr-              使用各种远程命令\n\n##### 3.4.1 ftp远程文件传输\n\nftp 命令是标准的文件传输协议的用户接口。ftp 是在 TCP/IP 网络上的计算机之间传输文件的简单有效的方法。它允许用户传输 ASCII 文件和二进制文件。在 ftp 会话过程中，用户可以通过使用 ftp 客户程序连接到另一台计算机上。从此，用户可以在目录中上下移动、列出目录内容、把文件从远程机拷贝到本地机上、把文件从本地机传输到远程系统中。需要注意的是，如果用户没有那个文件的存取权限，就不能从远程系统中获得文件或向远程系统传输文件。为了使用 ftp 来传输文件，用户必须知道远程计算机上的合法用户名和口令。这个用户名/口令的组合用来确认 ftp 会话，并用来确定用户对要传输的文件可以进行什么样的访问。\n\nftp命令的一般格式如下：\n\n$ ftp 主机名/IP\n\n如果没有指定主机名，ftp将给出提示符，等待用户输入命令：\n\n```shell\n$ ftp\nftp > \n```\n\n此时在 ftp>提示符后面输入 open 命令加主机名或 IP 地址，将试图连接指定的主机。不管使用哪一种方法，如果连接成功，需要在远程机上登录。用户如果在远程机上有帐号，就可以通过 ftp 使用这一帐号并需要提供口令。在远程机上的用户帐号的读写权限决定该用户在远程机上能下载什么文件和将上载文件放到哪个目录中。\n\n一旦用户使用 ftp 在远程站点上登录成功，将得到 “ftp>” 提示符，现在可以自由使用 ftp 提供的命令，可以用 help 命令取得可供使用的命令清单，也可以在 help 命令后面指定具体的命令名称，获得这条命令的说明。\n\n最常用的命令有：\n\nls   列出远程机的当前目录 \n\ncd   在远程机上改变工作目录 \n\nlcd   在本地机上改变工作目录 \n\nascii   设置文件传输方式为 ASCII模式，默认情况下，ftp 按 ASCII模式传输文件，用户也可以指定    其他模式。ascii 和 brinary 命令的功能是设置传输的模式。用 ASCII 模式传输文件对纯文本是非常好的，但为避免对二进制文件的破坏，用户可以以二进制模式传输文件 。\n\nbinary   设置文件传输方式为二进制模式 \n\nclose   终止当前的 ftp 会话 \n\nhash   每次传输完数据缓冲区中的数据后就显示一个#号 \n\nget（mget）从远程机传送指定文件到本地机 \n\nput（mput） 从本地机传送指定文件到远程机  \n\nopen   连接远程 ftp 站点 \n\nquit   断开与远程机的连接并退出 ftp \n\n?   显示本地帮助信息 \n\n!    转到 Shell 中 \n\n使用ftp传输文件过程如下：\n\n```shell\n[root@localhost root]# ftp 192.168.1.66\nConnected to 192.168.1.66 (192.168.1.66).\n220 localhost.localdomain FTP server (Version wu-2.6.2-5) ready.\nName (192.168.1.66:root): test\n331 Password required for test.\nPassword:\n230 User oracle logged in. Access restrictions apply.\nRemote system type is UNIX.\nUsing binary mode to transfer files.\nftp> ls\n227 Entering Passive Mode (192.168.1.66,228,168)\n150 Opening ASCII mode data connection for directory listing.\ntotal 312\n-rw-r--r-- 1 root root 1215 Feb 4 13:49 button1.jpg\n-rw-r--r-- 1 root root 1133 Feb 4 13:49 button2.jpg\n-rw-r--r-- 1 root root 1435 Feb 4 13:46 index.html\n226 Transfer complete.\nftp> lcd\nLocal directory now /root\nftp> lcd tmp\nLocal directory now /root/tmp\nftp> bin\n200 Type set to I.\nftp> mget *.jpg\nmget button1.jpg? y\n227 Entering Passive Mode (10,153,89,66,187,198)\n150 Opening BINARY mode data connection for button1.jpg (1215 bytes).\n226 Transfer complete.\n1215 bytes received in 0.0119 secs (1e+02 Kbytes/sec)\nmget button2.jpg? y\n227 Entering Passive Mode (10,153,89,66,243,218)\n150 Opening BINARY mode data connection for button2.jpg (1133 bytes).\n226 Transfer complete.\n1133 bytes received in 0.00223 secs (5e+02 Kbytes/sec)\nftp> quit\n221-You have transferred 2348 bytes in 2 files.\n221-Total traffic for this session was 3315 bytes in 3 transfers.\n221-Thank you for using the FTP service on localhost.localdomain.\n221 Goodbye.\n```\n\n##### 3.4.2 telnet\n\n用户使用 telnet 命令进行远程登录。该命令允许用户使用 telnet 协议在远程计算机之间进行通信，用户可以通过网络在远程计算机上登录，就像登录到本地机上执行命令一样。为了通过 telnet 登录到远程计算机上，必须知道远程机上的合法用户名和口令。虽然有些系统确实为远程用户提供登录功能，但出于对安全的考虑，要限制来宾的操作权限，因此，这种情况下能使用的功能是很少的。当允许远程用户登录时，系统通常把这些用户放在一个受限制的shell 中，以防系统被怀有恶意的或不小心的用户破坏。用户还可以使用 telnet从远程站点登录到自己的计算机上，检查电子邮件、编辑文件和运行程序，就像在本地登录一样。但是，用户只能使用基于终端的环境而不是 X Wndows环境，telnet 只为普通终端提供终端仿真，而不支持 X Wndow等图形环境。\n\ntelnet命令的一般形式为：\n\ntelnet 主机名/IP\n\n其中 “主机名/IP” 是要连接的远程机的主机名或 IP 地址。如果这一命令执行成功，将从远程机上得到 login：提示符。\n\n使用telnet命令登录的过程如下：\n\n$ telnet 主机名/IP\n\n一旦telnet成功地连接到远程系统上，就显示登录信息并提示用户输入人用户名和口令。如果用户名和口令输入正确，就能成功登录并在远程系统上工作。\n\n在telnet提示符后面可以输入很多命令，用来控制telnet会话过程，在telnet联机帮助手册中对这些命令有详细的说明。\n\n##### 3.4.3 r- 系列命令\n\n除 ftp 和 telnet 以外，还可以使用 r-系列命令访问远程计算机和在网络上交换文件。使用 r-系列命令需要特别注意，因为如果用户不小心，就会造成严重的安全漏洞。用户发出一个 r-系列命令后，远程系统检查名为/etc/hosts.equiv的文件，以查看用户的主机是否列在这个文件中。如果它没有找到用户的主机，就检查远程机上同名用户的主目录中名为.rhosts 的文件，看是否包括该用户的主机。如果该用户的主机包括在这两个文件中的任何一个之中，该用户执行 r-系列命令就不用提供口令。\n\nrlogin命令\n\nrlogin是 “remote login” （远程登录） 的缩写。该命令与 telnet 命令很相似，允许用户启动远程系统上的交互命令会话。rlogin 的一般格式是：\n\nrlogin [ -8EKLdx ] [ -e char ] [-k realm ] [ - l username ] host \n\n一般最常用的格式是：\n\nrlogin host\n\nrsh 命令\n\nrsh 是“ remote shell” （远程 shell）的缩写。该命令在指定的远程主机上启动一个 shell 并执行用户在 rsh 命令行中指定的命令。如果用户没有给出要执行的命令，rsh 就用 rlogin 命令使用户登录到远程机上。rsh 命令的一般格式是：\n\nrsh [-Kdnx] [-k realm] [-l username] host [command] \n\n一般常用的格式是：\n\nrsh host [command]\n\ncommand 可以是从 shell 提示符下键人的任何 Linux 命令 。\n\n### 四、常用使用技巧\n\n#### 4.1 Linux下软件包的安装及卸载\n\n在 Linux 操作系统下，几乎所有的软件均通过 RPM 进行安装、卸载及管理等操作。RPM 的全称为 Redhat Package Manager，是由 Redhat 公司提出的，用于管理 Linux 下软件包的软件。Linux 安装时，除了几个核心模块以外，其余几乎所有的模块均通过 RPM 完成安装。RPM 有五种操作模式，分别为：安装、卸载、升级、查询和验证。\n\n##### 4.1.1 RPM安装操作\n\n命令：\n\nrpm -i 需要安装的包文件名\n\n举例如下：\n\nrpm -i example.rpm  安装example.rpm 包；\n\nrpm -iv example.rpm 安装example.rpm包，并在安装过程中显示正在安装的文件信息；\n\nrpm -ivh example.rpm 安装 example.rpm 包，并在安装过程中显示正在安装的文件信息及安装进度；\n\n##### 4.1.2 RPM查询操作\n\n命令：\n\nrpm -q ... \n\n附加查询命令：\n\na   查询所有已经安装的包\n\n以下两个附加命令用于查询安装包的信息；\n\ni    显示安装包的信息；\n\nl    显示安装包中的所有文件被安装到哪些目录下；\n\ns   显示安装版中的所欲文件状态及被安装到哪些目录下；\n\n以下两个附加命令用于指定需要查询的是安装包还是已安装后的文件；\n\np   查询的是安装包的信息；\n\nf    查询的是已安装的某文件信息；\n\n举例如下：\n\n```shell\nrpm -qa | grep tomcat4 //查看 tomcat4 是否被安装；\nrpm -qip example.rpm //查看 example.rpm 安装包的信息；\nrpm -qif /bin/df //查看/bin/df 文件所在安装包的信息；\nrpm -qlf /bin/df //查看/bin/df 文件所在安装包中的各个文件分别被安装到哪个目录下；\n```\n\n##### 4.1.3 RPM卸载操作\n\n命令：\n\nrpm -e 需要卸载的安装包\n\n在卸载之前，通常需要使用 rpm -q ... 命令查出需要卸载的安装包名称。\n\n举例如下：\n\n```shell\nrpm -e tomcat4  //卸载tomcat4软件包\n```\n\n##### 4.1.4 RPM升级操作\n\n命令：\nrpm -U 需要升级的包\n\n举例如下：\n\n```shell\nrpm -Uvh example.rpm  //升级example.rpm软件包\n```\n\n##### 4.1.5 RPM验证操作\n\n命令：\n\nrpm -V 需要验证的包\n\n举例如下：\n\n```shell\nrpm -Vf /etc/tomcat4/tomcat4.conf\n```\n\n输出信息类似如下：\n\n```shell\nS.5....T c /etc/tomcat4/tomcat4.conf\n```\n\n其中，S 表示文件大小修改过，T 表示文件日期修改过。限于篇幅，更多的验证信息请您参考 rpm 帮助文件：man rpm。\n\n##### 4.1.6 RPM的其他附加命令\n\n--force    强制操作（如强制安装、删除等）；\n\n--requires    显示该包的依赖关系；\n\n--nodeps     忽略依赖关系并继续操作；\n\n#### 4.2 Linux操作系统的时钟教程\n\n##### 4.2.1 时钟系统介绍\n\n对于 Linux 操作系统，主要有两种时钟系统：\n\n1. 硬件时钟系统：该时钟系统的运行独立于任何系统控制程序，在 CPU 内部运行，既使系统断电，该时钟系统仍然保持运行。此时钟系统常常被称为实时时钟系统（RTC）、BIOS 时钟系统或 CMOS 时钟系统。\n2. 系统时间：该时间为 Linux 内核的时钟系统所维护，并且被定时中断程序所驱动。该时间仅当 Linux 系统运行过程中有意义。该系统时间表示为以 UTC通用协调时间（Universal Time Coordinated）计算，自1970年1月1日0时0分0秒起至当前时刻所经过的秒数（该数字不是整数 以小数方式表示精度）。\n\n在 Linux 系统中，真正起作用的是系统时间。硬件时钟系统的唯一作用是在Linux 系统没有运行时，保持时间的运行。当 Linux 操作系统启动时，系统会自动将硬件时钟系统的时间同步到 Linux 系统时间，并且在之后的整个 Linux运行过程中，不再使用该硬件时钟系统（这与 DOS 的实现方式完全不同，在DOS 中，只有硬件时间系统的概念）。而在 Linux 操作系统关闭时，系统会自动将当前的 Linux 系统时间同步到硬件时钟系统所维护的时间。\n\n##### 4.2.2 硬件时钟系统与系统时间的同步\n\n/sbin/hwclock 用于同步硬件时钟系统的时间与 Linux 操作系统时间。\n\n查看当前硬件时钟系统时间的命令为：\n\n```shell\n/sbin/hwclock --show\n```\n\n将硬件时钟系统时间同步到Linux操作系统时间的命令为：\n\n```shell\n/sbin/hwclock --hctosys\n```\n\n将 Linux 操作系统时间同步到硬件时钟系统时间的命令为 ：\n\n```shell\n/sbin/hwclock --systohc\n```\n\n如果观察系统启动/关闭时执行的初始化脚本”/etc/rc.d/rc.sysinit”，我们不难发现：系统启动过程中，自动调用 ”/sbin/hwclock --hctosys“ 将硬件时钟系统时间同步到操作系统时间；而在系统关闭过程中，自动调用 ”/sbin/hwclock--systohc“ 将操作系统时间同步到硬件时钟系统时间。\n\n#### 4.3 系统信息及运行状态监控\n\nLinux的文件系统中，有一个特殊目录”/proc“，该目录下列出的文件并非保存在磁盘上，而是内存中的一个映像。在该目录下可以找到许多有意思的东西，例如：\n\n/proc/cpuinfo     本机CPU的相关信息；\n\n/proc/meminfo     本机内存及交换分区的使用信息；\n\n/proc/modules     本机已安装的硬件模块信息；\n\n/proc/mounts     本机已挂载（mount）上的设备信息；\n\n此外，该目录下有一些以数字为名称 的子目录，每个子目录用于维护一个正在运行的进程，而目录即为相应的进程ID。例如，进入名称为”1“的子目录：\n\n```shell\ncd /proc/1\n```\n\n该目录下 文件 ”cmdline“ 中的内容为该进程运行时执行的命令行；”environ“文件中的内容为该进程运行时的环境变量信息；”stat“ 文件中存放的时该进程运行的状态信息等。\n\n通过查看 ”/proc“ 目录下的文件，可以获取几乎所有的系统信息及系统的运行状态信息。事实上，Linux 下的诸多查询系统状态信息的命令，也是通过读取该目录下的文件而获取的。\n\n以下是一些用于查看系统状态信息的命令：\n\n##### 4.3.1 df命令\n\n用于查看 Linux 文件系统的状态信息，显示各个分区的容量、已使用量、未使用量及挂载点等信息。如：\n\ndf -k    以千字节（KB）为单位显示各分区的信息;\n\ndf -a    显示所有分区，包括大小为 0 的分区；\n\ndf -T     显示分区类型（EXT2 或 EXT3等）。\n\n##### 4.3.2 du命令\n\n用于查看文件或文件夹的大小。如：\n\ndu -b /home    以字节为单位显示 “/home” 文件夹下各个子文件夹的大小；\n\ndu -ks home    以千字节（KB）为单位显示 ”/home“ 文件夹的总大小；\n\n##### 4.3.3 top命令\n\n用于实时查看系统状态信息。运行该命令后，屏幕上会显示如下信息：\n\nCPU状态（CPU states）：包括用户进程占用比率、系统进程占用比率、用户的 nice 优先级进程占用比率及空闲 CPU资源比率等；\n\n内存状态（Mem）：包括内存总量、使用量、空闲量等；\n\n交换分区状态（Swap）：包括交换分区总量、使用量、空闲量等；\n\n每个进程的状态：包括进程ID、用户名、优先级、CPU和内存使用量，以及运行该进程时执行的命令行；\n\n执行 top 命令后，每隔 5 秒，系统会自动刷新一次状态信息。如果要指定刷新间隔，在启动时加入 ”-d“ 参数即可。例如：\n\ntop -d 1     启动top，并且每隔1秒刷新一次。\n\n进入top后，按下如下按钮会有相应功能：\n\n【空格】立即刷新显示信息；\n\n【M】按内存使用量排序；\n\n【N】按进程ID排序；\n\n【P】按CPU使用量排序；\n\n【c】扩展命令行信息，显示完整的命令行；\n\n【?】显示帮助信息；\n\n【q】退出top程序。\n\n##### 4.3.4 iostat命令\n\n统计并输出 CPU使用信息及特定设备或分区的 IO 信息。\n\niostat -c    仅显示CPU使用情况统计信息；\n\niostat -d    仅显示设备/分区使用情况统计信息；\n\niostat -d 2    统计设备/分区使用情况，并每隔2秒刷新一次。\n\n显示的IO统计信息中，各部分说明如下：\n\ntps    设备每秒收到的IO传送请求数；\n\nBlk_read/s    设备每秒读入的块数量；\n\nBlk_wrtn/s    设备每秒写入的块数量；\n\nBlk_read    设备读入的总块数量；\n\nBlk_wrtn    设备写入的总块数量；\n\n显示CPU统计信息，各部分的含义同top。\n\n#### 4.4 打包/压缩工具tar\n\ntar 是 Linux下最常用的打包、压缩工具，它在 Linux 中扮演类似于 WinZip 或WinRAR 在 Windows 下的角色。下面是该工具的常用命令参数及运用举例：\n\n主要命令：\n\n-c    创建包\n\n-x    解包\n\n-t    列出包中的所有内容\n\n-r    增加文件到指定包中\n\n-u    更新包中的文件\n\n可选命令：\n-j     创建或解开包时，使用 bzip2 进行压缩或解压；\n\n-z    创建或解开包时，使用 gzip 进行压缩或解压；\n\n-Z    创建或解开包时，使用 compress 进行压缩或解压；\n\n-f     后面跟指定的包文件名；\n\n-v    显示打包/解包过程；\n\n-C    指定解包后的路径；\n\n例如：\n\ntar -czf tmp.tar.gz /tmp      将 ”/tmp“ 目录压缩打包，存放为 tmp.tar.gz；\n\ntar -xzf tmp.tar.gz -C /home       将 tmp.tar.gz 包解到 ”/home“ 目录下；\n\ntar -t tmp.tar.gz      查看 tmp.tar.gz 包中的文件信息；\n\n#### 4.5 文件及文件内容的查找\n\nLinux下提供完善的文件及文件内容查找命令，分别介绍如下：\n\n##### 4.5.1 文件查找命令find\n\nfind用于查找文件系统中的指定文件，其命令格式为：\n\nfind 要查找的路径 表达式 \n\n例如：\n\nfind . -name 1.txt      在当前目录及其子目录下查找文件 ”1.txt“；\n\nfind /tmp -name 1.txt      在 ”/tmp“ 目录及其子目录下查找文件 ”1.txt“。\n\n##### 4.5.2 文件内容查找命令grep\n\ngrep命令用于查找指定的模式匹配，格式为：\n\ngrep [命令选项] 要查找的匹配模式 [要查找的文件]\n\n例如：\ngrep cams test.txt      在 ”test.txt“ 文件中查找 cams 字符串；\n\ngrep -r cams /root/cams      在 ”/root/cams“ 目录及其子目录下的所有文件中查找 cams 字符串；\n\ngrep 命令除了能够查找文件外，还能够将任意输出流重定向到 grep 进行查找：\n\nps -ef | grep ora      查找进程名中包含 ”ora“ 的所有进程信息。\n\n#### 4.6 Linux的系统服务及其配置\n\n##### 4.6.1 服务介绍\n\nLinux 系统服务是在 Linux启动时自动加载，并在 Linux退出时自动停止的系统任务。在 Linux 启动过程中，我们可以看得很多 ”starting …“ 提示信息，该信息表示正在启动系统服务；而在 Linux 退出时，我们也能够看到相应的”Stopping …“ 信息，表示系统服务正在停止。Linux自身有许多系统任务，如 ”network“ 服务用于支持网络连接等。CAMS 在安装过程中，会自动加入三个系统任务，以保证在 Linux 启动时，CAMS 服务自动启动；而在 Linux 关闭时， CAMS 服务也自动停止。这三个服务分别是：\n\noracled      Oracle数据库服务\n\ncamsd        CAMS协议处理模块服务\n\ntomcat4     Tomcat Web Server服务，用于支持CAMS配置管理台、自助服务平台、Portal服务平台及内容计费认证平台等；\n\nLinux 系统的所有服务程序脚本均可以在 ”/etc/rc.d/init.d“ 文件夹中找到，每一项服务对应一个脚本文件。如果 CAMS 已经安装，我们可以在该文件夹下找到 ”oracled“、”camsd“  和 ”tomcat4“ 这三个文件。\n\n##### 4.6.2 启动和停止服务\n\nservice命令用于启动及停止某个服务，例如：\n\nservice camsd stop     停止camsd服务\n\nservice oracled start      启动oracled服务\n\nservice tomcat4 start      启动tomcat4服务\n\nCAMS 引入的三个服务间有依赖关系，即 camsd 服务和 tomcat4 服务依赖与oracled 服务，在 oracled 服务启动前不能启动 camsd 服务和 tomcat4 服务；而在 oracled 服务停止前必须先停止 camsd 服务和 tomcat4 服务。\n\n##### 4.6.3 服务的添加、删除、自动运行及状态\n\nCAMS在安装过程中会自动添加相关的服务，在安装的最后过程中，会提示用户是否启动服务（使服务生效）。需要注意的是：一个服务被添加后，并不表示该服务在系统启动过程中会自动运行，仅表示可以使用service命令来启动、停止服务。\n\n1. **添加服务**\n\n   添加服务的步骤为：\n\n   1. 将该服务的脚本文件拷入”/etc/rc.d/init.d“ 文件夹下，保证其状态为”可执行“；\n\n   2. 使用chkconfig命令将服务添加到服务列表中：\n\n      ```shell\n      chkconfig --add camsd\n      ```\n\n      将服务添加以后，该服务即可以使用service来启动/停止了。\n\n2. **删除服务**\n\n   如果要删除服务，将上述命令的”add“改为”del“即可：\n\n   ```shell\n   chkconfig --del camsd\n   ```\n\n3. **设置服务自动运行**\n\n   Linux运行有7种运行级别，分别使用0-6来表示，控制台界面运行级别为3，图形界面运行级别为5。要使某服务在系统启动时自动运行，使用chkconfig将该服务添加到相应级别的自启动服务列表中即可：\n\n   ```shell\n   chkconfig --level 35 camsd on\n   ```\n\n   上面的命令将camsd服务添加到级别为3、5的自启动服务列表中；而下面的命令则将服务camsd从级别为3、5的自启动服务列表中删除：\n\n   ```shell\n   chkconfig --level 35 camsd off\n   ```\n\n   如果需要查看某项服务的自启动状态信息，使用如下命令即可：\n\n   ```shell\n   chkconfig --list camsd\n   ```\n\n   ","tags":["Linux"],"categories":["Linux"]},{"title":"MQTT的发布和订阅","url":"/post/3af7fcdd.html","content":"\n\n\n\n\n### 准备工作\n\n本文测试MQTT的发布/订阅，分为客户端版和python版。\n\n首先我们需要一个MQTT服务器，这里推荐使用[EMQ](https://www.emqx.cn/downloads#broker)，一步搭建，省去了很多部署的麻烦。\n\n选择Windows版本下载，自己选择目录解压后，进入`bin`目录打开cmd，运行`emqx start`命令开启服务即可。此时在浏览器地址栏输入: `localhost:18083`，输入用户名：`admin`，密码：`public`进入，可以看到主界面。\n\n![界面](https://i.loli.net/2021/03/16/RnXQu4xr3cp2eZs.png)\n\n### Python版本\n\n#### 下载库\n\n`cmd`下执行这个命令\n\n```shell\npip install paho-mqtt\n```\n\n#### 编写订阅端\n\n新建一个`mqtt_sub.py`文件，编写代码如下：\n\n```python\nimport paho.mqtt.client as mqtt\n\nHOST = \"127.0.0.1\"\nPORT = 1883\n\n\ndef on_connect(client, userdata, flags, rc):\n    print(\"Connected with result code \" + str(rc))\n    client.subscribe(\"chat\")\n\n\ndef on_message(client, userdata, msg):\n    print(msg.topic + \" \" + \":\" + str(msg.payload))\n\n\nclient = mqtt.Client()\nclient.on_connect = on_connect\nclient.on_message = on_message\nclient.connect(host=HOST, port=PORT, keepalive=600)\nclient.loop_forever()\n\n```\n\n#### 编写发布端\n\n新建一个`mqtt_pub.py`文件，编写代码如下：\n\n```python\nimport paho.mqtt.client as mqtt\n\nHOST = \"127.0.0.1\"\nPORT = 1883\nmqttClient = mqtt.Client()\n\n\n# 连接MQTT服务器\ndef on_mqtt_connect():\n    mqttClient.connect(host=HOST, port=PORT, keepalive=600)\n    mqttClient.loop_start()\n\n\n# publish 消息\ndef on_publish(topic, payload, qos):\n    mqttClient.publish(topic, payload, qos)\n\n\n# 消息处理函数\ndef on_message_come(client, userdata, msg):\n    print(msg.topic + \" \" + \":\" + str(msg.payload))\n\n\n# subscribe 消息\ndef on_subscribe():\n    mqttClient.subscribe(topic=\"chat\", qos=2)\n    mqttClient.on_message = on_message_come  # 消息到来处理函数\n\n\ndef main():\n    on_mqtt_connect()\n    on_publish(topic=\"chat\", payload=\"Hello Python!\", qos=2)\n    on_subscribe()\n    while True:\n        pass\n\n\nif __name__ == '__main__':\n    main()\n\n```\n\n#### 执行文件\n\n首先运行`mqtt_sub.py`，接着，同时运行`mqtt_pub.py`，这时候就可以收到自己订阅的消息\n\n![python结果](https://i.loli.net/2021/03/16/jiwxE4GR6Vv5zkf.png)\n\n至此，Python版本测试成功。[完整代码](https://github.com/GarfieldCCC/MQTT-Test)\n\n\n\n### 客户端版本\n\n#### 下载客户端工具\n\n这里推荐[MQTT.fx](http://mqttfx.jensd.de/index.php/download)\n\n下载完毕安装后打开界面如下：\n\n![客户端](https://i.loli.net/2021/03/16/YIzjhMyoc4mG7ug.png)\n\n#### 配置连接\n\nExtras->Edit Connection Profiles，然后按照下图配置\n\n![配置连接](https://i.loli.net/2021/03/16/GsIfWxOoFy9q2Q3.png)\n\n配置完毕后点击`Connect`\n\n![连接](https://i.loli.net/2021/03/16/D5y8qxPRMEHp36u.png)\n\n创建自己的订阅\n\n![创建订阅](https://i.loli.net/2021/03/16/Q98FhA7IVZy56nW.png)\n\n这边配置完毕，接下来进入刚刚的Dashboard，选择`Websocket`\n\n![Dashboard](https://i.loli.net/2021/03/16/UWPzEy3DbfLVaCT.png)\n\n先连接\n\n![连接](https://i.loli.net/2021/03/16/9WAfHbLw3pXTMJd.png)\n\n然后发布一个主题为goods的信息\n\n![发布](https://i.loli.net/2021/03/16/dF83UqCiQAzflag.png)\n\n发送后MQTT.fx客户端便会接收到发送的信息\n\n![接收](https://i.loli.net/2021/03/16/7duHlLGY3btSVMq.png)\n\n至此，客户端版本测试完毕","tags":["MQTT","Python"],"categories":["记录","网络"]},{"title":"MQTT简单介绍","url":"/post/9f1ab931.html","content":"\n\n\n### 简述\n\nMQTT（Message Queuing Telemetry Transport，消息队列遥测传输协议），是一种基于发布/订阅模式的\"轻量级\"通讯协议，该协议构建于TCP/IP协议上。好比你给好友发送一封电子邮件，发送完成后你可以去做别的事情，收件人也不必立刻响应，可以在自己有空的时候查看邮件，是一个典型的异步发布/订阅场景。而另一种典型的同步请求/回答场景，可以用接打电话的场景来类比。\n\nMQTT的设计遵循以下的原则：\n\n1. 精简，不添加可有可无的功能。\n2. 发布/订阅（Pub/Sub）模式，方便消息在传感器之间传递。\n3. 允许用户动态创建主题，零运维成本。\n4. 把传输量降到最低以提高传输效率。\n5. 把低带宽、高延迟、不稳定的网络等因素考虑在内。\n6. 支持连续的会话控制。\n7. 理解客户端计算能力可能很低。\n8. 提供服务质量管理。\n9. 假设数据不可知，不强求传输数据的类型与格式，保持灵活性。\n\n#### 服务质量\n\n为了满足不同的场景，MQTT支持三种不同级别的服务质量（Quality of Service，QoS）为不同场景提供消息可靠性：\n\n1. 级别0：尽力而为。消息发送者会想尽办法发送消息，但是遇到意外并不会重试。\n2. 级别1：至少一次。消息接收者如果没有知会或者知会本身丢失，消息发送者会再次发送以保证消息接收者至少会收到一次，当然可能造成重复消息。\n3. 级别2：恰好一次。保证这种语义肯待会减少并发或者增加延时，不过丢失或者重复消息是不可接受的时候，级别2是最合适的。\n\n#### 消息类型\n\nMQTT拥有14种不同的消息类型：\n\n1. CONNECT：客户端连接到MQTT代理\n2. CONNACK：连接确认\n3. PUBLISH：新发布消息\n4. PUBACK：新发布消息确认，是QoS 1给PUBLISH消息的回复\n5. PUBREC：QoS 2消息流的第一部分，表示消息发布已记录\n6. PUBREL：QoS 2消息流的第二部分，表示消息发布已释放\n7. PUBCOMP：QoS 2消息流的第三部分，表示消息发布完成\n8. SUBSCRIBE：客户端订阅某个主题\n9. SUBACK：对于SUBSCRIBE消息的确认\n10. UNSUBSCRIBE：客户端终止订阅的消息\n11. UNSUBACK：对于UNSUBSCRIBE消息的确认\n12. PINGREQ：心跳\n13. PINGRESP：确认心跳\n14. DISCONNECT：客户端终止连接前优雅地通知MQTT代理\n\n### MQTT协议原理\n\n![协议](https://i.loli.net/2021/03/16/Fr3jR7aoeyY6JIP.png)\n\n#### MQTT协议实现方式\n\n实现MQTT协议需要客户端和服务器端通讯完成，在通讯过程中，MQTT协议中有三种身份：发布者（Publish）、代理（Broker）（服务器）、订阅者（Subscribe）。其中，消息的发布者和订阅者都是客户端，消息代理是服务器，消息发布者可以同时是订阅者。\n\nMQTT传输的消息分为：主题（Topic）和负载（payload）两部分：\n\n1. Topic，可以理解为消息的类型，订阅者订阅（Subscribe）后，就会收到该主题的消息内容（payload）；\n2. payload，可以理解为消息的内容，是指订阅者具体要使用的内容。\n\n#### 网络传输与应用消息\n\nMQTT会构建底层网络传输：它将建立客户端到服务器的连接，提供两者之间的一个有序的、无损的、基于字节流的双向传输。\n\n当应用数据通过MQTT网络发送时，MQTT会把与之相关的服务质量（QoS）和主题名（Topic）相关连。\n\n#### MQTT客户端\n\n一个使用MQTT协议的应用程序或者设备，它总是建立到服务器的网络连接。客户端可以：\n\n1. 发布其他客户端可能会订阅的信息；\n2. 订阅其它客户端发布的消息；\n3. 退订或删除应用程序的消息；\n4. 断开与服务器连接。\n\n#### MQTT服务器\n\nMQTT服务器以称为\"消息代理\"（Broker），可以是一个应用程序或一台设备。它是位于消息发布者和订阅者之间，它可以：\n\n1. 接受来自客户的网络连接；\n2. 接受客户发布的应用信息；\n3. 处理来自客户端的订阅和退订请求；\n4. 向订阅的客户转发应用程序消息。\n\n#### MQTT协议中的订阅、主题、会话\n\n##### 订阅（Subscription）\n\n订阅包含主题筛选器（Topic Filter）和最大服务质量（QoS）。订阅会与一个会话（Session）关联。一个会话可以包含多个订阅。每一个会话中的每个订阅都有一个不同的主题筛选器。\n\n##### 会话（Session）\n\n每个客户端与服务器建立连接后就是一个会话，客户端和服务器之间有状态交互。会话存在于一个网络之间，也可能在客户端和服务器之间跨越多个连续的网络连接。\n\n##### 主题（Topic Name）\n\n连接到一个应用程序消息的标签，该标签与服务器的订阅相匹配。服务器会将消息发送给订阅所匹配标签的每个客户端。\n\n##### 主题筛选器（Topic Filter）\n\n一个对主题名通配符筛选器，在订阅表达式中使用，表示订阅所匹配到的多个主题。\n\n##### 负载（Payload）\n\n消息订阅者所具体接收的内容。\n\n#### MQTT协议中的方法\n\nMQTT协议中定义了一些方法（也被称为动作），来于表示对确定资源所进行操作。这个资源可以代表预先存在的数据或动态生成数据，这取决于服务器的实现。通常来说，资源指服务器上的文件或输出。主要方法有：\n\n1. Connect：等待与服务器建立连接。\n2. Disconnect：等待MQTT客户端完成所做的工作，并与服务器断开TCP/IP会话。\n3. Subscribe：等待完成订阅。\n4. UnSubscribe：等待服务器取消客户端的一个或多个topics订阅。\n5. Publish：MQTT客户端发送消息请求，发送完成后返回应用程序线程。","tags":["MQTT"],"categories":["记录","网络"]},{"title":"Hexo解决难看的中文URL编码","url":"/post/9d25bc33.html","content":"\n\n\n### 为什么写这篇文章\n\n你的基于Hexo搭建起来的博客，如果你的文章标题含有中文，那么你会看到你的URL被解析成了非常难看的样子。为了看起来更加简洁，使用这款[Hexo-addrlink](https://github.com/Rozbo/hexo-abbrlink)插件就可以解决\n\n![效果](https://i.loli.net/2021/03/12/GbQmP7uqlX6iBaz.png)\n\n### 使用\n\n#### 安装插件\n\n```shell\nnpm install hexo-abbrlink --save\n```\n\n### 配置\n\n修改根目录站点配置文件`_config.yml`，改为：\n\n```yaml\npermalink: posts/:abbrlink.html\nabbrlink:\n    alg: crc32\n    rep: hex\n```\n\n然后hexo三连后 便会自动在原来的.`md`文件中生成`abbrlink`字段\n\n成果如下：\n\n![效果](https://i.loli.net/2021/03/12/EubR4JOnoG3dLM7.png)\n\n","tags":["编码","Hexo"],"categories":["记录"]},{"title":"导出iOS设备的微信数据到电脑","url":"/post/1f905c2f.html","content":"\n\n\n### 准备工作\n\n[iTunes](https://www.apple.com.cn/itunes/)\n\n[iPhone Backup Extractor](https://www.iphonebackupextractor.com/zh/free-download/)\n\n数据库工具（本文以[DB Browser for SQLite](http://www.sqlitebrowser.org/dl/)为例）\n\n### 下载上述的三个工具\n\n#### iTunes\n\n进入官网，拉到下面，点击`Windows`，进入后下载。如果没有反应，需要打开为新标签\n\n![image-20210311164947421](https://i.loli.net/2021/03/11/hcpi6Rj7LHDVQyS.png)\n\n![下载iTunes](https://i.loli.net/2021/03/11/J9FeTBDSq5ApUHN.png)\n\n#### iPhone Backup Extractor\n\n软件界面如下\n\n![下载iBE](https://i.loli.net/2021/03/11/9GsCmSa8zNTQXUe.png)\n\n#### DB Browser for SQLite\n\n软件界面如下\n\n![下载DB](https://i.loli.net/2021/03/11/juOrDycqNXJ6FT9.png)\n\n### 使用iTunes备份数据\n\n打开iTunes，并使用数据线将你的苹果手机连接至电脑，点击左上角的手机图标，在备份这一栏选择备份到电脑->立即备份（不要加密）\n\n![备份](https://i.loli.net/2021/03/11/Ezd1woTSiOQnUly.png)\n\n时间可能会比较久，耐心等待即可\n\n### 使用iPhone Backup Extractor提取数据\n\n打开iPhone Backup Extractor，如果上一步没有问题，会在左边显示你刚刚备份好的文件\n\n![提取](https://i.loli.net/2021/03/11/ZxPlbRMNiWptDda.png)\n\n选择Expert mode->Applications->com.tencent.xin->Documents->自己的加密过的某一个用户->DB，在这个DB目录下面就是微信的聊天数据（message_1.sqlite一直到message_4.sqlite）和用户数据（WCDB_Contact.sqlite）。选中，然后点击`Extract selected`，免费版会等待10s，并且一次最多导出4个文件，如果你觉得免费版不够用，可以订阅，一年200多\n\n![选择导出](https://i.loli.net/2021/03/12/9IshDygu5ZRnvl8.png)\n\n导出至任何位置都可以\n\n### 使用DB Browser for SQLite打开数据库\n\n![打开数据库](https://i.loli.net/2021/03/12/ALkwFXBem8dCDsH.png)\n\n先选择打开数据库，再选择浏览数据，即可成功访问数据库的数据","tags":["iOS","微信"],"categories":["记录","iOS"]},{"title":"GitHub搭建博客自定义域名","url":"/post/76507812.html","content":"\n\n\n### 为什么写这篇文章\n\n虽然已经有了自己的个人站点，但是为了让自己的文章更好地被搜索引擎抓取，需要让各类搜索引擎收录自己的站点，但是当我想让百度站长收录时，总是失败。后来上网查询发现GitHub禁止了百度爬虫，即github.io的站点无法被百度收录。因此，使用个性域名现在成为必须做的一件事。\n\n### 准备工作\n\n搭建好的GitHub博客、一个阿里云的域名（是不是阿里云都无所谓）。\n\n### 阿里云域名注册\n\n进入[阿里云](https://www.aliyun.com/)，登录后右上角点击搜索：域名，然后点击域名注册，输入自己想要的域名，根据财力选择适合自己的后缀，加入清单，右边点击`立即结算`，即可。\n\n![域名注册](https://i.loli.net/2021/03/11/jxgO4KMY5ARqVnr.png)\n\n![加入清单](https://i.loli.net/2021/03/11/smghdHGpPZ8tlvX.png)\n\n购买后，可以进入控制台查看自己的域名。以我为例：\n\n![查看域名](https://i.loli.net/2021/03/11/EFKHfWtNDxi2Qu3.png)\n\n这里首先要进行实名认证，需要你填写一个模板，很简单，我已经做好了实名认证。\n\n若你也做好了实名认证，点击右边的`解析`后，点击`添加记录`。\n\n![添加记录](https://i.loli.net/2021/03/11/Wn4gA9z6m5DdR27.png)\n\n这里需要我们填写一些信息，具体填写内容如下：\n\n![信息填写](https://i.loli.net/2021/03/11/JDSzYrOuEvP8ox2.png)\n\n记录类型：默认选择A\n\n主机记录：主机记录需要添加两个，分两次添加解析，分别为www和@，不分先后\n\n解析线路：选择默认\n\nTTL值：选择默认 10分钟\n\n记录值：打开电脑终端或命令行，输入命令：\n\n```shell\nping [个人站点原域名]\n例如我的：ping garfield.github.io\n```\n\n![ping](https://i.loli.net/2021/03/11/lC4ptyU7fNeciOR.png)\n\n即可得到我们需要的值，填入即可。\n\n记住，还要再添加一个主机记录为@的，其他填法不变。\n\n![添加](https://i.loli.net/2021/03/11/g7vxJZfXQGVq9ke.png)\n\n至此，阿里云的域名注册解析部分已经成功完成，接下来看GitHub这里，就简单了。\n\n### GitHub绑定域名\n\n来到自己的博客项目主页，添加新文件名为CNAME，然后在这个文件内填写自己刚注册的域名\n\n![域名绑定](https://i.loli.net/2021/03/11/c6HWe1TRA2GOrnQ.png)\n\n保存提交，大功告成！\n\n### 注意\n\n域名映射需要一定时间，请等待10分钟左右，即可正常访问自己的个人站点。\n\n![访问](https://i.loli.net/2021/03/11/YADSXLhGnuQgOy8.png)\n\n","tags":["GitHub","域名"],"categories":["记录","Git"]},{"title":"JetBrains全家桶好用的IDE插件","url":"/post/5e63e1c2.html","content":"\n\n\n### 为什么写这篇文章\n\nJetBrains系列的IDE如PyCharm、Idea、PhpStorm等已经家喻户晓（在程序员界），强大的功能是他能成为中流砥柱的重要原因之一。但是，如此强大并不妨碍它形成更加强大的插件生态。接下来安利一些非常好用的插件。\n\n### 如何安装插件\n\n以PyCharm为例（其他都一样），File->Settins->Plugins，然后在商店搜索下载即可（部分插件可能需要其他操作，但是不难）\n\n### 开始安利\n\n#### Key Promoter X\n\n![key promoter](https://i.loli.net/2021/03/10/fEM7zrVtsWIDjAx.png)\n\n键盘操作如果熟悉的话，效率一定高于鼠标，但是，这么多的快捷键，我怎么能记得住呢？安装这款插件后，每当你进行一次操作，如果有对应的快捷键，这款插件会在右下角给出这个操作的快捷键，这样，你就会慢慢记住更多的快捷键，办公效率会不断提升。\n\n#### Kite\n\n代码智能提示，智能程度远超IDE自带的代码提示，因为这是基于深度学习实现的。可以看这个[安装教程](https://juejin.cn/post/6844904025045860360)。\n\n![kite](https://i.loli.net/2021/03/10/XdUNC5fspZVqSzE.png)\n\n#### Translation\n\n写代码的时候不知道怎么翻译成合适的英文？遇到奇怪的单词看不懂了？用这个，支持多种语言的翻译，直接在IDE中选中单词右键即可。\n\n![translation](https://i.loli.net/2021/03/10/1FYtWu8BaUjdJzQ.png)\n\n#### leetcode editor\n\n你以为我在写代码，其实我在摸鱼刷题（不是）。在IDE中直接刷leetcode的题。需要设置登录账号密码以及编程语言。\n\n![leetcode editor](https://i.loli.net/2021/03/10/VGAOKY6s2eWPBN8.png)\n\n#### Rainbow Brackets\n\n![rainbow brackets](https://i.loli.net/2021/03/31/f3jhVZA6kmdBeQE.png)\n\n给括号加颜色，方便区分。比如下图，看起来是不是清晰很多：\n\n![展示](https://i.loli.net/2021/03/31/mg7IjiOHX4c8WbG.png)\n\n#### SonarLint\n\n![SonarLint](https://i.loli.net/2021/06/18/Co1qewyMxXUgmKQ.png)\n\n检查代码规范，让你的代码更加优秀\n\n![SonarLint-Check](https://i.loli.net/2021/06/18/NTUYgjPa3Ru6Q2d.png)\n\n### 未完待续... ...\n\n\n\n\n\n","tags":["记录","IDE"],"categories":["记录"]},{"title":"Linux发展史","url":"/post/fcf19b50.html","content":"\n\n\n### Linux发展史\n\n#### 1. Linux概述\n\nLinux是一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX和UNIX的多用户、多任务、支持多线程和多CPU的操作系统。它能运行主要的UNIX工具软件、应用程序和网络协议。它支持32位和64位硬件。Linux继承了Unix以网络为核心的设计思想，是一个性能稳定的都用户网络操作系统。\n\nLinux操作系统诞生于1991年10月5日。Linux存在着许多不同的Linux版本，但它们都使用了Linux内核。Linux可安装在各种计算机硬件设备中，比如手机、平板电脑、路由器、视频游戏控制台、台式计算机、大型机和超级计算机。\n\n严格来讲，Linux这个词本身只表示Linux内核，但实际上人们已经习惯了用Linux来形容整个基于Linux内核，并且使用GNU工程各种工具和数据库的操作系统。\n\n#### 2. Linux简史\n\nLinux操作系统的诞生、发展和成长过程始终依赖着五个重要支柱：UNIX操作系统、MINIX操作系统、GNU计划、POXIS标准和Internet网络。\n\n1981年IBM公司推出微型计算机IBM PC。\n\n1991年，GNU计划已经开发出了许多工具软件，最受期盼的GNU C编译器已经出现，GNU的操作系统核心HURD一直处于实验阶段，没有任何可用性，实质上也没能开发出完整的GNU操作系统，但是GNU奠定了Linux用户基础和开发环境。\n\n1991年初，林纳斯托瓦兹开始在一台386sx兼容微机上学习minix操作系统。1991年4月，林纳斯·托瓦兹开始酝酿并着手编制自己的操作系统。\n\n1991年的10月5日，林纳斯·托瓦兹在comp.os.minix新闻组上发布消息，正式向外宣布Linux内核的诞生(**Freeminix-like**kernel sources for 386-AT)。\n\n1993年，大约有100余名程序员参与了Linux内核代码编写/修改工作，其中核心组由5人组成，此时Linux 0.99的代码大约有十万行，用户大约有10万左右。\n\n1994年3月，Linux1.0发布，代码量17万行，当时是按照完全自由免费的协议发布，随后正式采用GPL协议。\n\n1995年1月，Bob Young创办了RedHat（小红帽），以GNU/Linux为核心，集成了400多个源代码开放的程序模块，搞出了一种冠以品牌的Linux，即RedHat Linux,称为Linux\"发行版\"，在市场上出售。这在经营模式上是一种创举。\n\n1996年6月，Linux 2.0内核发布，此内核有大约40万行代码，并可以支持多个处理器。此时的Linux 已经进入了实用阶段，全球大约有350万人使用。\n\n1998年2月，以Eric Raymond为首的一批年轻的\"老牛羚骨干分子\"终于认识到GNU/Linux体系的产业化道路的本质，并非是什么自由哲学，而是市场竞争的驱动，创办了\"Open Source Intiative\"（开放源代码促进会）\"复兴\"的大旗，在互联网世界里展开了一场历史性的Linux产业化运动。\n\n2001年1月，Linux 2.4发布，它进一步地提升了SMP系统的扩展性，同时它也集成了很多用于支持桌面系统的特性：USB，PC卡（PCMCIA）的支持，内置的即插即用，等等功能。\n\n2003年12月，Linux 2.6版内核发布，相对于2.4版内核2.6在对系统的支持都有很大的变化。\n\n2004年的第1月，SuSE嫁到了Novell，SCO继续顶着骂名四处强行“化缘”， Asianux， MandrakeSoft也在五年中首次宣布季度赢利。3月，SGI宣布成功实现了Linux操作系统支持256个Itanium 2处理器。\n\n#### 3. Linux主要特性\n\n* 基本思想\n\n  Linux的基本思想有两点：第一，一切都是文件；第二，每个软件都有确定的用途。其中第一条详细来讲就是系统中的所有都归结为一个文件，包括命令、硬件和软件设备、操作系统、进程等等对于操作系统内核而言，都被视为拥有各自特性或类型的文件。至于说Linux是基于Unix的，很大程度上也是因为这两者的基本思想十分相近。\n\n* 完全免费\n\n  Linux是一款免费的操作系统，用户可以通过网络或其他途径免费获得，并可以任意修改其源代码。这是其他操作系统所做不到的。正是由于这一点，来自全世界的无数程序员参与了Linux的修改、编写工作，程序员可以根据自己的兴趣和灵感对其进行改变，这让Linux吸收了无数程序员的精华，不断壮大。\n\n* 完全兼容POSIX1.0标准\n\n  这使得可以在Linux下通过相应的模拟器运行常见的DOS、Windows的程序。这为用户从Windows转到Linux奠定了基础。许多用户在考虑使用Linux时，就想到以前在Windows下常见的程序是否能正常运行，这一点就消除了他们的疑虑。\n\n* 多用户、多任务\n\n  Linux支持多用户，各个用户对于自己的文件设备有自己特殊的权利，保证了各用户之间互不影响。多任务则是现在电脑最主要的一个特点，Linux可以使多个程序同时并独立地运行。\n\n* 良好的界面\n\n  Linux同时具有字符界面和图形界面。在字符界面用户可以通过键盘输入相应的指令来进行操作。它同时也提供了类似Windows图形界面的X-Window系统，用户可以使用鼠标对其进行操作。在X-Window环境中就和在Windows中相似，可以说是一个Linux版的Windows。\n\n* 支持多种平台\n\n  Linux可以运行在多种硬件平台上，如具有x86、680x0、SPARC、Alpha等处理器的平台。此外Linux还是一种嵌入式操作系统，可以运行在掌上电脑、机顶盒、或游戏机上。2001年1月份发布的Linux2.4版内核已经能够完全支持Intel 64位芯片架构。同时Linux也支持多处理器技术。多个处理器同时工作，使系统性能大大提高。\n\n#### 4. Linux应用领域\n\n* 服务器领域\n\n  Linux系统最显著的优点便是稳定，这是企业服务器对系统的首要要求。此外，Linux系统是自由软件，还具备体积小、价位低、可定制等优点，可用于搭建Web、数据库、邮件、DNS、FTP等各种服务器。总的来说，使用Linux搭建的服务器不仅功能齐全、稳定性高、运营成本小，还无需考虑版权问题，因此Linux系统逐渐渗入到了电信、政府、教育、银行、金融等各个行业，在服务器领域的应用也越来越广泛。\n\n* 嵌入式应用领域\n\n  由于具有成本低廉、可设定性强等特点，Linux在嵌入式应用领域的使用也极其广泛，从路由器、交换机、防火墙等因特网设备，到冰箱、空调等各种家用电器，以及自动贩卖机等专用的控制系统都有Linux系统的身影。此外，Linux也是目前移动设备上常用的操作系统之一。\n\n* 个人桌面领域\n\n  虽然Linux系统还是一个侧重于命令行的系统，但近些年Linux系统也在向桌面系统领域靠拢，如今的Linux系统大多都搭建了图形界面，大大降低了普通用户的操作难度，如Ubuntu系统已经拥有了良好的桌面，完全可以满足日常办公需求。\n\n#### 5. Linux发行版本介绍\n\n* 5.1 Ubuntu\n\n  Ubuntu是Debian的一款衍生版，也是当今最受欢迎的免费操作系统。Ubuntu侧重于它在这个市场的应用，在服务器、云计算、甚至一些运行Ubuntu Linux的移动设备上很常见。作为Debian Gnu Linux的一款衍生版，Ubuntu的进程、外观和感觉大多数仍然与Debian一样。它使用apt软件管理工具来安装和更新软件。它也是如今市面上用起来最容易的发行版之一。Ubuntu使用基于apt的程序包管理器。\n\n  Ubuntu是新手用户肯定爱不释手的一款操作系统。\n\n* 5.2 RedHat\n\n  Redhat（小红帽），应该称为Redhat系列，包括RHEL(Redhat Enterprise Linux，也就是所谓的Redhat Advance Server，收费版本)、Fedora Core(由原来的Redhat桌面版本发展而来，免费版本)、CentOS(RHEL的社区克隆版本，免费)。Redhat应该说是在国内使用人群最多 的Linux版本，甚至有人将Redhat等同于Linux，而有些老鸟更是只用这一个版本的Linux。所以这个版本的特点就是使用人群数量大，资料非常多，言下之意就是如果你有什么不明白的地方，很容易找到人来问，而且网上的一般Linux教程都是以Redhat为例来讲解的。Redhat系列的包管理方式采用的是基于RPM包的YUM包管理方式，包分发方式是编译好的二进制文件。稳定性方面RHEL和CentOS的稳定性非常好，适合于服务器使用， 但是Fedora Core的稳定性较差，最好只用于桌面应用。\n\n* 5.3 Debian\n\n  Debian运行起来极其稳定，这使得它非常适合用于服务器。Debian平时维护三套正式的软件库和一套非免费软件库，这给另外几款发行版(比如Ubuntu和Kali等)带来了灵感。Debian这款操作系统派生出了多个Linux发行版。它有37500多个软件包，这方面唯一胜过Debian的其他发行版只有Gentoo。Debian使用apt或aptitude来安装和更新软件。\n\n  Debian这款操作系统无疑并不适合新手用户，而是适合系统管理员和高级用户。Debian支持如今的大多数架构(处理器)。\n\n* 5.4 Gentoo\n\n  与Debian一样，Gentoo这款操作系统也包含数量众多的软件包。Gentoo并非以预编译的形式出现，而是每次需要针对每个系统进行编译。连Gentoo社区都觉得Gentoo安装和使用起来很困难；不过它被认为是最佳学习对象，可以进而了解Linux操作系统的内部运作原理。提到Gentoo总有人这么说：”如果你要学用Linux发行版，那就学用该发行版吧；如果你学会了Gentoo，也就学会了Linux。“Gentoo使用portage来安装和更新软件。\n\n  Gentoo这款操作系统适合对Linux已经完全驾轻就熟的那些用户。\n\n* 5.5 CentOS\n\n  CentOS是一款企业级Linux发行版，它使用红帽企业级Linux中的免费源代码重新构建而成。这款重构版完全去掉了注册商标以及Binary程序包方面一个非常细微的变化。有些人不想支付一大笔钱，又能领略红帽企业级Linux；对他们来说，CentOS值得一试。此外，CentOS的外观和行为似乎与母发行版红帽企业级Linux如出一辙。 CentOS使用YUM来管理软件包。\n\n  非常稳定的程序包；要是想在桌面端测试一下服务器的运作原理，都应该试试这款操作系统。\n\n* 5.6 Fedora\n\n  小巧的Fedora适合那些人：想尝试最先进的技术，等不及程序的稳定版出来。其实，Fedora就是红帽公司的一个测试平台；产品在成为企业级发行版之前，在该平台上进行开发和测试。Fedora是一款非常好的发行版，有庞大的用户论坛，软件库中还有为数不少的软件包。Fedora同样使用YUM来管理软件包。\n\n* 5.7 Kali Linux\n\n  Kali Linux是Debian的一款衍生版。Kali旨在用于渗透测试。Kali的前身是Backtrack。用于Debian的所有Binary软件包都可以安装到Kali Linux上，而Kali的魅力或威力就来自于此。此外，支持Debian的用户论坛为Kali加分不少。Kali随带许多的渗透测试工具，无论是Wifi、数据库还是其他任何工具，都设计成立马可以使用。Kali使用APT来管理软件包。\n\n  毫无疑问，Kali Linux是一款渗透测试工具，或者是文明黑客青睐的操作系统。\n\n* 5.8 Arch Linux\n\n  Arch是一款采用滚动发行方式的操作系统：只要安装一次就够了；每当发行了某个新版本，就可以升级发行版，不需要重新安装。Pacman是Arch Linux的软件包管理器。Arch Linux既支持X86处理器架构，又支持X86_64架构，安装程序可以从光盘或U盘来运行。Arch旨在从开发者的角度而不是从用户的角度做到力求简单。Arch配置和安装起来超容易。它真是一款面向高手的发行版，让你可以了解Linux系统的每一个细枝末节。\n\n* 5.9 OpenSuse\n\n  OpenSuse这款Linux发行版是免费的，并不供商业用途使用，仍然供个人使用。OpenSuse的真正竞争对手是红帽企业级Linux。它使用Yast来管理软件包。有了Yast，使用和管理服务器应用程序就非常容易。此外，Yast安装向导程序可以配置电子邮件服务器、LDAP服务器、文件服务器或Web服务器，没有任何不必要的麻烦。它随带snapper快照管理工具，因而可以恢复或使用旧版的文件、更新和配置。由于让滚动发行版本成为可能的Tumbleweed，可将已安装的操作系统更新到最新版本，不需要任何的新发行版。\n\n  SUSE在管理员当中的名气更大，因为它有Yast以及让系统管理员能够自动管理任务的其他此类应用程序，同样水准的其他发行版没有这项功能。\n\n","tags":["知识"],"categories":["Linux"]},{"title":"CentOS部署MySQL","url":"/post/af6628ae.html","content":"\n### CentOS7 MySQL数据库安装和配置\n\n#### 一、系统环境\n\n`yum update`升级以后的系统版本为：\n\n```shell\n[root@localhost garfield]# cat /etc.redhat-release\nCentOS Linux release 7.8.2003(core)\n```\n\n#### 二、MySQL安装\n\n依次输入下列命令进行安装。\n\n```shell\n# yum install mysql\n# yum install mysql-devel\n# yum install mysql-server\n```\n\n安装mysql和mysql-devel都成功，但是安装mysql-server失败，如下：\n\n```shell\n[root@localhost garfield]# yum install mysql-server\nLoaded plugins: fastestmirror\nLoading mirror speeds from cached hostfile\n * base: mirrors.sina.cn\n * extras: mirrors.sina.cn\n * updates: mirrors.sina.cn\nNo package mysql-server available.\nError: Nothing to do\n```\n\n原因是CentOS7版本将MySQL数据库软件从默认的程序列表中移除，用mariadb代替了。下面给出解决方法：\n\n##### 官网下载安装mysql-server\n\n依次输入下列命令：\n\n```shell\n# wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\n# rpm -ivh mysql-community-release-el7-5.noarch.rpm\n# yum install mysql-community-server\n```\n\n安装成功后重启MySQL服务。\n\n```shell\n# service mysqld restart\n```\n\n初次安装MySQL，root账户没有密码。\n\n```shell\n[root@localhost garfield]# mysql -u root \nWelcome to the MySQL monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 3\nServer version: 5.6.26 MySQL Community Server (GPL)\n\nCopyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.\n\nOracle is a registered trademark of Oracle Corporation and/or its\naffiliates. Other names may be trademarks of their respective\nowners.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nmysql> show databases;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| performance_schema |\n| test               |\n+--------------------+\n4 rows in set (0.01 sec)\n\nmysql>\n```\n\n设置密码。\n\n```mysql\nmysql> set password for 'root'@'localhost' =password('password');\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n安装完以后，mariadb自动被替换，将不再生效，使用下列的命令将其移除：\n\n```shell\n[root@localhost garfield]# rpm -qa |grep mariadb\n```\n\n#### 三、配置MySQL\n\n##### 1. 编码\n\nMySQL配置文件为/etc/my.cnf\n\n最后加上编码配置。\n\n```shell\n[mysql]\ndefault-character-set =utf8\n```\n\n##### 2. 远程连接设置\n\n把在所有数据库的所有表的所有权限赋值给位于所有IP地址的root用户。\n\n```mysql\nmysql> grant all privileges on *.* to root@'%'identified by 'password';\n```\n\n如果是新用户而不是root，则要先新建用户。\n\n```mysql\nmysql>create user 'username'@'%' identified by 'password';\n```\n\n此时就可以进行远程连接了。\n\n","tags":["知识"],"categories":["Linux","MySQL"]},{"title":"有用命令","url":"/post/a92f9037.html","content":"\n记录一些有用的命令\n\n<!-- more -->\n\n#### 生成密钥\n\n```shell\n1. 在桌面打开Git Bash Here\n2. git config --global user.name \"yourname\"\n3. git config --global user.email \"youremail\"\n4. ssh-keygen -t rsa -C \"youremail\"\n5. 复制id_rsa.pub内容至公钥\n```\n\n#### 查看用户名和邮箱地址\n\n```shell\ngit config user.name\ngit config user.email\n```\n\n#### Windows10 开机自启动软件的目录\n\n`C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp`\n\n#### Windows上iTunes备份的位置\n\n`C:\\Users\\用户\\AppData\\Roaming\\Apple Computer\\MobileSync\\Backup`\n\n#### Typora中文状态下输入英文符号\n\n`ctrl + .`即可改回中文输入状态输出中文符号\n\n#### MySQL连接远程数据库\n\n```mysql\nmysql -h \"host\" -P 3306 -u root -p\n```\n\n#### MySQL在不清空数据的情况下重置id自增长\n\n```mysql\nalter table 表名 drop id;\nalter table 表名 add id int primary key not null auto_increment first;\n```\n\n#### 强制关掉yum进程\n\n```shell\nrm -f /var/run/yum.pid\n```\n\n#### Hexo相关命令\n\n##### 上传文件的命令\n\n```shell\nhexo clean\nhexo g\nhexo d\n```\n\n##### 新建文件的命令\n\n```shell\nhexo new \"文件名\"\n```\n\n#### Git忽略所有target目录\n\n在`.gitignore`文件中，写入`target/`即可。\n\n**注意！**不可以写成`/target/`，如果这样写，只有`.gitignore`所在路径的`target`目录会被忽略。\n\n#### .gitignore未生效\n\n`.gitignore`只会忽略在`.gitignore`编写之后的未跟踪`(untrack)`文件,而在编写`.gitignore`之前已经`add and commit`的文件则不会被忽略\n\n##### 解决办法\n\n```bash\ngit rm -r --cached .  //清除缓存\n```\n\n","tags":["知识"],"categories":["知识"]},{"title":"Hello World","url":"/post/4a17b156.html","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n"}]